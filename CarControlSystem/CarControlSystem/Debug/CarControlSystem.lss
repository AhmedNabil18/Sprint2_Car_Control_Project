
CarControlSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001830  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00001830  000018c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  008000a4  008000a4  00001908  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001938  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002581  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc3  00000000  00000000  00004155  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016df  00000000  00000000  00005118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000624  00000000  00000000  000067f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001405  00000000  00000000  00006e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016d8  00000000  00000000  00008221  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000098f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__vector_4>
      14:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__vector_5>
      18:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__vector_6>
      1c:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__vector_7>
      20:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__vector_8>
      24:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__vector_9>
      28:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__vector_10>
      2c:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	5c 08       	sbc	r5, r12
      56:	68 08       	sbc	r6, r8
      58:	5f 08       	sbc	r5, r15
      5a:	62 08       	sbc	r6, r2
      5c:	65 08       	sbc	r6, r5
      5e:	5c 08       	sbc	r5, r12
      60:	5c 08       	sbc	r5, r12

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e0 e3       	ldi	r30, 0x30	; 48
      76:	f8 e1       	ldi	r31, 0x18	; 24
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a4 3a       	cpi	r26, 0xA4	; 164
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	a4 ea       	ldi	r26, 0xA4	; 164
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a7 3c       	cpi	r26, 0xC7	; 199
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 89 02 	call	0x512	; 0x512 <main>
      98:	0c 94 16 0c 	jmp	0x182c	; 0x182c <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <CarApp_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
      a0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
      a4:	84 30       	cpi	r24, 0x04	; 4
      a6:	51 f0       	breq	.+20     	; 0xbc <CarApp_init+0x1c>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/

	/* Call the initializer in service layer */
	if(SRVC_STATUS_ERROR_OK != Service_init())
      a8:	0e 94 4a 09 	call	0x1294	; 0x1294 <Service_init>
      ac:	81 30       	cpi	r24, 0x01	; 1
      ae:	29 f4       	brne	.+10     	; 0xba <CarApp_init+0x1a>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
      b0:	84 e0       	ldi	r24, 0x04	; 4
      b2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	08 95       	ret
/**************************************************************************************/

	/* Call the initializer in service layer */
	if(SRVC_STATUS_ERROR_OK != Service_init())
	{
		return APP_STATUS_ERROR_NOK;
      ba:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
      bc:	08 95       	ret

000000be <CarApp_update>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
      be:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
      c2:	84 30       	cpi	r24, 0x04	; 4
      c4:	09 f0       	breq	.+2      	; 0xc8 <CarApp_update+0xa>
      c6:	7a c0       	rjmp	.+244    	; 0x1bc <CarApp_update+0xfe>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Get Button Pressed */
	if(Service_ReportButton(&gu8_buttonPressed) != SRVC_STATUS_ERROR_OK)
      c8:	84 ea       	ldi	r24, 0xA4	; 164
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 5f 09 	call	0x12be	; 0x12be <Service_ReportButton>
      d0:	81 30       	cpi	r24, 0x01	; 1
      d2:	09 f0       	breq	.+2      	; 0xd6 <CarApp_update+0x18>
      d4:	75 c0       	rjmp	.+234    	; 0x1c0 <CarApp_update+0x102>
		return APP_STATUS_ERROR_NOK;
	if(gu8_buttonPressed == BUTTON_NULL)
      d6:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
      da:	8f 3f       	cpi	r24, 0xFF	; 255
      dc:	19 f4       	brne	.+6      	; 0xe4 <CarApp_update+0x26>
		gu8_buttonPressed = CAR_BUTTONS_IDLE;
      de:	84 e0       	ldi	r24, 0x04	; 4
      e0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
	/* Fill the enuCurrentButton according to the button pressed */
	switch (gu8_buttonPressed)
      e4:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
      e8:	82 30       	cpi	r24, 0x02	; 2
      ea:	89 f1       	breq	.+98     	; 0x14e <CarApp_update+0x90>
      ec:	28 f4       	brcc	.+10     	; 0xf8 <CarApp_update+0x3a>
      ee:	88 23       	and	r24, r24
      f0:	49 f0       	breq	.+18     	; 0x104 <CarApp_update+0x46>
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	d9 f0       	breq	.+54     	; 0x12c <CarApp_update+0x6e>
      f6:	66 c0       	rjmp	.+204    	; 0x1c4 <CarApp_update+0x106>
      f8:	83 30       	cpi	r24, 0x03	; 3
      fa:	c9 f1       	breq	.+114    	; 0x16e <CarApp_update+0xb0>
      fc:	84 30       	cpi	r24, 0x04	; 4
      fe:	09 f4       	brne	.+2      	; 0x102 <CarApp_update+0x44>
     100:	4d c0       	rjmp	.+154    	; 0x19c <CarApp_update+0xde>
     102:	60 c0       	rjmp	.+192    	; 0x1c4 <CarApp_update+0x106>
	/*******************************************************************************/
	/*******************************************************************************/
	/* Case of Move Button is pressed */
	case CAR_MOVE_HOLD:
		/* Check if it's already Moving */
		if(enuCurrentButton == CAR_MOVE_HOLD)
     104:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     108:	88 23       	and	r24, r24
     10a:	09 f4       	brne	.+2      	; 0x10e <CarApp_update+0x50>
     10c:	5d c0       	rjmp	.+186    	; 0x1c8 <CarApp_update+0x10a>
			break;
		
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_MOVE_HOLD;
     10e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		/* Update the enuCurrentAction */
		enuCurrentAction = CAR_ACTION_MOVE;
		/* Check if the Current Gear is in Idle State (Neutral) */
		if (enuCurrentGear == CAR_STATE_IDLE)
     112:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <enuCurrentGear>
     116:	66 23       	and	r22, r22
     118:	09 f4       	brne	.+2      	; 0x11c <CarApp_update+0x5e>
     11a:	58 c0       	rjmp	.+176    	; 0x1cc <CarApp_update+0x10e>
			break;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		if(Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)enuCurrentGear) != SRVC_STATUS_ERROR_OK)
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	0e 94 9a 09 	call	0x1334	; 0x1334 <Service_UpdateMotors>
     122:	81 30       	cpi	r24, 0x01	; 1
     124:	09 f4       	brne	.+2      	; 0x128 <CarApp_update+0x6a>
     126:	54 c0       	rjmp	.+168    	; 0x1d0 <CarApp_update+0x112>
			return APP_STATUS_ERROR_NOK;
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	08 95       	ret
	/*******************************************************************************/
	/*******************************************************************************/
	/* Case of Left Button is pressed */
	case CAR_LEFT_HOLD:
		/* Check if it's already Moving Left */
		if(enuCurrentButton == CAR_LEFT_HOLD)
     12c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	09 f4       	brne	.+2      	; 0x136 <CarApp_update+0x78>
     134:	4f c0       	rjmp	.+158    	; 0x1d4 <CarApp_update+0x116>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_LEFT_HOLD;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		enuCurrentAction = CAR_ACTION_LEFT;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		if(Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)CAR_STATE_30F) != SRVC_STATUS_ERROR_OK)
     13c:	61 e0       	ldi	r22, 0x01	; 1
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	0e 94 9a 09 	call	0x1334	; 0x1334 <Service_UpdateMotors>
     144:	81 30       	cpi	r24, 0x01	; 1
     146:	09 f4       	brne	.+2      	; 0x14a <CarApp_update+0x8c>
     148:	47 c0       	rjmp	.+142    	; 0x1d8 <CarApp_update+0x11a>
			return APP_STATUS_ERROR_NOK;
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	08 95       	ret
	/*******************************************************************************/
	/*******************************************************************************/
	/* Case of Right Button is pressed */
	case CAR_RIGHT_HOLD:
		/* Check if it's already Moving Right */
		if(enuCurrentButton == CAR_RIGHT_HOLD)
     14e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     152:	82 30       	cpi	r24, 0x02	; 2
     154:	09 f4       	brne	.+2      	; 0x158 <CarApp_update+0x9a>
     156:	42 c0       	rjmp	.+132    	; 0x1dc <CarApp_update+0x11e>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_RIGHT_HOLD;
     158:	82 e0       	ldi	r24, 0x02	; 2
     15a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		enuCurrentAction = CAR_ACTION_RIGHT;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		if(Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)CAR_STATE_30F) != SRVC_STATUS_ERROR_OK)
     15e:	61 e0       	ldi	r22, 0x01	; 1
     160:	83 e0       	ldi	r24, 0x03	; 3
     162:	0e 94 9a 09 	call	0x1334	; 0x1334 <Service_UpdateMotors>
     166:	81 30       	cpi	r24, 0x01	; 1
     168:	d9 f1       	breq	.+118    	; 0x1e0 <CarApp_update+0x122>
			return APP_STATUS_ERROR_NOK;
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	08 95       	ret
	/*******************************************************************************/
	/*******************************************************************************/
	/* Case of Gear Button is pressed */
	case CAR_GEAR_PRESSED:
		/* Check if the button was previously pressed */
		if(enuCurrentButton == CAR_GEAR_PRESSED)
     16e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     172:	83 30       	cpi	r24, 0x03	; 3
     174:	b9 f1       	breq	.+110    	; 0x1e4 <CarApp_update+0x126>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_GEAR_PRESSED;
     176:	83 e0       	ldi	r24, 0x03	; 3
     178:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		Dio_togglePin(DIO_LED1_CHANNEL_ID);
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	0e 94 1a 04 	call	0x834	; 0x834 <Dio_togglePin>
		/* Update flag indicate the hold state and ignore it */
		
		/* Update the enuCurrentGear */
		if(enuCurrentGear != CAR_STATE_30B)
     182:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <enuCurrentGear>
     186:	84 30       	cpi	r24, 0x04	; 4
     188:	29 f0       	breq	.+10     	; 0x194 <CarApp_update+0xd6>
			enuCurrentGear++;
     18a:	8f 5f       	subi	r24, 0xFF	; 255
     18c:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <enuCurrentGear>
		break;
	}
	/*******************************************************************************/
	/*******************************************************************************/

	return APP_STATUS_ERROR_OK;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	08 95       	ret
		
		/* Update the enuCurrentGear */
		if(enuCurrentGear != CAR_STATE_30B)
			enuCurrentGear++;
		else
			enuCurrentGear = CAR_STATE_30F;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <enuCurrentGear>
     19a:	08 95       	ret
	
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_BUTTONS_IDLE:
		/* Check if it's already Moving Right */
		if(enuCurrentButton == CAR_BUTTONS_IDLE)
     19c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1a0:	84 30       	cpi	r24, 0x04	; 4
     1a2:	11 f1       	breq	.+68     	; 0x1e8 <CarApp_update+0x12a>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_BUTTONS_IDLE;
     1a4:	84 e0       	ldi	r24, 0x04	; 4
     1a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		enuCurrentAction = CAR_ACTION_STOP;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		if(Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)enuCurrentGear) != SRVC_STATUS_ERROR_OK)
     1aa:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <enuCurrentGear>
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	0e 94 9a 09 	call	0x1334	; 0x1334 <Service_UpdateMotors>
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	d1 f0       	breq	.+52     	; 0x1ec <CarApp_update+0x12e>
			return APP_STATUS_ERROR_NOK;
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Application was already initialized */
	if (enuCurrentAppStatus != APP_STATUS_INITIALIZED)
	{
		return APP_STATUS_UNINITIALIZED;
     1bc:	85 e0       	ldi	r24, 0x05	; 5
     1be:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Get Button Pressed */
	if(Service_ReportButton(&gu8_buttonPressed) != SRVC_STATUS_ERROR_OK)
		return APP_STATUS_ERROR_NOK;
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	08 95       	ret
		break;
	}
	/*******************************************************************************/
	/*******************************************************************************/

	return APP_STATUS_ERROR_OK;
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	08 95       	ret
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	08 95       	ret
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	08 95       	ret
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	08 95       	ret
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	08 95       	ret
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	08 95       	ret
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	08 95       	ret
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	08 95       	ret
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	08 95       	ret
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	08 95       	ret
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	08 95       	ret

000001f0 <CarApp_start>:
{
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	/* Initialize the Car application */
	if(CarApp_init() != APP_STATUS_ERROR_OK)
     1f0:	0e 94 50 00 	call	0xa0	; 0xa0 <CarApp_init>
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	39 f4       	brne	.+14     	; 0x206 <CarApp_start+0x16>
		return APP_STATUS_ERROR_NOK;
	EnableGlbl_Interrupt();
     1f8:	8f b7       	in	r24, 0x3f	; 63
     1fa:	80 68       	ori	r24, 0x80	; 128
     1fc:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the car status */
		if(CarApp_update() != APP_STATUS_ERROR_OK)
     1fe:	0e 94 5f 00 	call	0xbe	; 0xbe <CarApp_update>
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	e1 f3       	breq	.-8      	; 0x1fe <CarApp_start+0xe>
			return APP_STATUS_ERROR_NOK;
			
	}
}
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	08 95       	ret

0000020a <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
     20a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_BttnModuleState>
     20e:	85 30       	cpi	r24, 0x05	; 5
     210:	71 f0       	breq	.+28     	; 0x22e <Button_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
     212:	88 e6       	ldi	r24, 0x68	; 104
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 8c 02 	call	0x518	; 0x518 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	11 f0       	breq	.+4      	; 0x222 <Button_init+0x18>
     21e:	87 30       	cpi	r24, 0x07	; 7
     220:	29 f4       	brne	.+10     	; 0x22c <Button_init+0x22>
		return BTTN_STATUS_ERROR_NOK;
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
     222:	85 e0       	ldi	r24, 0x05	; 5
     224:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return BTTN_STATUS_ERROR_NOK;
     22c:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Button module to Initialized */
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
     22e:	08 95       	ret

00000230 <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
     230:	85 30       	cpi	r24, 0x05	; 5
     232:	60 f4       	brcc	.+24     	; 0x24c <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
     234:	61 15       	cp	r22, r1
     236:	71 05       	cpc	r23, r1
     238:	59 f0       	breq	.+22     	; 0x250 <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
     23a:	e8 2f       	mov	r30, r24
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	ea 55       	subi	r30, 0x5A	; 90
     240:	ff 4f       	sbci	r31, 0xFF	; 255
     242:	80 81       	ld	r24, Z
     244:	fb 01       	movw	r30, r22
     246:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
     250:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
     252:	08 95       	ret

00000254 <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	1f 92       	push	r1
     25e:	cd b7       	in	r28, 0x3d	; 61
     260:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
     262:	85 30       	cpi	r24, 0x05	; 5
     264:	08 f0       	brcs	.+2      	; 0x268 <Button_updateState+0x14>
     266:	58 c0       	rjmp	.+176    	; 0x318 <Button_updateState+0xc4>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
     268:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
     26a:	08 2f       	mov	r16, r24
     26c:	10 e0       	ldi	r17, 0x00	; 0
     26e:	f8 01       	movw	r30, r16
     270:	ed 59       	subi	r30, 0x9D	; 157
     272:	ff 4f       	sbci	r31, 0xFF	; 255
     274:	be 01       	movw	r22, r28
     276:	6f 5f       	subi	r22, 0xFF	; 255
     278:	7f 4f       	sbci	r23, 0xFF	; 255
     27a:	80 81       	ld	r24, Z
     27c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <Dio_readPin>
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	09 f0       	breq	.+2      	; 0x286 <Button_updateState+0x32>
     284:	4b c0       	rjmp	.+150    	; 0x31c <Button_updateState+0xc8>
		return BTTN_STATUS_ERROR_NOK;
	if(u8_valueTemp == PIN_HIGH)
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	81 30       	cpi	r24, 0x01	; 1
     28a:	09 f5       	brne	.+66     	; 0x2ce <Button_updateState+0x7a>
     28c:	04 c0       	rjmp	.+8      	; 0x296 <Button_updateState+0x42>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	a1 1d       	adc	r26, r1
     292:	b1 1d       	adc	r27, r1
     294:	03 c0       	rjmp	.+6      	; 0x29c <Button_updateState+0x48>
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	dc 01       	movw	r26, r24
     29c:	88 3b       	cpi	r24, 0xB8	; 184
     29e:	2b e0       	ldi	r18, 0x0B	; 11
     2a0:	92 07       	cpc	r25, r18
     2a2:	a1 05       	cpc	r26, r1
     2a4:	b1 05       	cpc	r27, r1
     2a6:	98 f3       	brcs	.-26     	; 0x28e <Button_updateState+0x3a>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
     2a8:	be 01       	movw	r22, r28
     2aa:	6f 5f       	subi	r22, 0xFF	; 255
     2ac:	7f 4f       	sbci	r23, 0xFF	; 255
     2ae:	f8 01       	movw	r30, r16
     2b0:	ed 59       	subi	r30, 0x9D	; 157
     2b2:	ff 4f       	sbci	r31, 0xFF	; 255
     2b4:	80 81       	ld	r24, Z
     2b6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <Dio_readPin>
     2ba:	81 30       	cpi	r24, 0x01	; 1
     2bc:	89 f5       	brne	.+98     	; 0x320 <Button_updateState+0xcc>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_HIGH)
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	81 30       	cpi	r24, 0x01	; 1
     2c2:	81 f5       	brne	.+96     	; 0x324 <Button_updateState+0xd0>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
     2c4:	f8 01       	movw	r30, r16
     2c6:	ea 55       	subi	r30, 0x5A	; 90
     2c8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ca:	80 83       	st	Z, r24
     2cc:	30 c0       	rjmp	.+96     	; 0x32e <Button_updateState+0xda>
	}else if (u8_valueTemp == PIN_LOW)
     2ce:	88 23       	and	r24, r24
     2d0:	31 f0       	breq	.+12     	; 0x2de <Button_updateState+0x8a>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	2c c0       	rjmp	.+88     	; 0x32e <Button_updateState+0xda>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
     2d6:	01 96       	adiw	r24, 0x01	; 1
     2d8:	a1 1d       	adc	r26, r1
     2da:	b1 1d       	adc	r27, r1
     2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <Button_updateState+0x90>
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	dc 01       	movw	r26, r24
     2e4:	88 3b       	cpi	r24, 0xB8	; 184
     2e6:	2b e0       	ldi	r18, 0x0B	; 11
     2e8:	92 07       	cpc	r25, r18
     2ea:	a1 05       	cpc	r26, r1
     2ec:	b1 05       	cpc	r27, r1
     2ee:	98 f3       	brcs	.-26     	; 0x2d6 <Button_updateState+0x82>
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
     2f0:	be 01       	movw	r22, r28
     2f2:	6f 5f       	subi	r22, 0xFF	; 255
     2f4:	7f 4f       	sbci	r23, 0xFF	; 255
     2f6:	f8 01       	movw	r30, r16
     2f8:	ed 59       	subi	r30, 0x9D	; 157
     2fa:	ff 4f       	sbci	r31, 0xFF	; 255
     2fc:	80 81       	ld	r24, Z
     2fe:	0e 94 72 04 	call	0x8e4	; 0x8e4 <Dio_readPin>
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	89 f4       	brne	.+34     	; 0x328 <Button_updateState+0xd4>
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	81 11       	cpse	r24, r1
     30a:	10 c0       	rjmp	.+32     	; 0x32c <Button_updateState+0xd8>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
     30c:	f8 01       	movw	r30, r16
     30e:	ea 55       	subi	r30, 0x5A	; 90
     310:	ff 4f       	sbci	r31, 0xFF	; 255
     312:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	0b c0       	rjmp	.+22     	; 0x32e <Button_updateState+0xda>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
     318:	82 e0       	ldi	r24, 0x02	; 2
     31a:	09 c0       	rjmp	.+18     	; 0x32e <Button_updateState+0xda>
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	if(Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp) != DIO_STATUS_ERROR_OK)
		return BTTN_STATUS_ERROR_NOK;
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	07 c0       	rjmp	.+14     	; 0x32e <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	05 c0       	rjmp	.+10     	; 0x32e <Button_updateState+0xda>
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	03 c0       	rjmp	.+6      	; 0x32e <Button_updateState+0xda>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
		/* De bouncing Check */
		if(Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp) != DIO_STATUS_ERROR_OK)
			return BTTN_STATUS_ERROR_NOK;
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	01 c0       	rjmp	.+2      	; 0x32e <Button_updateState+0xda>
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
     32c:	81 e0       	ldi	r24, 0x01	; 1
}
     32e:	0f 90       	pop	r0
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	1f 91       	pop	r17
     336:	0f 91       	pop	r16
     338:	08 95       	ret

0000033a <Motor_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
     33a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <gu8_MotorModuleStatus>
     33e:	86 30       	cpi	r24, 0x06	; 6
     340:	49 f0       	breq	.+18     	; 0x354 <Motor_init+0x1a>
/**************************************************************************************/
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
     342:	0e 94 b2 07 	call	0xf64	; 0xf64 <SWPwm_Init>
     346:	81 30       	cpi	r24, 0x01	; 1
     348:	39 f4       	brne	.+14     	; 0x358 <Motor_init+0x1e>
		return MOTOR_STATUS_ERROR_NOK;
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
     34a:	86 e0       	ldi	r24, 0x06	; 6
     34c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <gu8_MotorModuleStatus>
	return MOTOR_STATUS_ERROR_OK;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is already initialized */
	if(gu8_MotorModuleStatus == MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_INIT;
     354:	86 e0       	ldi	r24, 0x06	; 6
     356:	08 95       	ret
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Software PWM Module */
	if(SWPwm_Init() != SWPWM_STATUS_ERROR_OK)
		return MOTOR_STATUS_ERROR_NOK;
     358:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the module to initialized */
	gu8_MotorModuleStatus = MOTOR_STATUS_INIT;
	return MOTOR_STATUS_ERROR_OK;
}
     35a:	08 95       	ret

0000035c <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
     366:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <gu8_MotorModuleStatus>
     36a:	96 30       	cpi	r25, 0x06	; 6
     36c:	09 f0       	breq	.+2      	; 0x370 <Motor_run+0x14>
     36e:	53 c0       	rjmp	.+166    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{
		return MOTOR_STATUS_UNINIT;
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
     370:	82 30       	cpi	r24, 0x02	; 2
     372:	08 f0       	brcs	.+2      	; 0x376 <Motor_run+0x1a>
     374:	52 c0       	rjmp	.+164    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
     376:	65 36       	cpi	r22, 0x65	; 101
     378:	08 f0       	brcs	.+2      	; 0x37c <Motor_run+0x20>
     37a:	51 c0       	rjmp	.+162    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
     37c:	42 30       	cpi	r20, 0x02	; 2
     37e:	08 f0       	brcs	.+2      	; 0x382 <Motor_run+0x26>
     380:	50 c0       	rjmp	.+160    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
     382:	c8 2f       	mov	r28, r24
     384:	d0 e0       	ldi	r29, 0x00	; 0
     386:	fe 01       	movw	r30, r28
     388:	e6 55       	subi	r30, 0x56	; 86
     38a:	ff 4f       	sbci	r31, 0xFF	; 255
     38c:	80 81       	ld	r24, Z
     38e:	81 30       	cpi	r24, 0x01	; 1
     390:	09 f4       	brne	.+2      	; 0x394 <Motor_run+0x38>
     392:	49 c0       	rjmp	.+146    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     394:	f6 2e       	mov	r15, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_direction == MOTOR_DIR_CLK_WISE) /* Activate the Motor in the Clock Wise Direction */
     396:	41 11       	cpse	r20, r1
     398:	13 c0       	rjmp	.+38     	; 0x3c0 <Motor_run+0x64>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
     39a:	85 e0       	ldi	r24, 0x05	; 5
     39c:	8c 9f       	mul	r24, r28
     39e:	80 01       	movw	r16, r0
     3a0:	8d 9f       	mul	r24, r29
     3a2:	10 0d       	add	r17, r0
     3a4:	11 24       	eor	r1, r1
     3a6:	0b 56       	subi	r16, 0x6B	; 107
     3a8:	1f 4f       	sbci	r17, 0xFF	; 255
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	f8 01       	movw	r30, r16
     3ae:	81 81       	ldd	r24, Z+1	; 0x01
     3b0:	0e 94 81 03 	call	0x702	; 0x702 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	f8 01       	movw	r30, r16
     3b8:	82 81       	ldd	r24, Z+2	; 0x02
     3ba:	0e 94 81 03 	call	0x702	; 0x702 <Dio_writePin>
     3be:	14 c0       	rjmp	.+40     	; 0x3e8 <Motor_run+0x8c>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE) /* Activate the Motor in the Anti Clock Wise Direction */
     3c0:	41 30       	cpi	r20, 0x01	; 1
     3c2:	91 f4       	brne	.+36     	; 0x3e8 <Motor_run+0x8c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
     3c4:	85 e0       	ldi	r24, 0x05	; 5
     3c6:	8c 9f       	mul	r24, r28
     3c8:	80 01       	movw	r16, r0
     3ca:	8d 9f       	mul	r24, r29
     3cc:	10 0d       	add	r17, r0
     3ce:	11 24       	eor	r1, r1
     3d0:	0b 56       	subi	r16, 0x6B	; 107
     3d2:	1f 4f       	sbci	r17, 0xFF	; 255
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	f8 01       	movw	r30, r16
     3d8:	81 81       	ldd	r24, Z+1	; 0x01
     3da:	0e 94 81 03 	call	0x702	; 0x702 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	f8 01       	movw	r30, r16
     3e2:	82 81       	ldd	r24, Z+2	; 0x02
     3e4:	0e 94 81 03 	call	0x702	; 0x702 <Dio_writePin>
	}
	
	/* Change the state of the Motor to Running */
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
     3e8:	fe 01       	movw	r30, r28
     3ea:	e6 55       	subi	r30, 0x56	; 86
     3ec:	ff 4f       	sbci	r31, 0xFF	; 255
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	80 83       	st	Z, r24
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
     3f2:	85 e0       	ldi	r24, 0x05	; 5
     3f4:	8c 9f       	mul	r24, r28
     3f6:	f0 01       	movw	r30, r0
     3f8:	8d 9f       	mul	r24, r29
     3fa:	f0 0d       	add	r31, r0
     3fc:	11 24       	eor	r1, r1
     3fe:	eb 56       	subi	r30, 0x6B	; 107
     400:	ff 4f       	sbci	r31, 0xFF	; 255
     402:	43 81       	ldd	r20, Z+3	; 0x03
     404:	54 81       	ldd	r21, Z+4	; 0x04
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	2f 2d       	mov	r18, r15
     40c:	80 81       	ld	r24, Z
     40e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	09 c0       	rjmp	.+18     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Motor module is not initialized */
	if(gu8_MotorModuleStatus != MOTOR_STATUS_INIT)
	{
		return MOTOR_STATUS_UNINIT;
     416:	87 e0       	ldi	r24, 0x07	; 7
     418:	07 c0       	rjmp	.+14     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	}else{/*Nothing to here*/}
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	05 c0       	rjmp	.+10     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
     41e:	83 e0       	ldi	r24, 0x03	; 3
     420:	03 c0       	rjmp	.+6      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	01 c0       	rjmp	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
     426:	85 e0       	ldi	r24, 0x05	; 5
	
	/* Start the PWM Wave for the given speed and frequency */
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	08 95       	ret

00000434 <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
     43e:	82 30       	cpi	r24, 0x02	; 2
     440:	08 f0       	brcs	.+2      	; 0x444 <Motor_stop+0x10>
     442:	60 c0       	rjmp	.+192    	; 0x504 <Motor_stop+0xd0>
     444:	c8 2f       	mov	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Stop the Motor by driving the pins to LOW */
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
     446:	08 2f       	mov	r16, r24
     448:	10 e0       	ldi	r17, 0x00	; 0
     44a:	78 01       	movw	r14, r16
     44c:	ee 0c       	add	r14, r14
     44e:	ff 1c       	adc	r15, r15
     450:	ee 0c       	add	r14, r14
     452:	ff 1c       	adc	r15, r15
     454:	c7 01       	movw	r24, r14
     456:	80 0f       	add	r24, r16
     458:	91 1f       	adc	r25, r17
     45a:	9c 01       	movw	r18, r24
     45c:	2b 56       	subi	r18, 0x6B	; 107
     45e:	3f 4f       	sbci	r19, 0xFF	; 255
     460:	79 01       	movw	r14, r18
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	f9 01       	movw	r30, r18
     466:	81 81       	ldd	r24, Z+1	; 0x01
     468:	0e 94 81 03 	call	0x702	; 0x702 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	f7 01       	movw	r30, r14
     470:	82 81       	ldd	r24, Z+2	; 0x02
     472:	0e 94 81 03 	call	0x702	; 0x702 <Dio_writePin>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
     476:	e0 e0       	ldi	r30, 0x00	; 0
     478:	1c c0       	rjmp	.+56     	; 0x4b2 <Motor_stop+0x7e>
	{
		if(u8_loopIndex == u8_motorID) /* Skip the current motor */
     47a:	ec 17       	cp	r30, r28
     47c:	c9 f0       	breq	.+50     	; 0x4b0 <Motor_stop+0x7c>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
     47e:	d8 01       	movw	r26, r16
     480:	aa 0f       	add	r26, r26
     482:	bb 1f       	adc	r27, r27
     484:	aa 0f       	add	r26, r26
     486:	bb 1f       	adc	r27, r27
     488:	a0 0f       	add	r26, r16
     48a:	b1 1f       	adc	r27, r17
     48c:	ab 56       	subi	r26, 0x6B	; 107
     48e:	bf 4f       	sbci	r27, 0xFF	; 255
     490:	2c 91       	ld	r18, X
     492:	8e 2f       	mov	r24, r30
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	dc 01       	movw	r26, r24
     498:	aa 0f       	add	r26, r26
     49a:	bb 1f       	adc	r27, r27
     49c:	aa 0f       	add	r26, r26
     49e:	bb 1f       	adc	r27, r27
     4a0:	8a 0f       	add	r24, r26
     4a2:	9b 1f       	adc	r25, r27
     4a4:	dc 01       	movw	r26, r24
     4a6:	ab 56       	subi	r26, 0x6B	; 107
     4a8:	bf 4f       	sbci	r27, 0xFF	; 255
     4aa:	8c 91       	ld	r24, X
     4ac:	28 17       	cp	r18, r24
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <Motor_stop+0x82>
	 * Check if there is another motor that uses the same PWM Channel
	 * If any motor found using the same PWM Channel so we won't stop
	 * the PWM wave to prevent the other motor from stopping
	 * and only stop the enable pins for this motor
	 */
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
     4b0:	ef 5f       	subi	r30, 0xFF	; 255
     4b2:	e2 30       	cpi	r30, 0x02	; 2
     4b4:	10 f3       	brcs	.-60     	; 0x47a <Motor_stop+0x46>
			break;
		}
	}
	
	
	if(u8_loopIndex == MOTORS_USED_NUM)
     4b6:	e2 30       	cpi	r30, 0x02	; 2
     4b8:	69 f4       	brne	.+26     	; 0x4d4 <Motor_stop+0xa0>
	{ /* In case that there isn't any motor using the same PWM Channel --> Stop the PWM */
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
     4ba:	f8 01       	movw	r30, r16
     4bc:	ee 0f       	add	r30, r30
     4be:	ff 1f       	adc	r31, r31
     4c0:	ee 0f       	add	r30, r30
     4c2:	ff 1f       	adc	r31, r31
     4c4:	e0 0f       	add	r30, r16
     4c6:	f1 1f       	adc	r31, r17
     4c8:	eb 56       	subi	r30, 0x6B	; 107
     4ca:	ff 4f       	sbci	r31, 0xFF	; 255
     4cc:	80 81       	ld	r24, Z
     4ce:	0e 94 02 09 	call	0x1204	; 0x1204 <SWPwm_Stop>
     4d2:	12 c0       	rjmp	.+36     	; 0x4f8 <Motor_stop+0xc4>
	}else
	{/* In case that there is another motor using the same PWM Channel */
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED) /* Check if the other motor is not running */
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	e6 55       	subi	r30, 0x56	; 86
     4d8:	ff 4f       	sbci	r31, 0xFF	; 255
     4da:	80 81       	ld	r24, Z
     4dc:	81 11       	cpse	r24, r1
     4de:	0c c0       	rjmp	.+24     	; 0x4f8 <Motor_stop+0xc4>
		{/* In case that the other motor is not running --> Stop the PWM */
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
     4e0:	f8 01       	movw	r30, r16
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	ee 0f       	add	r30, r30
     4e8:	ff 1f       	adc	r31, r31
     4ea:	e0 0f       	add	r30, r16
     4ec:	f1 1f       	adc	r31, r17
     4ee:	eb 56       	subi	r30, 0x6B	; 107
     4f0:	ff 4f       	sbci	r31, 0xFF	; 255
     4f2:	80 81       	ld	r24, Z
     4f4:	0e 94 02 09 	call	0x1204	; 0x1204 <SWPwm_Stop>
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
     4f8:	f8 01       	movw	r30, r16
     4fa:	e6 55       	subi	r30, 0x56	; 86
     4fc:	ff 4f       	sbci	r31, 0xFF	; 255
     4fe:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	01 c0       	rjmp	.+2      	; 0x506 <Motor_stop+0xd2>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
     504:	82 e0       	ldi	r24, 0x02	; 2
		} 
	}
	/* Change the state of this motor to Stopped */
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
     510:	08 95       	ret

00000512 <main>:
#include "App Layer/App.h"

int main(void)
{
	
	CarApp_start();
     512:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <CarApp_start>
     516:	ff cf       	rjmp	.-2      	; 0x516 <main+0x4>

00000518 <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
     518:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
     51a:	89 2b       	or	r24, r25
     51c:	09 f4       	brne	.+2      	; 0x520 <Dio_init+0x8>
     51e:	e9 c0       	rjmp	.+466    	; 0x6f2 <Dio_init+0x1da>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	/*-* check if the Dio is already initialized *-*/
	if (DIO_INITIALIZED == u8_Dio_Status)
     520:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <u8_Dio_Status>
     524:	81 30       	cpi	r24, 0x01	; 1
     526:	09 f4       	brne	.+2      	; 0x52a <Dio_init+0x12>
     528:	e6 c0       	rjmp	.+460    	; 0x6f6 <Dio_init+0x1de>
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	d7 c0       	rjmp	.+430    	; 0x6dc <Dio_init+0x1c4>
/*								Function Implementation								  */
/**************************************************************************************/
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		/* Check if the pin number is out of range */
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
     52e:	e9 2f       	mov	r30, r25
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	ee 0f       	add	r30, r30
     534:	ff 1f       	adc	r31, r31
     536:	ee 0f       	add	r30, r30
     538:	ff 1f       	adc	r31, r31
     53a:	e4 0f       	add	r30, r20
     53c:	f5 1f       	adc	r31, r21
     53e:	31 81       	ldd	r19, Z+1	; 0x01
     540:	38 30       	cpi	r19, 0x08	; 8
     542:	08 f0       	brcs	.+2      	; 0x546 <Dio_init+0x2e>
     544:	da c0       	rjmp	.+436    	; 0x6fa <Dio_init+0x1e2>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
     546:	20 81       	ld	r18, Z
     548:	21 30       	cpi	r18, 0x01	; 1
     54a:	c1 f1       	breq	.+112    	; 0x5bc <Dio_init+0xa4>
     54c:	38 f0       	brcs	.+14     	; 0x55c <Dio_init+0x44>
     54e:	22 30       	cpi	r18, 0x02	; 2
     550:	09 f4       	brne	.+2      	; 0x554 <Dio_init+0x3c>
     552:	64 c0       	rjmp	.+200    	; 0x61c <Dio_init+0x104>
     554:	23 30       	cpi	r18, 0x03	; 3
     556:	09 f4       	brne	.+2      	; 0x55a <Dio_init+0x42>
     558:	91 c0       	rjmp	.+290    	; 0x67c <Dio_init+0x164>
     55a:	d1 c0       	rjmp	.+418    	; 0x6fe <Dio_init+0x1e6>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     55c:	2a b3       	in	r18, 0x1a	; 26
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	db 01       	movw	r26, r22
     564:	02 c0       	rjmp	.+4      	; 0x56a <Dio_init+0x52>
     566:	aa 0f       	add	r26, r26
     568:	bb 1f       	adc	r27, r27
     56a:	3a 95       	dec	r19
     56c:	e2 f7       	brpl	.-8      	; 0x566 <Dio_init+0x4e>
     56e:	8a 2f       	mov	r24, r26
     570:	80 95       	com	r24
     572:	82 23       	and	r24, r18
     574:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     576:	aa b3       	in	r26, 0x1a	; 26
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	28 2f       	mov	r18, r24
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	01 80       	ldd	r0, Z+1	; 0x01
     580:	02 c0       	rjmp	.+4      	; 0x586 <Dio_init+0x6e>
     582:	22 0f       	add	r18, r18
     584:	33 1f       	adc	r19, r19
     586:	0a 94       	dec	r0
     588:	e2 f7       	brpl	.-8      	; 0x582 <Dio_init+0x6a>
     58a:	2a 2b       	or	r18, r26
     58c:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     58e:	8b b3       	in	r24, 0x1b	; 27
     590:	01 80       	ldd	r0, Z+1	; 0x01
     592:	02 c0       	rjmp	.+4      	; 0x598 <Dio_init+0x80>
     594:	66 0f       	add	r22, r22
     596:	77 1f       	adc	r23, r23
     598:	0a 94       	dec	r0
     59a:	e2 f7       	brpl	.-8      	; 0x594 <Dio_init+0x7c>
     59c:	60 95       	com	r22
     59e:	68 23       	and	r22, r24
     5a0:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     5a2:	6b b3       	in	r22, 0x1b	; 27
     5a4:	83 81       	ldd	r24, Z+3	; 0x03
     5a6:	28 2f       	mov	r18, r24
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	01 80       	ldd	r0, Z+1	; 0x01
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <Dio_init+0x9a>
     5ae:	22 0f       	add	r18, r18
     5b0:	33 1f       	adc	r19, r19
     5b2:	0a 94       	dec	r0
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <Dio_init+0x96>
     5b6:	26 2b       	or	r18, r22
     5b8:	2b bb       	out	0x1b, r18	; 27
				break;
     5ba:	8f c0       	rjmp	.+286    	; 0x6da <Dio_init+0x1c2>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     5bc:	27 b3       	in	r18, 0x17	; 23
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	db 01       	movw	r26, r22
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <Dio_init+0xb2>
     5c6:	aa 0f       	add	r26, r26
     5c8:	bb 1f       	adc	r27, r27
     5ca:	3a 95       	dec	r19
     5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <Dio_init+0xae>
     5ce:	8a 2f       	mov	r24, r26
     5d0:	80 95       	com	r24
     5d2:	82 23       	and	r24, r18
     5d4:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     5d6:	a7 b3       	in	r26, 0x17	; 23
     5d8:	82 81       	ldd	r24, Z+2	; 0x02
     5da:	28 2f       	mov	r18, r24
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	01 80       	ldd	r0, Z+1	; 0x01
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <Dio_init+0xce>
     5e2:	22 0f       	add	r18, r18
     5e4:	33 1f       	adc	r19, r19
     5e6:	0a 94       	dec	r0
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <Dio_init+0xca>
     5ea:	2a 2b       	or	r18, r26
     5ec:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     5ee:	88 b3       	in	r24, 0x18	; 24
     5f0:	01 80       	ldd	r0, Z+1	; 0x01
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <Dio_init+0xe0>
     5f4:	66 0f       	add	r22, r22
     5f6:	77 1f       	adc	r23, r23
     5f8:	0a 94       	dec	r0
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <Dio_init+0xdc>
     5fc:	60 95       	com	r22
     5fe:	68 23       	and	r22, r24
     600:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     602:	68 b3       	in	r22, 0x18	; 24
     604:	83 81       	ldd	r24, Z+3	; 0x03
     606:	28 2f       	mov	r18, r24
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	01 80       	ldd	r0, Z+1	; 0x01
     60c:	02 c0       	rjmp	.+4      	; 0x612 <Dio_init+0xfa>
     60e:	22 0f       	add	r18, r18
     610:	33 1f       	adc	r19, r19
     612:	0a 94       	dec	r0
     614:	e2 f7       	brpl	.-8      	; 0x60e <Dio_init+0xf6>
     616:	26 2b       	or	r18, r22
     618:	28 bb       	out	0x18, r18	; 24
				break;
     61a:	5f c0       	rjmp	.+190    	; 0x6da <Dio_init+0x1c2>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     61c:	24 b3       	in	r18, 0x14	; 20
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	db 01       	movw	r26, r22
     624:	02 c0       	rjmp	.+4      	; 0x62a <Dio_init+0x112>
     626:	aa 0f       	add	r26, r26
     628:	bb 1f       	adc	r27, r27
     62a:	3a 95       	dec	r19
     62c:	e2 f7       	brpl	.-8      	; 0x626 <Dio_init+0x10e>
     62e:	8a 2f       	mov	r24, r26
     630:	80 95       	com	r24
     632:	82 23       	and	r24, r18
     634:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     636:	a4 b3       	in	r26, 0x14	; 20
     638:	82 81       	ldd	r24, Z+2	; 0x02
     63a:	28 2f       	mov	r18, r24
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	01 80       	ldd	r0, Z+1	; 0x01
     640:	02 c0       	rjmp	.+4      	; 0x646 <Dio_init+0x12e>
     642:	22 0f       	add	r18, r18
     644:	33 1f       	adc	r19, r19
     646:	0a 94       	dec	r0
     648:	e2 f7       	brpl	.-8      	; 0x642 <Dio_init+0x12a>
     64a:	2a 2b       	or	r18, r26
     64c:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     64e:	85 b3       	in	r24, 0x15	; 21
     650:	01 80       	ldd	r0, Z+1	; 0x01
     652:	02 c0       	rjmp	.+4      	; 0x658 <Dio_init+0x140>
     654:	66 0f       	add	r22, r22
     656:	77 1f       	adc	r23, r23
     658:	0a 94       	dec	r0
     65a:	e2 f7       	brpl	.-8      	; 0x654 <Dio_init+0x13c>
     65c:	60 95       	com	r22
     65e:	68 23       	and	r22, r24
     660:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     662:	65 b3       	in	r22, 0x15	; 21
     664:	83 81       	ldd	r24, Z+3	; 0x03
     666:	28 2f       	mov	r18, r24
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	01 80       	ldd	r0, Z+1	; 0x01
     66c:	02 c0       	rjmp	.+4      	; 0x672 <Dio_init+0x15a>
     66e:	22 0f       	add	r18, r18
     670:	33 1f       	adc	r19, r19
     672:	0a 94       	dec	r0
     674:	e2 f7       	brpl	.-8      	; 0x66e <Dio_init+0x156>
     676:	26 2b       	or	r18, r22
     678:	25 bb       	out	0x15, r18	; 21
				break;
     67a:	2f c0       	rjmp	.+94     	; 0x6da <Dio_init+0x1c2>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     67c:	21 b3       	in	r18, 0x11	; 17
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	db 01       	movw	r26, r22
     684:	02 c0       	rjmp	.+4      	; 0x68a <Dio_init+0x172>
     686:	aa 0f       	add	r26, r26
     688:	bb 1f       	adc	r27, r27
     68a:	3a 95       	dec	r19
     68c:	e2 f7       	brpl	.-8      	; 0x686 <Dio_init+0x16e>
     68e:	8a 2f       	mov	r24, r26
     690:	80 95       	com	r24
     692:	82 23       	and	r24, r18
     694:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     696:	a1 b3       	in	r26, 0x11	; 17
     698:	82 81       	ldd	r24, Z+2	; 0x02
     69a:	28 2f       	mov	r18, r24
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	01 80       	ldd	r0, Z+1	; 0x01
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <Dio_init+0x18e>
     6a2:	22 0f       	add	r18, r18
     6a4:	33 1f       	adc	r19, r19
     6a6:	0a 94       	dec	r0
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <Dio_init+0x18a>
     6aa:	2a 2b       	or	r18, r26
     6ac:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     6ae:	82 b3       	in	r24, 0x12	; 18
     6b0:	01 80       	ldd	r0, Z+1	; 0x01
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <Dio_init+0x1a0>
     6b4:	66 0f       	add	r22, r22
     6b6:	77 1f       	adc	r23, r23
     6b8:	0a 94       	dec	r0
     6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <Dio_init+0x19c>
     6bc:	60 95       	com	r22
     6be:	68 23       	and	r22, r24
     6c0:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     6c2:	62 b3       	in	r22, 0x12	; 18
     6c4:	83 81       	ldd	r24, Z+3	; 0x03
     6c6:	28 2f       	mov	r18, r24
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	01 80       	ldd	r0, Z+1	; 0x01
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <Dio_init+0x1ba>
     6ce:	22 0f       	add	r18, r18
     6d0:	33 1f       	adc	r19, r19
     6d2:	0a 94       	dec	r0
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <Dio_init+0x1b6>
     6d6:	26 2b       	or	r18, r22
     6d8:	22 bb       	out	0x12, r18	; 18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
     6da:	9f 5f       	subi	r25, 0xFF	; 255
     6dc:	9a 30       	cpi	r25, 0x0A	; 10
     6de:	08 f4       	brcc	.+2      	; 0x6e2 <Dio_init+0x1ca>
     6e0:	26 cf       	rjmp	.-436    	; 0x52e <Dio_init+0x16>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
     6e2:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <pstrDio_pinsConfig+0x1>
     6e6:	40 93 ad 00 	sts	0x00AD, r20	; 0x8000ad <pstrDio_pinsConfig>
	/* Change the status of the DIO Module to initialized */
	u8_Dio_Status = DIO_INITIALIZED;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
     6f0:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
     6f2:	85 e0       	ldi	r24, 0x05	; 5
     6f4:	08 95       	ret
	}
	/*-* check if the Dio is already initialized *-*/
	if (DIO_INITIALIZED == u8_Dio_Status)
	{
		return DIO_STATUS_ALREADY_INIT;
     6f6:	87 e0       	ldi	r24, 0x07	; 7
     6f8:	08 95       	ret
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		/* Check if the pin number is out of range */
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
     6fa:	83 e0       	ldi	r24, 0x03	; 3
     6fc:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
     6fe:	84 e0       	ldi	r24, 0x04	; 4
	}
	pstrDio_pinsConfig = pstrDio_pins;
	/* Change the status of the DIO Module to initialized */
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
     700:	08 95       	ret

00000702 <Dio_writePin>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     702:	8b 30       	cpi	r24, 0x0B	; 11
     704:	08 f0       	brcs	.+2      	; 0x708 <Dio_writePin+0x6>
     706:	90 c0       	rjmp	.+288    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     708:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u8_Dio_Status>
     70c:	99 23       	and	r25, r25
     70e:	09 f4       	brne	.+2      	; 0x712 <Dio_writePin+0x10>
     710:	8d c0       	rjmp	.+282    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     712:	e8 2f       	mov	r30, r24
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	cf 01       	movw	r24, r30
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <pstrDio_pinsConfig>
     724:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <pstrDio_pinsConfig+0x1>
     728:	e8 0f       	add	r30, r24
     72a:	f9 1f       	adc	r31, r25
     72c:	80 81       	ld	r24, Z
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	21 f1       	breq	.+72     	; 0x77a <Dio_writePin+0x78>
     732:	30 f0       	brcs	.+12     	; 0x740 <Dio_writePin+0x3e>
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	f1 f1       	breq	.+124    	; 0x7b4 <Dio_writePin+0xb2>
     738:	83 30       	cpi	r24, 0x03	; 3
     73a:	09 f4       	brne	.+2      	; 0x73e <Dio_writePin+0x3c>
     73c:	58 c0       	rjmp	.+176    	; 0x7ee <Dio_writePin+0xec>
     73e:	78 c0       	rjmp	.+240    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
     740:	61 30       	cpi	r22, 0x01	; 1
     742:	69 f4       	brne	.+26     	; 0x75e <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     744:	2b b3       	in	r18, 0x1b	; 27
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	01 80       	ldd	r0, Z+1	; 0x01
     74c:	02 c0       	rjmp	.+4      	; 0x752 <Dio_writePin+0x50>
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	0a 94       	dec	r0
     754:	e2 f7       	brpl	.-8      	; 0x74e <Dio_writePin+0x4c>
     756:	82 2b       	or	r24, r18
     758:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     75e:	2b b3       	in	r18, 0x1b	; 27
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	01 80       	ldd	r0, Z+1	; 0x01
     766:	02 c0       	rjmp	.+4      	; 0x76c <Dio_writePin+0x6a>
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	0a 94       	dec	r0
     76e:	e2 f7       	brpl	.-8      	; 0x768 <Dio_writePin+0x66>
     770:	80 95       	com	r24
     772:	82 23       	and	r24, r18
     774:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
     77a:	61 30       	cpi	r22, 0x01	; 1
     77c:	69 f4       	brne	.+26     	; 0x798 <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     77e:	28 b3       	in	r18, 0x18	; 24
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	01 80       	ldd	r0, Z+1	; 0x01
     786:	02 c0       	rjmp	.+4      	; 0x78c <Dio_writePin+0x8a>
     788:	88 0f       	add	r24, r24
     78a:	99 1f       	adc	r25, r25
     78c:	0a 94       	dec	r0
     78e:	e2 f7       	brpl	.-8      	; 0x788 <Dio_writePin+0x86>
     790:	82 2b       	or	r24, r18
     792:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     798:	28 b3       	in	r18, 0x18	; 24
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	01 80       	ldd	r0, Z+1	; 0x01
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <Dio_writePin+0xa4>
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	0a 94       	dec	r0
     7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <Dio_writePin+0xa0>
     7aa:	80 95       	com	r24
     7ac:	82 23       	and	r24, r18
     7ae:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
     7b4:	61 30       	cpi	r22, 0x01	; 1
     7b6:	69 f4       	brne	.+26     	; 0x7d2 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     7b8:	25 b3       	in	r18, 0x15	; 21
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	01 80       	ldd	r0, Z+1	; 0x01
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <Dio_writePin+0xc4>
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	0a 94       	dec	r0
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <Dio_writePin+0xc0>
     7ca:	82 2b       	or	r24, r18
     7cc:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     7d2:	25 b3       	in	r18, 0x15	; 21
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	01 80       	ldd	r0, Z+1	; 0x01
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <Dio_writePin+0xde>
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	0a 94       	dec	r0
     7e2:	e2 f7       	brpl	.-8      	; 0x7dc <Dio_writePin+0xda>
     7e4:	80 95       	com	r24
     7e6:	82 23       	and	r24, r18
     7e8:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
     7ee:	61 30       	cpi	r22, 0x01	; 1
     7f0:	69 f4       	brne	.+26     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     7f2:	22 b3       	in	r18, 0x12	; 18
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	01 80       	ldd	r0, Z+1	; 0x01
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	0a 94       	dec	r0
     802:	e2 f7       	brpl	.-8      	; 0x7fc <Dio_writePin+0xfa>
     804:	82 2b       	or	r24, r18
     806:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     80c:	22 b3       	in	r18, 0x12	; 18
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	01 80       	ldd	r0, Z+1	; 0x01
     814:	02 c0       	rjmp	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	0a 94       	dec	r0
     81c:	e2 f7       	brpl	.-8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     81e:	80 95       	com	r24
     820:	82 23       	and	r24, r18
     822:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     82c:	86 e0       	ldi	r24, 0x06	; 6
     82e:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     830:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
     832:	08 95       	ret

00000834 <Dio_togglePin>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     834:	8b 30       	cpi	r24, 0x0B	; 11
     836:	08 f0       	brcs	.+2      	; 0x83a <Dio_togglePin+0x6>
     838:	4f c0       	rjmp	.+158    	; 0x8d8 <__stack+0x79>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     83a:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u8_Dio_Status>
     83e:	99 23       	and	r25, r25
     840:	09 f4       	brne	.+2      	; 0x844 <Dio_togglePin+0x10>
     842:	4c c0       	rjmp	.+152    	; 0x8dc <__stack+0x7d>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     844:	e8 2f       	mov	r30, r24
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	cf 01       	movw	r24, r30
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <pstrDio_pinsConfig>
     856:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <pstrDio_pinsConfig+0x1>
     85a:	e8 0f       	add	r30, r24
     85c:	f9 1f       	adc	r31, r25
     85e:	80 81       	ld	r24, Z
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	99 f0       	breq	.+38     	; 0x88a <__stack+0x2b>
     864:	28 f0       	brcs	.+10     	; 0x870 <__stack+0x11>
     866:	82 30       	cpi	r24, 0x02	; 2
     868:	e9 f0       	breq	.+58     	; 0x8a4 <__stack+0x45>
     86a:	83 30       	cpi	r24, 0x03	; 3
     86c:	41 f1       	breq	.+80     	; 0x8be <__stack+0x5f>
     86e:	38 c0       	rjmp	.+112    	; 0x8e0 <__stack+0x81>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     870:	2b b3       	in	r18, 0x1b	; 27
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	01 80       	ldd	r0, Z+1	; 0x01
     878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	0a 94       	dec	r0
     880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
     882:	82 27       	eor	r24, r18
     884:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     886:	81 e0       	ldi	r24, 0x01	; 1
/**************************************************************************************/
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     888:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     88a:	28 b3       	in	r18, 0x18	; 24
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	01 80       	ldd	r0, Z+1	; 0x01
     892:	02 c0       	rjmp	.+4      	; 0x898 <__stack+0x39>
     894:	88 0f       	add	r24, r24
     896:	99 1f       	adc	r25, r25
     898:	0a 94       	dec	r0
     89a:	e2 f7       	brpl	.-8      	; 0x894 <__stack+0x35>
     89c:	82 27       	eor	r24, r18
     89e:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     8a2:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     8a4:	25 b3       	in	r18, 0x15	; 21
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	01 80       	ldd	r0, Z+1	; 0x01
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	88 0f       	add	r24, r24
     8b0:	99 1f       	adc	r25, r25
     8b2:	0a 94       	dec	r0
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <__stack+0x4f>
     8b6:	82 27       	eor	r24, r18
     8b8:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     8bc:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     8be:	22 b3       	in	r18, 0x12	; 18
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	01 80       	ldd	r0, Z+1	; 0x01
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	0a 94       	dec	r0
     8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
     8d0:	82 27       	eor	r24, r18
     8d2:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     8d6:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     8dc:	86 e0       	ldi	r24, 0x06	; 6
     8de:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     8e0:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
     8e2:	08 95       	ret

000008e4 <Dio_readPin>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     8e4:	8b 30       	cpi	r24, 0x0B	; 11
     8e6:	08 f0       	brcs	.+2      	; 0x8ea <Dio_readPin+0x6>
     8e8:	7c c0       	rjmp	.+248    	; 0x9e2 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     8ea:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u8_Dio_Status>
     8ee:	99 23       	and	r25, r25
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <Dio_readPin+0x10>
     8f2:	79 c0       	rjmp	.+242    	; 0x9e6 <Dio_readPin+0x102>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     8f4:	e8 2f       	mov	r30, r24
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	cf 01       	movw	r24, r30
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <pstrDio_pinsConfig>
     906:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <pstrDio_pinsConfig+0x1>
     90a:	e8 0f       	add	r30, r24
     90c:	f9 1f       	adc	r31, r25
     90e:	80 81       	ld	r24, Z
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	f9 f0       	breq	.+62     	; 0x952 <Dio_readPin+0x6e>
     914:	30 f0       	brcs	.+12     	; 0x922 <Dio_readPin+0x3e>
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	a1 f1       	breq	.+104    	; 0x982 <Dio_readPin+0x9e>
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	09 f4       	brne	.+2      	; 0x920 <Dio_readPin+0x3c>
     91e:	49 c0       	rjmp	.+146    	; 0x9b2 <Dio_readPin+0xce>
     920:	64 c0       	rjmp	.+200    	; 0x9ea <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     922:	49 b3       	in	r20, 0x19	; 25
     924:	51 81       	ldd	r21, Z+1	; 0x01
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	9c 01       	movw	r18, r24
     92c:	05 2e       	mov	r0, r21
     92e:	02 c0       	rjmp	.+4      	; 0x934 <Dio_readPin+0x50>
     930:	22 0f       	add	r18, r18
     932:	33 1f       	adc	r19, r19
     934:	0a 94       	dec	r0
     936:	e2 f7       	brpl	.-8      	; 0x930 <Dio_readPin+0x4c>
     938:	84 2f       	mov	r24, r20
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	82 23       	and	r24, r18
     93e:	93 23       	and	r25, r19
     940:	02 c0       	rjmp	.+4      	; 0x946 <Dio_readPin+0x62>
     942:	95 95       	asr	r25
     944:	87 95       	ror	r24
     946:	5a 95       	dec	r21
     948:	e2 f7       	brpl	.-8      	; 0x942 <Dio_readPin+0x5e>
     94a:	fb 01       	movw	r30, r22
     94c:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     94e:	81 e0       	ldi	r24, 0x01	; 1
/**************************************************************************************/
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     950:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     952:	46 b3       	in	r20, 0x16	; 22
     954:	51 81       	ldd	r21, Z+1	; 0x01
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	9c 01       	movw	r18, r24
     95c:	05 2e       	mov	r0, r21
     95e:	02 c0       	rjmp	.+4      	; 0x964 <Dio_readPin+0x80>
     960:	22 0f       	add	r18, r18
     962:	33 1f       	adc	r19, r19
     964:	0a 94       	dec	r0
     966:	e2 f7       	brpl	.-8      	; 0x960 <Dio_readPin+0x7c>
     968:	84 2f       	mov	r24, r20
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	82 23       	and	r24, r18
     96e:	93 23       	and	r25, r19
     970:	02 c0       	rjmp	.+4      	; 0x976 <Dio_readPin+0x92>
     972:	95 95       	asr	r25
     974:	87 95       	ror	r24
     976:	5a 95       	dec	r21
     978:	e2 f7       	brpl	.-8      	; 0x972 <Dio_readPin+0x8e>
     97a:	fb 01       	movw	r30, r22
     97c:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     97e:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     980:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     982:	43 b3       	in	r20, 0x13	; 19
     984:	51 81       	ldd	r21, Z+1	; 0x01
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	9c 01       	movw	r18, r24
     98c:	05 2e       	mov	r0, r21
     98e:	02 c0       	rjmp	.+4      	; 0x994 <Dio_readPin+0xb0>
     990:	22 0f       	add	r18, r18
     992:	33 1f       	adc	r19, r19
     994:	0a 94       	dec	r0
     996:	e2 f7       	brpl	.-8      	; 0x990 <Dio_readPin+0xac>
     998:	84 2f       	mov	r24, r20
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	82 23       	and	r24, r18
     99e:	93 23       	and	r25, r19
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <Dio_readPin+0xc2>
     9a2:	95 95       	asr	r25
     9a4:	87 95       	ror	r24
     9a6:	5a 95       	dec	r21
     9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <Dio_readPin+0xbe>
     9aa:	fb 01       	movw	r30, r22
     9ac:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     9b0:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     9b2:	40 b3       	in	r20, 0x10	; 16
     9b4:	51 81       	ldd	r21, Z+1	; 0x01
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	9c 01       	movw	r18, r24
     9bc:	05 2e       	mov	r0, r21
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <Dio_readPin+0xe0>
     9c0:	22 0f       	add	r18, r18
     9c2:	33 1f       	adc	r19, r19
     9c4:	0a 94       	dec	r0
     9c6:	e2 f7       	brpl	.-8      	; 0x9c0 <Dio_readPin+0xdc>
     9c8:	84 2f       	mov	r24, r20
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	82 23       	and	r24, r18
     9ce:	93 23       	and	r25, r19
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <Dio_readPin+0xf2>
     9d2:	95 95       	asr	r25
     9d4:	87 95       	ror	r24
     9d6:	5a 95       	dec	r21
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <Dio_readPin+0xee>
     9da:	fb 01       	movw	r30, r22
     9dc:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     9de:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     9e0:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     9e6:	86 e0       	ldi	r24, 0x06	; 6
     9e8:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     9ea:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
     9ec:	08 95       	ret

000009ee <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e c0       	rjmp	.+28     	; 0xa0e <Gpt_ISRHandler+0x20>
     9f2:	29 2f       	mov	r18, r25
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	f9 01       	movw	r30, r18
     9f8:	ee 0f       	add	r30, r30
     9fa:	ff 1f       	adc	r31, r31
     9fc:	2e 0f       	add	r18, r30
     9fe:	3f 1f       	adc	r19, r31
     a00:	f9 01       	movw	r30, r18
     a02:	e1 56       	subi	r30, 0x61	; 97
     a04:	ff 4f       	sbci	r31, 0xFF	; 255
     a06:	20 81       	ld	r18, Z
     a08:	28 17       	cp	r18, r24
     a0a:	19 f0       	breq	.+6      	; 0xa12 <Gpt_ISRHandler+0x24>
     a0c:	9f 5f       	subi	r25, 0xFF	; 255
     a0e:	99 23       	and	r25, r25
     a10:	81 f3       	breq	.-32     	; 0x9f2 <Gpt_ISRHandler+0x4>
     a12:	89 2f       	mov	r24, r25
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	fc 01       	movw	r30, r24
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	e0 55       	subi	r30, 0x50	; 80
     a22:	ff 4f       	sbci	r31, 0xFF	; 255
     a24:	40 81       	ld	r20, Z
     a26:	51 81       	ldd	r21, Z+1	; 0x01
     a28:	62 81       	ldd	r22, Z+2	; 0x02
     a2a:	73 81       	ldd	r23, Z+3	; 0x03
     a2c:	41 15       	cp	r20, r1
     a2e:	51 05       	cpc	r21, r1
     a30:	61 05       	cpc	r22, r1
     a32:	71 05       	cpc	r23, r1
     a34:	81 f0       	breq	.+32     	; 0xa56 <Gpt_ISRHandler+0x68>
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	88 0f       	add	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	fc 01       	movw	r30, r24
     a40:	e0 55       	subi	r30, 0x50	; 80
     a42:	ff 4f       	sbci	r31, 0xFF	; 255
     a44:	41 50       	subi	r20, 0x01	; 1
     a46:	51 09       	sbc	r21, r1
     a48:	61 09       	sbc	r22, r1
     a4a:	71 09       	sbc	r23, r1
     a4c:	40 83       	st	Z, r20
     a4e:	51 83       	std	Z+1, r21	; 0x01
     a50:	62 83       	std	Z+2, r22	; 0x02
     a52:	73 83       	std	Z+3, r23	; 0x03
     a54:	08 95       	ret
     a56:	23 b7       	in	r18, 0x33	; 51
     a58:	2e 7f       	andi	r18, 0xFE	; 254
     a5a:	23 bf       	out	0x33, r18	; 51
     a5c:	23 b7       	in	r18, 0x33	; 51
     a5e:	2d 7f       	andi	r18, 0xFD	; 253
     a60:	23 bf       	out	0x33, r18	; 51
     a62:	23 b7       	in	r18, 0x33	; 51
     a64:	2b 7f       	andi	r18, 0xFB	; 251
     a66:	23 bf       	out	0x33, r18	; 51
     a68:	29 b7       	in	r18, 0x39	; 57
     a6a:	2e 7f       	andi	r18, 0xFE	; 254
     a6c:	29 bf       	out	0x39, r18	; 57
     a6e:	fc 01       	movw	r30, r24
     a70:	ec 54       	subi	r30, 0x4C	; 76
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	24 e0       	ldi	r18, 0x04	; 4
     a76:	20 83       	st	Z, r18
     a78:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <Gpt_Timer0_CallBackPtr>
     a7c:	f0 91 b6 00 	lds	r31, 0x00B6	; 0x8000b6 <Gpt_Timer0_CallBackPtr+0x1>
     a80:	09 95       	icall
     a82:	08 95       	ret

00000a84 <GptInit>:
     a84:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <genu_GPTModStatus>
     a88:	81 30       	cpi	r24, 0x01	; 1
     a8a:	61 f1       	breq	.+88     	; 0xae4 <GptInit+0x60>
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	24 c0       	rjmp	.+72     	; 0xad8 <GptInit+0x54>
     a90:	82 2f       	mov	r24, r18
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	fc 01       	movw	r30, r24
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	e8 0f       	add	r30, r24
     a9c:	f9 1f       	adc	r31, r25
     a9e:	e1 56       	subi	r30, 0x61	; 97
     aa0:	ff 4f       	sbci	r31, 0xFF	; 255
     aa2:	30 81       	ld	r19, Z
     aa4:	33 23       	and	r19, r19
     aa6:	19 f0       	breq	.+6      	; 0xaae <GptInit+0x2a>
     aa8:	33 30       	cpi	r19, 0x03	; 3
     aaa:	f0 f4       	brcc	.+60     	; 0xae8 <GptInit+0x64>
     aac:	0f c0       	rjmp	.+30     	; 0xacc <GptInit+0x48>
     aae:	fc 01       	movw	r30, r24
     ab0:	ee 0f       	add	r30, r30
     ab2:	ff 1f       	adc	r31, r31
     ab4:	e8 0f       	add	r30, r24
     ab6:	f9 1f       	adc	r31, r25
     ab8:	e1 56       	subi	r30, 0x61	; 97
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	32 81       	ldd	r19, Z+2	; 0x02
     abe:	31 11       	cpse	r19, r1
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <GptInit+0x48>
     ac2:	13 be       	out	0x33, r1	; 51
     ac4:	39 b7       	in	r19, 0x39	; 57
     ac6:	3c 7f       	andi	r19, 0xFC	; 252
     ac8:	39 bf       	out	0x39, r19	; 57
     aca:	12 be       	out	0x32, r1	; 50
     acc:	fc 01       	movw	r30, r24
     ace:	ec 54       	subi	r30, 0x4C	; 76
     ad0:	ff 4f       	sbci	r31, 0xFF	; 255
     ad2:	31 e0       	ldi	r19, 0x01	; 1
     ad4:	30 83       	st	Z, r19
     ad6:	2f 5f       	subi	r18, 0xFF	; 255
     ad8:	22 23       	and	r18, r18
     ada:	d1 f2       	breq	.-76     	; 0xa90 <GptInit+0xc>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <genu_GPTModStatus>
     ae2:	08 95       	ret
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	08 95       	ret
     ae8:	85 e0       	ldi	r24, 0x05	; 5
     aea:	08 95       	ret

00000aec <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
     af6:	81 11       	cpse	r24, r1
     af8:	4a c0       	rjmp	.+148    	; 0xb8e <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
     afa:	c8 2f       	mov	r28, r24
     afc:	d0 e0       	ldi	r29, 0x00	; 0
     afe:	fe 01       	movw	r30, r28
     b00:	ec 54       	subi	r30, 0x4C	; 76
     b02:	ff 4f       	sbci	r31, 0xFF	; 255
     b04:	80 81       	ld	r24, Z
     b06:	88 23       	and	r24, r24
     b08:	09 f4       	brne	.+2      	; 0xb0c <GptStart_aSync+0x20>
     b0a:	43 c0       	rjmp	.+134    	; 0xb92 <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
     b0c:	82 30       	cpi	r24, 0x02	; 2
     b0e:	09 f4       	brne	.+2      	; 0xb12 <GptStart_aSync+0x26>
     b10:	42 c0       	rjmp	.+132    	; 0xb96 <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	fe 01       	movw	r30, r28
     b16:	ec 54       	subi	r30, 0x4C	; 76
     b18:	ff 4f       	sbci	r31, 0xFF	; 255
     b1a:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
     b1c:	fe 01       	movw	r30, r28
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	ec 0f       	add	r30, r28
     b24:	fd 1f       	adc	r31, r29
     b26:	e1 56       	subi	r30, 0x61	; 97
     b28:	ff 4f       	sbci	r31, 0xFF	; 255
     b2a:	80 81       	ld	r24, Z
     b2c:	88 23       	and	r24, r24
     b2e:	21 f0       	breq	.+8      	; 0xb38 <GptStart_aSync+0x4c>
     b30:	83 30       	cpi	r24, 0x03	; 3
     b32:	98 f1       	brcs	.+102    	; 0xb9a <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
     b34:	85 e0       	ldi	r24, 0x05	; 5
     b36:	34 c0       	rjmp	.+104    	; 0xba0 <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
     b38:	cb 01       	movw	r24, r22
     b3a:	ba 01       	movw	r22, r20
     b3c:	2f ef       	ldi	r18, 0xFF	; 255
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <__udivmodsi4>
     b48:	fe 01       	movw	r30, r28
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	e0 55       	subi	r30, 0x50	; 80
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	20 83       	st	Z, r18
     b58:	31 83       	std	Z+1, r19	; 0x01
     b5a:	42 83       	std	Z+2, r20	; 0x02
     b5c:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
     b5e:	26 2f       	mov	r18, r22
     b60:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
     b62:	89 b7       	in	r24, 0x39	; 57
     b64:	81 60       	ori	r24, 0x01	; 1
     b66:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
     b68:	10 93 b6 00 	sts	0x00B6, r17	; 0x8000b6 <Gpt_Timer0_CallBackPtr+0x1>
     b6c:	00 93 b5 00 	sts	0x00B5, r16	; 0x8000b5 <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
     b70:	ce 01       	movw	r24, r28
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	c8 0f       	add	r28, r24
     b78:	d9 1f       	adc	r29, r25
     b7a:	c1 56       	subi	r28, 0x61	; 97
     b7c:	df 4f       	sbci	r29, 0xFF	; 255
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
     b82:	23 2b       	or	r18, r19
     b84:	61 f0       	breq	.+24     	; 0xb9e <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
     b86:	61 95       	neg	r22
     b88:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
     b8e:	86 e0       	ldi	r24, 0x06	; 6
     b90:	07 c0       	rjmp	.+14     	; 0xba0 <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
     b96:	87 e0       	ldi	r24, 0x07	; 7
     b98:	03 c0       	rjmp	.+6      	; 0xba0 <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	01 c0       	rjmp	.+2      	; 0xba0 <GptStart_aSync+0xb4>
     b9e:	81 e0       	ldi	r24, 0x01	; 1
}
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
     baa:	81 11       	cpse	r24, r1
     bac:	23 c0       	rjmp	.+70     	; 0xbf4 <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	fc 01       	movw	r30, r24
     bb2:	ec 54       	subi	r30, 0x4C	; 76
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	20 81       	ld	r18, Z
     bb8:	22 23       	and	r18, r18
     bba:	f1 f0       	breq	.+60     	; 0xbf8 <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
     bbc:	22 30       	cpi	r18, 0x02	; 2
     bbe:	f1 f4       	brne	.+60     	; 0xbfc <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
     bc0:	fc 01       	movw	r30, r24
     bc2:	ee 0f       	add	r30, r30
     bc4:	ff 1f       	adc	r31, r31
     bc6:	e8 0f       	add	r30, r24
     bc8:	f9 1f       	adc	r31, r25
     bca:	e1 56       	subi	r30, 0x61	; 97
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	20 81       	ld	r18, Z
     bd0:	22 23       	and	r18, r18
     bd2:	19 f0       	breq	.+6      	; 0xbda <GptStop+0x30>
     bd4:	23 30       	cpi	r18, 0x03	; 3
     bd6:	a0 f4       	brcc	.+40     	; 0xc00 <GptStop+0x56>
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
     bda:	23 b7       	in	r18, 0x33	; 51
     bdc:	28 7f       	andi	r18, 0xF8	; 248
     bde:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
     be0:	29 b7       	in	r18, 0x39	; 57
     be2:	2c 7f       	andi	r18, 0xFC	; 252
     be4:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
     be6:	fc 01       	movw	r30, r24
     be8:	ec 54       	subi	r30, 0x4C	; 76
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	23 e0       	ldi	r18, 0x03	; 3
     bee:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
     bf4:	86 e0       	ldi	r24, 0x06	; 6
     bf6:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
     bfc:	88 e0       	ldi	r24, 0x08	; 8
     bfe:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
     c00:	85 e0       	ldi	r24, 0x05	; 5
	}
	/* Change the state of the Timer Channel to stopped */
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
     c02:	08 95       	ret

00000c04 <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	11 24       	eor	r1, r1
     c0e:	2f 93       	push	r18
     c10:	3f 93       	push	r19
     c12:	4f 93       	push	r20
     c14:	5f 93       	push	r21
     c16:	6f 93       	push	r22
     c18:	7f 93       	push	r23
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
     c1e:	af 93       	push	r26
     c20:	bf 93       	push	r27
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Gpt_ISRHandler>
     c2c:	ff 91       	pop	r31
     c2e:	ef 91       	pop	r30
     c30:	bf 91       	pop	r27
     c32:	af 91       	pop	r26
     c34:	9f 91       	pop	r25
     c36:	8f 91       	pop	r24
     c38:	7f 91       	pop	r23
     c3a:	6f 91       	pop	r22
     c3c:	5f 91       	pop	r21
     c3e:	4f 91       	pop	r20
     c40:	3f 91       	pop	r19
     c42:	2f 91       	pop	r18
     c44:	0f 90       	pop	r0
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	0f 90       	pop	r0
     c4a:	1f 90       	pop	r1
     c4c:	18 95       	reti

00000c4e <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
     c4e:	1f 92       	push	r1
     c50:	0f 92       	push	r0
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	0f 92       	push	r0
     c56:	11 24       	eor	r1, r1
     c58:	2f 93       	push	r18
     c5a:	3f 93       	push	r19
     c5c:	4f 93       	push	r20
     c5e:	5f 93       	push	r21
     c60:	6f 93       	push	r22
     c62:	7f 93       	push	r23
     c64:	8f 93       	push	r24
     c66:	9f 93       	push	r25
     c68:	af 93       	push	r26
     c6a:	bf 93       	push	r27
     c6c:	ef 93       	push	r30
     c6e:	ff 93       	push	r31
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Gpt_ISRHandler>
     c76:	ff 91       	pop	r31
     c78:	ef 91       	pop	r30
     c7a:	bf 91       	pop	r27
     c7c:	af 91       	pop	r26
     c7e:	9f 91       	pop	r25
     c80:	8f 91       	pop	r24
     c82:	7f 91       	pop	r23
     c84:	6f 91       	pop	r22
     c86:	5f 91       	pop	r21
     c88:	4f 91       	pop	r20
     c8a:	3f 91       	pop	r19
     c8c:	2f 91       	pop	r18
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	0f 90       	pop	r0
     c94:	1f 90       	pop	r1
     c96:	18 95       	reti

00000c98 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     c98:	1f 92       	push	r1
     c9a:	0f 92       	push	r0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	0f 92       	push	r0
     ca0:	11 24       	eor	r1, r1
     ca2:	2f 93       	push	r18
     ca4:	3f 93       	push	r19
     ca6:	4f 93       	push	r20
     ca8:	5f 93       	push	r21
     caa:	6f 93       	push	r22
     cac:	7f 93       	push	r23
     cae:	8f 93       	push	r24
     cb0:	9f 93       	push	r25
     cb2:	af 93       	push	r26
     cb4:	bf 93       	push	r27
     cb6:	ef 93       	push	r30
     cb8:	ff 93       	push	r31
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Gpt_ISRHandler>
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	0f 90       	pop	r0
     cde:	1f 90       	pop	r1
     ce0:	18 95       	reti

00000ce2 <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	2f 93       	push	r18
     cee:	3f 93       	push	r19
     cf0:	4f 93       	push	r20
     cf2:	5f 93       	push	r21
     cf4:	6f 93       	push	r22
     cf6:	7f 93       	push	r23
     cf8:	8f 93       	push	r24
     cfa:	9f 93       	push	r25
     cfc:	af 93       	push	r26
     cfe:	bf 93       	push	r27
     d00:	ef 93       	push	r30
     d02:	ff 93       	push	r31
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Gpt_ISRHandler>
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     d2c:	1f 92       	push	r1
     d2e:	0f 92       	push	r0
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	0f 92       	push	r0
     d34:	11 24       	eor	r1, r1
     d36:	2f 93       	push	r18
     d38:	3f 93       	push	r19
     d3a:	4f 93       	push	r20
     d3c:	5f 93       	push	r21
     d3e:	6f 93       	push	r22
     d40:	7f 93       	push	r23
     d42:	8f 93       	push	r24
     d44:	9f 93       	push	r25
     d46:	af 93       	push	r26
     d48:	bf 93       	push	r27
     d4a:	ef 93       	push	r30
     d4c:	ff 93       	push	r31
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Gpt_ISRHandler>
     d54:	ff 91       	pop	r31
     d56:	ef 91       	pop	r30
     d58:	bf 91       	pop	r27
     d5a:	af 91       	pop	r26
     d5c:	9f 91       	pop	r25
     d5e:	8f 91       	pop	r24
     d60:	7f 91       	pop	r23
     d62:	6f 91       	pop	r22
     d64:	5f 91       	pop	r21
     d66:	4f 91       	pop	r20
     d68:	3f 91       	pop	r19
     d6a:	2f 91       	pop	r18
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	0f 90       	pop	r0
     d72:	1f 90       	pop	r1
     d74:	18 95       	reti

00000d76 <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	2f 93       	push	r18
     d82:	3f 93       	push	r19
     d84:	4f 93       	push	r20
     d86:	5f 93       	push	r21
     d88:	6f 93       	push	r22
     d8a:	7f 93       	push	r23
     d8c:	8f 93       	push	r24
     d8e:	9f 93       	push	r25
     d90:	af 93       	push	r26
     d92:	bf 93       	push	r27
     d94:	ef 93       	push	r30
     d96:	ff 93       	push	r31
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Gpt_ISRHandler>
     d9e:	ff 91       	pop	r31
     da0:	ef 91       	pop	r30
     da2:	bf 91       	pop	r27
     da4:	af 91       	pop	r26
     da6:	9f 91       	pop	r25
     da8:	8f 91       	pop	r24
     daa:	7f 91       	pop	r23
     dac:	6f 91       	pop	r22
     dae:	5f 91       	pop	r21
     db0:	4f 91       	pop	r20
     db2:	3f 91       	pop	r19
     db4:	2f 91       	pop	r18
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	0f 90       	pop	r0
     dbc:	1f 90       	pop	r1
     dbe:	18 95       	reti

00000dc0 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
     de2:	82 e0       	ldi	r24, 0x02	; 2
     de4:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Gpt_ISRHandler>
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <Gpt_ISRHandler>
     e32:	ff 91       	pop	r31
     e34:	ef 91       	pop	r30
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	7f 91       	pop	r23
     e40:	6f 91       	pop	r22
     e42:	5f 91       	pop	r21
     e44:	4f 91       	pop	r20
     e46:	3f 91       	pop	r19
     e48:	2f 91       	pop	r18
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
	/* Toggle the Pin of the PWM Channel */
	if(Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID) != DIO_STATUS_ERROR_OK)
     e58:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <gu8_currentPwmChannel>
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	ee 0f       	add	r30, r30
     e60:	ff 1f       	adc	r31, r31
     e62:	ee 55       	subi	r30, 0x5E	; 94
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	80 81       	ld	r24, Z
     e68:	0e 94 1a 04 	call	0x834	; 0x834 <Dio_togglePin>
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	09 f0       	breq	.+2      	; 0xe72 <waveFunction+0x1e>
     e70:	76 c0       	rjmp	.+236    	; 0xf5e <waveFunction+0x10a>
		return;
	/* Check if the PWM Channel is still in Running State */
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
     e72:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <gu8_currentPwmChannel>
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	9c 01       	movw	r18, r24
     e7a:	22 0f       	add	r18, r18
     e7c:	33 1f       	adc	r19, r19
     e7e:	f9 01       	movw	r30, r18
     e80:	ee 0f       	add	r30, r30
     e82:	ff 1f       	adc	r31, r31
     e84:	ee 0f       	add	r30, r30
     e86:	ff 1f       	adc	r31, r31
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	e2 1b       	sub	r30, r18
     e8e:	f3 0b       	sbc	r31, r19
     e90:	e7 54       	subi	r30, 0x47	; 71
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	25 85       	ldd	r18, Z+13	; 0x0d
     e96:	22 30       	cpi	r18, 0x02	; 2
     e98:	09 f0       	breq	.+2      	; 0xe9c <waveFunction+0x48>
     e9a:	61 c0       	rjmp	.+194    	; 0xf5e <waveFunction+0x10a>
	{
		/* Start the Timer again with the new ticks assigned */
		if(GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID,\
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	fc 01       	movw	r30, r24
     ea2:	ee 0f       	add	r30, r30
     ea4:	ff 1f       	adc	r31, r31
     ea6:	ee 0f       	add	r30, r30
     ea8:	ff 1f       	adc	r31, r31
     eaa:	ee 0f       	add	r30, r30
     eac:	ff 1f       	adc	r31, r31
     eae:	e8 1b       	sub	r30, r24
     eb0:	f9 0b       	sbc	r31, r25
     eb2:	e7 54       	subi	r30, 0x47	; 71
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	41 85       	ldd	r20, Z+9	; 0x09
     eb8:	52 85       	ldd	r21, Z+10	; 0x0a
     eba:	63 85       	ldd	r22, Z+11	; 0x0b
     ebc:	74 85       	ldd	r23, Z+12	; 0x0c
     ebe:	fc 01       	movw	r30, r24
     ec0:	ee 55       	subi	r30, 0x5E	; 94
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	2a e2       	ldi	r18, 0x2A	; 42
     ec6:	37 e0       	ldi	r19, 0x07	; 7
     ec8:	81 81       	ldd	r24, Z+1	; 0x01
     eca:	0e 94 76 05 	call	0xaec	; 0xaec <GptStart_aSync>
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	09 f0       	breq	.+2      	; 0xed4 <waveFunction+0x80>
     ed2:	45 c0       	rjmp	.+138    	; 0xf5e <waveFunction+0x10a>
		                  gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks,\
						   waveFunction) != GPT_STATUS_ERROR_OK)	return;
		
		/* Replace the next ticks to be counted between ONTicks and OFFTicks*/
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
     ed4:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <gu8_currentPwmChannel>
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9c 01       	movw	r18, r24
     edc:	22 0f       	add	r18, r18
     ede:	33 1f       	adc	r19, r19
     ee0:	f9 01       	movw	r30, r18
     ee2:	ee 0f       	add	r30, r30
     ee4:	ff 1f       	adc	r31, r31
     ee6:	ee 0f       	add	r30, r30
     ee8:	ff 1f       	adc	r31, r31
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	e2 1b       	sub	r30, r18
     ef0:	f3 0b       	sbc	r31, r19
     ef2:	e7 54       	subi	r30, 0x47	; 71
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	01 85       	ldd	r16, Z+9	; 0x09
     ef8:	12 85       	ldd	r17, Z+10	; 0x0a
     efa:	23 85       	ldd	r18, Z+11	; 0x0b
     efc:	34 85       	ldd	r19, Z+12	; 0x0c
     efe:	45 81       	ldd	r20, Z+5	; 0x05
     f00:	56 81       	ldd	r21, Z+6	; 0x06
     f02:	67 81       	ldd	r22, Z+7	; 0x07
     f04:	70 85       	ldd	r23, Z+8	; 0x08
     f06:	04 17       	cp	r16, r20
     f08:	15 07       	cpc	r17, r21
     f0a:	26 07       	cpc	r18, r22
     f0c:	37 07       	cpc	r19, r23
     f0e:	b1 f4       	brne	.+44     	; 0xf3c <waveFunction+0xe8>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	fc 01       	movw	r30, r24
     f16:	ee 0f       	add	r30, r30
     f18:	ff 1f       	adc	r31, r31
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	e8 1b       	sub	r30, r24
     f24:	f9 0b       	sbc	r31, r25
     f26:	e7 54       	subi	r30, 0x47	; 71
     f28:	ff 4f       	sbci	r31, 0xFF	; 255
     f2a:	81 81       	ldd	r24, Z+1	; 0x01
     f2c:	92 81       	ldd	r25, Z+2	; 0x02
     f2e:	a3 81       	ldd	r26, Z+3	; 0x03
     f30:	b4 81       	ldd	r27, Z+4	; 0x04
     f32:	81 87       	std	Z+9, r24	; 0x09
     f34:	92 87       	std	Z+10, r25	; 0x0a
     f36:	a3 87       	std	Z+11, r26	; 0x0b
     f38:	b4 87       	std	Z+12, r27	; 0x0c
     f3a:	11 c0       	rjmp	.+34     	; 0xf5e <waveFunction+0x10a>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	fc 01       	movw	r30, r24
     f42:	ee 0f       	add	r30, r30
     f44:	ff 1f       	adc	r31, r31
     f46:	ee 0f       	add	r30, r30
     f48:	ff 1f       	adc	r31, r31
     f4a:	ee 0f       	add	r30, r30
     f4c:	ff 1f       	adc	r31, r31
     f4e:	e8 1b       	sub	r30, r24
     f50:	f9 0b       	sbc	r31, r25
     f52:	e7 54       	subi	r30, 0x47	; 71
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	41 87       	std	Z+9, r20	; 0x09
     f58:	52 87       	std	Z+10, r21	; 0x0a
     f5a:	63 87       	std	Z+11, r22	; 0x0b
     f5c:	74 87       	std	Z+12, r23	; 0x0c
	}
}
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	08 95       	ret

00000f64 <SWPwm_Init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
     f64:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <genu_SWPwmModStatus>
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	91 f0       	breq	.+36     	; 0xf90 <SWPwm_Init+0x2c>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
     f6c:	0e 94 42 05 	call	0xa84	; 0xa84 <GptInit>
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	11 f0       	breq	.+4      	; 0xf78 <SWPwm_Init+0x14>
     f74:	83 30       	cpi	r24, 0x03	; 3
     f76:	71 f4       	brne	.+28     	; 0xf94 <SWPwm_Init+0x30>
		return SWPWM_STATUS_ERROR_NOK;
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
     f78:	88 e6       	ldi	r24, 0x68	; 104
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 8c 02 	call	0x518	; 0x518 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	11 f0       	breq	.+4      	; 0xf88 <SWPwm_Init+0x24>
     f84:	87 30       	cpi	r24, 0x07	; 7
     f86:	41 f4       	brne	.+16     	; 0xf98 <SWPwm_Init+0x34>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <genu_SWPwmModStatus>
	return SWPWM_STATUS_ERROR_OK;
     f8e:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPWM Module was already initialized */
	if(genu_SWPwmModStatus == SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_ERROR_NOK;
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the GPT Module and check if any error returned */
	enuGpt_Status_t Gpt_State = GptInit();
	if((Gpt_State != GPT_STATUS_ERROR_OK) && (Gpt_State != GPT_STATUS_ERROR_ALREADY_INIT)) //GPT_STATUS_ERROR_ALREADY_INIT
		return SWPWM_STATUS_ERROR_NOK;
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	08 95       	ret
		
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return SWPWM_STATUS_ERROR_NOK;
     f98:	80 e0       	ldi	r24, 0x00	; 0
	
	/* Change the state of the SWPWM Module to Initialized */
	genu_SWPwmModStatus = SWPWM_INITIALIZED;
	return SWPWM_STATUS_ERROR_OK;
}
     f9a:	08 95       	ret

00000f9c <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
     f9c:	4f 92       	push	r4
     f9e:	5f 92       	push	r5
     fa0:	6f 92       	push	r6
     fa2:	7f 92       	push	r7
     fa4:	8f 92       	push	r8
     fa6:	9f 92       	push	r9
     fa8:	af 92       	push	r10
     faa:	bf 92       	push	r11
     fac:	cf 92       	push	r12
     fae:	df 92       	push	r13
     fb0:	ef 92       	push	r14
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	00 d0       	rcall	.+0      	; 0xfbe <SWPwm_Start+0x22>
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <SWPwm_Start+0x24>
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <SWPwm_Start+0x26>
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
     fc6:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <genu_SWPwmModStatus>
     fca:	91 30       	cpi	r25, 0x01	; 1
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <SWPwm_Start+0x34>
     fce:	f2 c0       	rjmp	.+484    	; 0x11b4 <SWPwm_Start+0x218>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
     fd0:	81 11       	cpse	r24, r1
     fd2:	f2 c0       	rjmp	.+484    	; 0x11b8 <SWPwm_Start+0x21c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
     fd4:	25 36       	cpi	r18, 0x65	; 101
     fd6:	08 f0       	brcs	.+2      	; 0xfda <SWPwm_Start+0x3e>
     fd8:	f1 c0       	rjmp	.+482    	; 0x11bc <SWPwm_Start+0x220>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
     fda:	e8 2f       	mov	r30, r24
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	fe 83       	std	Y+6, r31	; 0x06
     fe0:	ed 83       	std	Y+5, r30	; 0x05
     fe2:	df 01       	movw	r26, r30
     fe4:	aa 0f       	add	r26, r26
     fe6:	bb 1f       	adc	r27, r27
     fe8:	fd 01       	movw	r30, r26
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	ee 0f       	add	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	ee 0f       	add	r30, r30
     ff4:	ff 1f       	adc	r31, r31
     ff6:	ea 1b       	sub	r30, r26
     ff8:	fb 0b       	sbc	r31, r27
     ffa:	e7 54       	subi	r30, 0x47	; 71
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	95 85       	ldd	r25, Z+13	; 0x0d
    1000:	92 30       	cpi	r25, 0x02	; 2
    1002:	09 f4       	brne	.+2      	; 0x1006 <SWPwm_Start+0x6a>
    1004:	dd c0       	rjmp	.+442    	; 0x11c0 <SWPwm_Start+0x224>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
    1006:	22 23       	and	r18, r18
    1008:	09 f4       	brne	.+2      	; 0x100c <SWPwm_Start+0x70>
    100a:	dc c0       	rjmp	.+440    	; 0x11c4 <SWPwm_Start+0x228>
    100c:	12 2f       	mov	r17, r18
    100e:	c8 2e       	mov	r12, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
    1010:	24 36       	cpi	r18, 0x64	; 100
    1012:	61 f4       	brne	.+24     	; 0x102c <SWPwm_Start+0x90>
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    1014:	fd 01       	movw	r30, r26
    1016:	ee 55       	subi	r30, 0x5E	; 94
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	80 81       	ld	r24, Z
    101e:	0e 94 81 03 	call	0x702	; 0x702 <Dio_writePin>
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	09 f4       	brne	.+2      	; 0x1028 <SWPwm_Start+0x8c>
    1026:	d0 c0       	rjmp	.+416    	; 0x11c8 <SWPwm_Start+0x22c>
			return SWPWM_STATUS_ERROR_NOK;
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	d5 c0       	rjmp	.+426    	; 0x11d6 <SWPwm_Start+0x23a>
		return SWPWM_STATUS_ERROR_OK;
	}
	
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;					/* The Periodic Time for the Generated Pulse in Seconds */
    102c:	cb 01       	movw	r24, r22
    102e:	ba 01       	movw	r22, r20
    1030:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__floatunsisf>
    1034:	9b 01       	movw	r18, r22
    1036:	ac 01       	movw	r20, r24
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	80 e8       	ldi	r24, 0x80	; 128
    103e:	9f e3       	ldi	r25, 0x3F	; 63
    1040:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divsf3>
    1044:	4b 01       	movw	r8, r22
    1046:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;		/* The HIGH Level Time in Seconds */
    1048:	61 2f       	mov	r22, r17
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <__floatsisf>
    1054:	a5 01       	movw	r20, r10
    1056:	94 01       	movw	r18, r8
    1058:	0e 94 81 0b 	call	0x1702	; 0x1702 <__mulsf3>
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	48 ec       	ldi	r20, 0xC8	; 200
    1062:	52 e4       	ldi	r21, 0x42	; 66
    1064:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divsf3>
    1068:	2b 01       	movw	r4, r22
    106a:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;		/* The LOW Level Time in Seconds */
    106c:	9b 01       	movw	r18, r22
    106e:	ac 01       	movw	r20, r24
    1070:	c5 01       	movw	r24, r10
    1072:	b4 01       	movw	r22, r8
    1074:	0e 94 e5 09 	call	0x13ca	; 0x13ca <__subsf3>
    1078:	4b 01       	movw	r8, r22
    107a:	5c 01       	movw	r10, r24
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	/* Get the Prescaler Value of the used Timer Channel */
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
    107c:	ed 81       	ldd	r30, Y+5	; 0x05
    107e:	fe 81       	ldd	r31, Y+6	; 0x06
    1080:	ee 0f       	add	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	ee 55       	subi	r30, 0x5E	; 94
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	d1 80       	ldd	r13, Z+1	; 0x01
    108a:	8d 2d       	mov	r24, r13
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	fc 01       	movw	r30, r24
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	8e 0f       	add	r24, r30
    1096:	9f 1f       	adc	r25, r31
    1098:	fc 01       	movw	r30, r24
    109a:	e1 56       	subi	r30, 0x61	; 97
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	e1 81       	ldd	r30, Z+1	; 0x01
    10a0:	8e 2f       	mov	r24, r30
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	fc 01       	movw	r30, r24
    10a6:	31 97       	sbiw	r30, 0x01	; 1
    10a8:	e7 30       	cpi	r30, 0x07	; 7
    10aa:	f1 05       	cpc	r31, r1
    10ac:	08 f0       	brcs	.+2      	; 0x10b0 <SWPwm_Start+0x114>
    10ae:	8e c0       	rjmp	.+284    	; 0x11cc <SWPwm_Start+0x230>
    10b0:	e6 5d       	subi	r30, 0xD6	; 214
    10b2:	ff 4f       	sbci	r31, 0xFF	; 255
    10b4:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	0b c0       	rjmp	.+22     	; 0x10d4 <SWPwm_Start+0x138>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
    10be:	60 e4       	ldi	r22, 0x40	; 64
    10c0:	70 e0       	ldi	r23, 0x00	; 0
			break;
    10c2:	08 c0       	rjmp	.+16     	; 0x10d4 <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	71 e0       	ldi	r23, 0x01	; 1
			break;
    10c8:	05 c0       	rjmp	.+10     	; 0x10d4 <SWPwm_Start+0x138>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	74 e0       	ldi	r23, 0x04	; 4
			break;
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <SWPwm_Start+0x138>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
    10d0:	68 e0       	ldi	r22, 0x08	; 8
    10d2:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;				/* The Controllers Periodic Time in seconds based on the System Clock Frequency */
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__floatunsisf>
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	34 e2       	ldi	r19, 0x24	; 36
    10e0:	44 e7       	ldi	r20, 0x74	; 116
    10e2:	59 e4       	ldi	r21, 0x49	; 73
    10e4:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divsf3>
    10e8:	69 83       	std	Y+1, r22	; 0x01
    10ea:	7a 83       	std	Y+2, r23	; 0x02
    10ec:	8b 83       	std	Y+3, r24	; 0x03
    10ee:	9c 83       	std	Y+4, r25	; 0x04
	gu8_currentPwmChannel = u8_ChannelID;
    10f0:	c0 92 b8 00 	sts	0x00B8, r12	; 0x8000b8 <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;		/* The HIGH Level Time in Ticks */
    10f4:	9b 01       	movw	r18, r22
    10f6:	ac 01       	movw	r20, r24
    10f8:	c3 01       	movw	r24, r6
    10fa:	b2 01       	movw	r22, r4
    10fc:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divsf3>
    1100:	ed 80       	ldd	r14, Y+5	; 0x05
    1102:	fe 80       	ldd	r15, Y+6	; 0x06
    1104:	ee 0c       	add	r14, r14
    1106:	ff 1c       	adc	r15, r15
    1108:	87 01       	movw	r16, r14
    110a:	00 0f       	add	r16, r16
    110c:	11 1f       	adc	r17, r17
    110e:	00 0f       	add	r16, r16
    1110:	11 1f       	adc	r17, r17
    1112:	00 0f       	add	r16, r16
    1114:	11 1f       	adc	r17, r17
    1116:	0e 19       	sub	r16, r14
    1118:	1f 09       	sbc	r17, r15
    111a:	07 54       	subi	r16, 0x47	; 71
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
    111e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__fixunssfsi>
    1122:	f8 01       	movw	r30, r16
    1124:	61 83       	std	Z+1, r22	; 0x01
    1126:	72 83       	std	Z+2, r23	; 0x02
    1128:	83 83       	std	Z+3, r24	; 0x03
    112a:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
    112c:	29 81       	ldd	r18, Y+1	; 0x01
    112e:	3a 81       	ldd	r19, Y+2	; 0x02
    1130:	4b 81       	ldd	r20, Y+3	; 0x03
    1132:	5c 81       	ldd	r21, Y+4	; 0x04
    1134:	c5 01       	movw	r24, r10
    1136:	b4 01       	movw	r22, r8
    1138:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__divsf3>
    113c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__fixunssfsi>
    1140:	f8 01       	movw	r30, r16
    1142:	65 83       	std	Z+5, r22	; 0x05
    1144:	76 83       	std	Z+6, r23	; 0x06
    1146:	87 83       	std	Z+7, r24	; 0x07
    1148:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    114a:	c0 82       	st	Z, r12

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
    114c:	f7 01       	movw	r30, r14
    114e:	ee 55       	subi	r30, 0x5E	; 94
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	80 81       	ld	r24, Z
    1156:	0e 94 81 03 	call	0x702	; 0x702 <Dio_writePin>
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	c9 f5       	brne	.+114    	; 0x11d0 <SWPwm_Start+0x234>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
    115e:	8e e0       	ldi	r24, 0x0E	; 14
    1160:	2d 81       	ldd	r18, Y+5	; 0x05
    1162:	3e 81       	ldd	r19, Y+6	; 0x06
    1164:	82 9f       	mul	r24, r18
    1166:	f0 01       	movw	r30, r0
    1168:	83 9f       	mul	r24, r19
    116a:	f0 0d       	add	r31, r0
    116c:	11 24       	eor	r1, r1
    116e:	e7 54       	subi	r30, 0x47	; 71
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	41 81       	ldd	r20, Z+1	; 0x01
    1174:	52 81       	ldd	r21, Z+2	; 0x02
    1176:	63 81       	ldd	r22, Z+3	; 0x03
    1178:	74 81       	ldd	r23, Z+4	; 0x04
    117a:	2a e2       	ldi	r18, 0x2A	; 42
    117c:	37 e0       	ldi	r19, 0x07	; 7
    117e:	8d 2d       	mov	r24, r13
    1180:	0e 94 76 05 	call	0xaec	; 0xaec <GptStart_aSync>
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	31 f5       	brne	.+76     	; 0x11d4 <SWPwm_Start+0x238>
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
	
	/* Assign the Next Ticks to be counted by the Asynchronous Timer */
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    1188:	8e e0       	ldi	r24, 0x0E	; 14
    118a:	2d 81       	ldd	r18, Y+5	; 0x05
    118c:	3e 81       	ldd	r19, Y+6	; 0x06
    118e:	82 9f       	mul	r24, r18
    1190:	f0 01       	movw	r30, r0
    1192:	83 9f       	mul	r24, r19
    1194:	f0 0d       	add	r31, r0
    1196:	11 24       	eor	r1, r1
    1198:	e7 54       	subi	r30, 0x47	; 71
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	85 81       	ldd	r24, Z+5	; 0x05
    119e:	96 81       	ldd	r25, Z+6	; 0x06
    11a0:	a7 81       	ldd	r26, Z+7	; 0x07
    11a2:	b0 85       	ldd	r27, Z+8	; 0x08
    11a4:	81 87       	std	Z+9, r24	; 0x09
    11a6:	92 87       	std	Z+10, r25	; 0x0a
    11a8:	a3 87       	std	Z+11, r26	; 0x0b
    11aa:	b4 87       	std	Z+12, r27	; 0x0c
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	11 c0       	rjmp	.+34     	; 0x11d6 <SWPwm_Start+0x23a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    11b4:	82 e0       	ldi	r24, 0x02	; 2
    11b6:	0f c0       	rjmp	.+30     	; 0x11d6 <SWPwm_Start+0x23a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    11b8:	83 e0       	ldi	r24, 0x03	; 3
    11ba:	0d c0       	rjmp	.+26     	; 0x11d6 <SWPwm_Start+0x23a>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    11bc:	84 e0       	ldi	r24, 0x04	; 4
    11be:	0b c0       	rjmp	.+22     	; 0x11d6 <SWPwm_Start+0x23a>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    11c0:	85 e0       	ldi	r24, 0x05	; 5
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <SWPwm_Start+0x23a>
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	07 c0       	rjmp	.+14     	; 0x11d6 <SWPwm_Start+0x23a>
	}else if(u8_DutyCycle == 100)
	{
		if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return SWPWM_STATUS_ERROR_NOK;
		return SWPWM_STATUS_ERROR_OK;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	05 c0       	rjmp	.+10     	; 0x11d6 <SWPwm_Start+0x23a>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <SWPwm_Start+0x23a>
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;	/* The LOW Level Time in Ticks */
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;

	/* Write the initial state of the pin to start the pulse time on it (HGIH LEVEL in this case) */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <SWPwm_Start+0x23a>
	
	/* Start the Asynchronous Timer Counting and call the waveFunction after ONTicks*/
	if(GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID,\
					 gstr_ChannelsData[u8_ChannelID].u32_ONTicks,\
					 waveFunction) != GPT_STATUS_ERROR_OK)	return SWPWM_STATUS_ERROR_NOK;
    11d4:	80 e0       	ldi	r24, 0x00	; 0
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	/* Change the state of the Channel to Running */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    11d6:	26 96       	adiw	r28, 0x06	; 6
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	df 90       	pop	r13
    11f0:	cf 90       	pop	r12
    11f2:	bf 90       	pop	r11
    11f4:	af 90       	pop	r10
    11f6:	9f 90       	pop	r9
    11f8:	8f 90       	pop	r8
    11fa:	7f 90       	pop	r7
    11fc:	6f 90       	pop	r6
    11fe:	5f 90       	pop	r5
    1200:	4f 90       	pop	r4
    1202:	08 95       	ret

00001204 <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
    1208:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <genu_SWPwmModStatus>
    120c:	91 30       	cpi	r25, 0x01	; 1
    120e:	b1 f5       	brne	.+108    	; 0x127c <SWPwm_Stop+0x78>
	{
		return SWPWM_STATUS_NOT_INIT;
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    1210:	81 11       	cpse	r24, r1
    1212:	36 c0       	rjmp	.+108    	; 0x1280 <SWPwm_Stop+0x7c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    1214:	c8 2f       	mov	r28, r24
    1216:	d0 e0       	ldi	r29, 0x00	; 0
    1218:	ce 01       	movw	r24, r28
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	fc 01       	movw	r30, r24
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	ee 0f       	add	r30, r30
    122a:	ff 1f       	adc	r31, r31
    122c:	e8 1b       	sub	r30, r24
    122e:	f9 0b       	sbc	r31, r25
    1230:	e7 54       	subi	r30, 0x47	; 71
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	85 85       	ldd	r24, Z+13	; 0x0d
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	29 f5       	brne	.+74     	; 0x1284 <SWPwm_Stop+0x80>
	
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
    123a:	fe 01       	movw	r30, r28
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	ee 55       	subi	r30, 0x5E	; 94
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	0e 94 81 03 	call	0x702	; 0x702 <Dio_writePin>
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	e1 f4       	brne	.+56     	; 0x1288 <SWPwm_Stop+0x84>
		return SWPWM_STATUS_ERROR_NOK;
	
	/* Change the State of the PWM Channel to STOPPED */
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    1250:	8e e0       	ldi	r24, 0x0E	; 14
    1252:	8c 9f       	mul	r24, r28
    1254:	f0 01       	movw	r30, r0
    1256:	8d 9f       	mul	r24, r29
    1258:	f0 0d       	add	r31, r0
    125a:	11 24       	eor	r1, r1
    125c:	e7 54       	subi	r30, 0x47	; 71
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	83 e0       	ldi	r24, 0x03	; 3
    1262:	85 87       	std	Z+13, r24	; 0x0d
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
    1264:	fe 01       	movw	r30, r28
    1266:	ee 0f       	add	r30, r30
    1268:	ff 1f       	adc	r31, r31
    126a:	ee 55       	subi	r30, 0x5E	; 94
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	81 81       	ldd	r24, Z+1	; 0x01
    1270:	0e 94 d5 05 	call	0xbaa	; 0xbaa <GptStop>
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	51 f0       	breq	.+20     	; 0x128c <SWPwm_Stop+0x88>
		return SWPWM_STATUS_ERROR_NOK;
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	09 c0       	rjmp	.+18     	; 0x128e <SWPwm_Stop+0x8a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the SWPwm Module is not initialized */
	if (genu_SWPwmModStatus != SWPWM_INITIALIZED)
	{
		return SWPWM_STATUS_NOT_INIT;
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	07 c0       	rjmp	.+14     	; 0x128e <SWPwm_Stop+0x8a>
	}
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	05 c0       	rjmp	.+10     	; 0x128e <SWPwm_Stop+0x8a>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    1284:	85 e0       	ldi	r24, 0x05	; 5
    1286:	03 c0       	rjmp	.+6      	; 0x128e <SWPwm_Stop+0x8a>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Change the SWPWM Pin to Low */
	if(Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW) != DIO_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	01 c0       	rjmp	.+2      	; 0x128e <SWPwm_Stop+0x8a>
	
	/* Stop the Timer Channel */
	if(GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID) != GPT_STATUS_ERROR_OK)
		return SWPWM_STATUS_ERROR_NOK;
	
	return SWPWM_STATUS_ERROR_OK;
    128c:	81 e0       	ldi	r24, 0x01	; 1
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <Service_init>:
* Description: Function to Initialize the Service layer -- Initialize all the below layers.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_init(void)
{
	/* Check if the Service Layer has been already initialized */
	if(genu_SrvcStatus == SRVC_STATUS_INITIALIZED)
    1294:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <genu_SrvcStatus>
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	81 f0       	breq	.+32     	; 0x12bc <Service_init+0x28>
		return SRVC_STATUS_INITIALIZED;
		
		
	/* Call the initializer in Button and Motor*/
	if(BTTN_STATUS_ERROR_OK != Button_init())
    129c:	0e 94 05 01 	call	0x20a	; 0x20a <Button_init>
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	49 f4       	brne	.+18     	; 0x12b6 <Service_init+0x22>
		return SRVC_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
    12a4:	0e 94 9d 01 	call	0x33a	; 0x33a <Motor_init>
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	39 f4       	brne	.+14     	; 0x12ba <Service_init+0x26>
		return SRVC_STATUS_ERROR_NOK;
	
	genu_SrvcStatus = SRVC_STATUS_INITIALIZED;
    12ac:	84 e0       	ldi	r24, 0x04	; 4
    12ae:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <genu_SrvcStatus>
	return SRVC_STATUS_ERROR_OK;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	08 95       	ret
		return SRVC_STATUS_INITIALIZED;
		
		
	/* Call the initializer in Button and Motor*/
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return SRVC_STATUS_ERROR_NOK;
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return SRVC_STATUS_ERROR_NOK;
    12ba:	80 e0       	ldi	r24, 0x00	; 0
	
	genu_SrvcStatus = SRVC_STATUS_INITIALIZED;
	return SRVC_STATUS_ERROR_OK;
}
    12bc:	08 95       	ret

000012be <Service_ReportButton>:
* Parameters (out): pu8_button - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_ReportButton(uint8_t* pu8_button)
{
    12be:	af 92       	push	r10
    12c0:	bf 92       	push	r11
    12c2:	cf 92       	push	r12
    12c4:	df 92       	push	r13
    12c6:	ef 92       	push	r14
    12c8:	ff 92       	push	r15
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	1f 92       	push	r1
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	5c 01       	movw	r10, r24
	uint8_t u8_ButtonsIndex=0;
	uint8_t u8_ButtonCurrState=0;
    12d8:	19 82       	std	Y+1, r1	; 0x01
	for (u8_ButtonsIndex=0 ; u8_ButtonsIndex<BUTTONS_USED_NUM; u8_ButtonsIndex++)
    12da:	10 e0       	ldi	r17, 0x00	; 0
    12dc:	1a c0       	rjmp	.+52     	; 0x1312 <Service_ReportButton+0x54>
	{
		Button_updateState(gau8_buttons[u8_ButtonsIndex]);
    12de:	c1 2e       	mov	r12, r17
    12e0:	d1 2c       	mov	r13, r1
    12e2:	c6 01       	movw	r24, r12
    12e4:	8f 56       	subi	r24, 0x6F	; 111
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	7c 01       	movw	r14, r24
    12ea:	fc 01       	movw	r30, r24
    12ec:	80 81       	ld	r24, Z
    12ee:	0e 94 2a 01 	call	0x254	; 0x254 <Button_updateState>
		Button_getState(gau8_buttons[u8_ButtonsIndex], &u8_ButtonCurrState);
    12f2:	be 01       	movw	r22, r28
    12f4:	6f 5f       	subi	r22, 0xFF	; 255
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	f7 01       	movw	r30, r14
    12fa:	80 81       	ld	r24, Z
    12fc:	0e 94 18 01 	call	0x230	; 0x230 <Button_getState>
		if(u8_ButtonCurrState == BUTTON_STATE_PRESSED)
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	29 f4       	brne	.+10     	; 0x1310 <Service_ReportButton+0x52>
		{
			*pu8_button = gau8_buttons[u8_ButtonsIndex];
    1306:	f7 01       	movw	r30, r14
    1308:	80 81       	ld	r24, Z
    130a:	f5 01       	movw	r30, r10
    130c:	80 83       	st	Z, r24
			return SRVC_STATUS_ERROR_OK;
    130e:	06 c0       	rjmp	.+12     	; 0x131c <Service_ReportButton+0x5e>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_ReportButton(uint8_t* pu8_button)
{
	uint8_t u8_ButtonsIndex=0;
	uint8_t u8_ButtonCurrState=0;
	for (u8_ButtonsIndex=0 ; u8_ButtonsIndex<BUTTONS_USED_NUM; u8_ButtonsIndex++)
    1310:	1f 5f       	subi	r17, 0xFF	; 255
    1312:	14 30       	cpi	r17, 0x04	; 4
    1314:	20 f3       	brcs	.-56     	; 0x12de <Service_ReportButton+0x20>
		{
			*pu8_button = gau8_buttons[u8_ButtonsIndex];
			return SRVC_STATUS_ERROR_OK;
		}
	}
	*pu8_button = BUTTON_NULL;
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	f5 01       	movw	r30, r10
    131a:	80 83       	st	Z, r24
	return SRVC_STATUS_ERROR_OK;
}
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	0f 90       	pop	r0
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	bf 90       	pop	r11
    1330:	af 90       	pop	r10
    1332:	08 95       	ret

00001334 <Service_UpdateMotors>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the motor (Run the motor with the specific action
*				,direction and speed)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_UpdateMotors(uint8_t u8_motorAction, uint8_t u8_motorSpeed)
{
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	c8 2f       	mov	r28, r24
	if(u8_motorAction == ACTION_STOP)
    133a:	81 11       	cpse	r24, r1
    133c:	08 c0       	rjmp	.+16     	; 0x134e <Service_UpdateMotors+0x1a>
	{
		Motor_stop(MOTOR_LEFT);
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	0e 94 1a 02 	call	0x434	; 0x434 <Motor_stop>
		Motor_stop(MOTOR_RIGHT);
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	0e 94 1a 02 	call	0x434	; 0x434 <Motor_stop>
		return SRVC_STATUS_ERROR_OK;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	3b c0       	rjmp	.+118    	; 0x13c4 <Service_UpdateMotors+0x90>
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
	uint8_t u8_rightMotorDir=MOTOR_FRWRD;
	
	switch (u8_motorSpeed)
    134e:	62 30       	cpi	r22, 0x02	; 2
    1350:	59 f0       	breq	.+22     	; 0x1368 <Service_UpdateMotors+0x34>
    1352:	18 f4       	brcc	.+6      	; 0x135a <Service_UpdateMotors+0x26>
    1354:	61 30       	cpi	r22, 0x01	; 1
    1356:	a9 f0       	breq	.+42     	; 0x1382 <Service_UpdateMotors+0x4e>
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <Service_UpdateMotors+0x2e>
    135a:	63 30       	cpi	r22, 0x03	; 3
    135c:	41 f0       	breq	.+16     	; 0x136e <Service_UpdateMotors+0x3a>
    135e:	64 30       	cpi	r22, 0x04	; 4
    1360:	69 f0       	breq	.+26     	; 0x137c <Service_UpdateMotors+0x48>
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    1362:	40 e0       	ldi	r20, 0x00	; 0
	{
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
    1364:	d0 e0       	ldi	r29, 0x00	; 0
    1366:	0f c0       	rjmp	.+30     	; 0x1386 <Service_UpdateMotors+0x52>
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    1368:	40 e0       	ldi	r20, 0x00	; 0
	{
	case SPEED_30F:
		u8_speed = 30;
		break;
	case SPEED_60F:
		u8_speed = 60;
    136a:	dc e3       	ldi	r29, 0x3C	; 60
		break;
    136c:	0c c0       	rjmp	.+24     	; 0x1386 <Service_UpdateMotors+0x52>
	case SPEED_90F:
		u8_speed = 90;
		Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_LOW);
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	0e 94 81 03 	call	0x702	; 0x702 <Dio_writePin>
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    1376:	40 e0       	ldi	r20, 0x00	; 0
		break;
	case SPEED_60F:
		u8_speed = 60;
		break;
	case SPEED_90F:
		u8_speed = 90;
    1378:	da e5       	ldi	r29, 0x5A	; 90
		Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_LOW);
		break;
    137a:	05 c0       	rjmp	.+10     	; 0x1386 <Service_UpdateMotors+0x52>
	case SPEED_30B:
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
    137c:	41 e0       	ldi	r20, 0x01	; 1
	case SPEED_90F:
		u8_speed = 90;
		Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_LOW);
		break;
	case SPEED_30B:
		u8_speed = 30;
    137e:	de e1       	ldi	r29, 0x1E	; 30
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
		break;
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <Service_UpdateMotors+0x52>
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    1382:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t u8_rightMotorDir=MOTOR_FRWRD;
	
	switch (u8_motorSpeed)
	{
	case SPEED_30F:
		u8_speed = 30;
    1384:	de e1       	ldi	r29, 0x1E	; 30
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
		break;
	}
	
	if (u8_motorAction == ACTION_LEFT)
    1386:	c2 30       	cpi	r28, 0x02	; 2
    1388:	21 f0       	breq	.+8      	; 0x1392 <Service_UpdateMotors+0x5e>
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
    138a:	c3 30       	cpi	r28, 0x03	; 3
    138c:	31 f0       	breq	.+12     	; 0x139a <Service_UpdateMotors+0x66>
    138e:	c4 2f       	mov	r28, r20
    1390:	07 c0       	rjmp	.+14     	; 0x13a0 <Service_UpdateMotors+0x6c>
	
	if (u8_motorAction == ACTION_LEFT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
    1392:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	if (u8_motorAction == ACTION_LEFT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
    1394:	40 e0       	ldi	r20, 0x00	; 0
		break;
	}
	
	if (u8_motorAction == ACTION_LEFT)
	{
		u8_speed = 30;
    1396:	de e1       	ldi	r29, 0x1E	; 30
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <Service_UpdateMotors+0x6c>
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_FRWRD;
    139a:	c0 e0       	ldi	r28, 0x00	; 0
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
    139c:	41 e0       	ldi	r20, 0x01	; 1
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
	{
		u8_speed = 30;
    139e:	de e1       	ldi	r29, 0x1E	; 30
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_FRWRD;
	}
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_LEFT, u8_speed, u8_leftMotorDir))
    13a0:	6d 2f       	mov	r22, r29
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	0e 94 ae 01 	call	0x35c	; 0x35c <Motor_run>
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	49 f4       	brne	.+18     	; 0x13be <Service_UpdateMotors+0x8a>
		return SRVC_STATUS_ERROR_NOK;
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_RIGHT, u8_speed, u8_rightMotorDir))
    13ac:	4c 2f       	mov	r20, r28
    13ae:	6d 2f       	mov	r22, r29
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	0e 94 ae 01 	call	0x35c	; 0x35c <Motor_run>
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	21 f0       	breq	.+8      	; 0x13c2 <Service_UpdateMotors+0x8e>
		return SRVC_STATUS_ERROR_NOK;
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <Service_UpdateMotors+0x90>
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_FRWRD;
	}
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_LEFT, u8_speed, u8_leftMotorDir))
		return SRVC_STATUS_ERROR_NOK;
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <Service_UpdateMotors+0x90>
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_RIGHT, u8_speed, u8_rightMotorDir))
		return SRVC_STATUS_ERROR_NOK;
	return  SRVC_STATUS_ERROR_OK;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	08 95       	ret

000013ca <__subsf3>:
    13ca:	50 58       	subi	r21, 0x80	; 128

000013cc <__addsf3>:
    13cc:	bb 27       	eor	r27, r27
    13ce:	aa 27       	eor	r26, r26
    13d0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__addsf3x>
    13d4:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_round>
    13d8:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fp_pscA>
    13dc:	38 f0       	brcs	.+14     	; 0x13ec <__addsf3+0x20>
    13de:	0e 94 40 0b 	call	0x1680	; 0x1680 <__fp_pscB>
    13e2:	20 f0       	brcs	.+8      	; 0x13ec <__addsf3+0x20>
    13e4:	39 f4       	brne	.+14     	; 0x13f4 <__addsf3+0x28>
    13e6:	9f 3f       	cpi	r25, 0xFF	; 255
    13e8:	19 f4       	brne	.+6      	; 0x13f0 <__addsf3+0x24>
    13ea:	26 f4       	brtc	.+8      	; 0x13f4 <__addsf3+0x28>
    13ec:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_nan>
    13f0:	0e f4       	brtc	.+2      	; 0x13f4 <__addsf3+0x28>
    13f2:	e0 95       	com	r30
    13f4:	e7 fb       	bst	r30, 7
    13f6:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_inf>

000013fa <__addsf3x>:
    13fa:	e9 2f       	mov	r30, r25
    13fc:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_split3>
    1400:	58 f3       	brcs	.-42     	; 0x13d8 <__addsf3+0xc>
    1402:	ba 17       	cp	r27, r26
    1404:	62 07       	cpc	r22, r18
    1406:	73 07       	cpc	r23, r19
    1408:	84 07       	cpc	r24, r20
    140a:	95 07       	cpc	r25, r21
    140c:	20 f0       	brcs	.+8      	; 0x1416 <__addsf3x+0x1c>
    140e:	79 f4       	brne	.+30     	; 0x142e <__addsf3x+0x34>
    1410:	a6 f5       	brtc	.+104    	; 0x147a <__addsf3x+0x80>
    1412:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_zero>
    1416:	0e f4       	brtc	.+2      	; 0x141a <__addsf3x+0x20>
    1418:	e0 95       	com	r30
    141a:	0b 2e       	mov	r0, r27
    141c:	ba 2f       	mov	r27, r26
    141e:	a0 2d       	mov	r26, r0
    1420:	0b 01       	movw	r0, r22
    1422:	b9 01       	movw	r22, r18
    1424:	90 01       	movw	r18, r0
    1426:	0c 01       	movw	r0, r24
    1428:	ca 01       	movw	r24, r20
    142a:	a0 01       	movw	r20, r0
    142c:	11 24       	eor	r1, r1
    142e:	ff 27       	eor	r31, r31
    1430:	59 1b       	sub	r21, r25
    1432:	99 f0       	breq	.+38     	; 0x145a <__addsf3x+0x60>
    1434:	59 3f       	cpi	r21, 0xF9	; 249
    1436:	50 f4       	brcc	.+20     	; 0x144c <__addsf3x+0x52>
    1438:	50 3e       	cpi	r21, 0xE0	; 224
    143a:	68 f1       	brcs	.+90     	; 0x1496 <__addsf3x+0x9c>
    143c:	1a 16       	cp	r1, r26
    143e:	f0 40       	sbci	r31, 0x00	; 0
    1440:	a2 2f       	mov	r26, r18
    1442:	23 2f       	mov	r18, r19
    1444:	34 2f       	mov	r19, r20
    1446:	44 27       	eor	r20, r20
    1448:	58 5f       	subi	r21, 0xF8	; 248
    144a:	f3 cf       	rjmp	.-26     	; 0x1432 <__addsf3x+0x38>
    144c:	46 95       	lsr	r20
    144e:	37 95       	ror	r19
    1450:	27 95       	ror	r18
    1452:	a7 95       	ror	r26
    1454:	f0 40       	sbci	r31, 0x00	; 0
    1456:	53 95       	inc	r21
    1458:	c9 f7       	brne	.-14     	; 0x144c <__addsf3x+0x52>
    145a:	7e f4       	brtc	.+30     	; 0x147a <__addsf3x+0x80>
    145c:	1f 16       	cp	r1, r31
    145e:	ba 0b       	sbc	r27, r26
    1460:	62 0b       	sbc	r22, r18
    1462:	73 0b       	sbc	r23, r19
    1464:	84 0b       	sbc	r24, r20
    1466:	ba f0       	brmi	.+46     	; 0x1496 <__addsf3x+0x9c>
    1468:	91 50       	subi	r25, 0x01	; 1
    146a:	a1 f0       	breq	.+40     	; 0x1494 <__addsf3x+0x9a>
    146c:	ff 0f       	add	r31, r31
    146e:	bb 1f       	adc	r27, r27
    1470:	66 1f       	adc	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	88 1f       	adc	r24, r24
    1476:	c2 f7       	brpl	.-16     	; 0x1468 <__addsf3x+0x6e>
    1478:	0e c0       	rjmp	.+28     	; 0x1496 <__addsf3x+0x9c>
    147a:	ba 0f       	add	r27, r26
    147c:	62 1f       	adc	r22, r18
    147e:	73 1f       	adc	r23, r19
    1480:	84 1f       	adc	r24, r20
    1482:	48 f4       	brcc	.+18     	; 0x1496 <__addsf3x+0x9c>
    1484:	87 95       	ror	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	b7 95       	ror	r27
    148c:	f7 95       	ror	r31
    148e:	9e 3f       	cpi	r25, 0xFE	; 254
    1490:	08 f0       	brcs	.+2      	; 0x1494 <__addsf3x+0x9a>
    1492:	b0 cf       	rjmp	.-160    	; 0x13f4 <__addsf3+0x28>
    1494:	93 95       	inc	r25
    1496:	88 0f       	add	r24, r24
    1498:	08 f0       	brcs	.+2      	; 0x149c <__addsf3x+0xa2>
    149a:	99 27       	eor	r25, r25
    149c:	ee 0f       	add	r30, r30
    149e:	97 95       	ror	r25
    14a0:	87 95       	ror	r24
    14a2:	08 95       	ret

000014a4 <__divsf3>:
    14a4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <__divsf3x>
    14a8:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_round>
    14ac:	0e 94 40 0b 	call	0x1680	; 0x1680 <__fp_pscB>
    14b0:	58 f0       	brcs	.+22     	; 0x14c8 <__divsf3+0x24>
    14b2:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fp_pscA>
    14b6:	40 f0       	brcs	.+16     	; 0x14c8 <__divsf3+0x24>
    14b8:	29 f4       	brne	.+10     	; 0x14c4 <__divsf3+0x20>
    14ba:	5f 3f       	cpi	r21, 0xFF	; 255
    14bc:	29 f0       	breq	.+10     	; 0x14c8 <__divsf3+0x24>
    14be:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_inf>
    14c2:	51 11       	cpse	r21, r1
    14c4:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__fp_szero>
    14c8:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_nan>

000014cc <__divsf3x>:
    14cc:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_split3>
    14d0:	68 f3       	brcs	.-38     	; 0x14ac <__divsf3+0x8>

000014d2 <__divsf3_pse>:
    14d2:	99 23       	and	r25, r25
    14d4:	b1 f3       	breq	.-20     	; 0x14c2 <__divsf3+0x1e>
    14d6:	55 23       	and	r21, r21
    14d8:	91 f3       	breq	.-28     	; 0x14be <__divsf3+0x1a>
    14da:	95 1b       	sub	r25, r21
    14dc:	55 0b       	sbc	r21, r21
    14de:	bb 27       	eor	r27, r27
    14e0:	aa 27       	eor	r26, r26
    14e2:	62 17       	cp	r22, r18
    14e4:	73 07       	cpc	r23, r19
    14e6:	84 07       	cpc	r24, r20
    14e8:	38 f0       	brcs	.+14     	; 0x14f8 <__divsf3_pse+0x26>
    14ea:	9f 5f       	subi	r25, 0xFF	; 255
    14ec:	5f 4f       	sbci	r21, 0xFF	; 255
    14ee:	22 0f       	add	r18, r18
    14f0:	33 1f       	adc	r19, r19
    14f2:	44 1f       	adc	r20, r20
    14f4:	aa 1f       	adc	r26, r26
    14f6:	a9 f3       	breq	.-22     	; 0x14e2 <__divsf3_pse+0x10>
    14f8:	35 d0       	rcall	.+106    	; 0x1564 <__divsf3_pse+0x92>
    14fa:	0e 2e       	mov	r0, r30
    14fc:	3a f0       	brmi	.+14     	; 0x150c <__divsf3_pse+0x3a>
    14fe:	e0 e8       	ldi	r30, 0x80	; 128
    1500:	32 d0       	rcall	.+100    	; 0x1566 <__divsf3_pse+0x94>
    1502:	91 50       	subi	r25, 0x01	; 1
    1504:	50 40       	sbci	r21, 0x00	; 0
    1506:	e6 95       	lsr	r30
    1508:	00 1c       	adc	r0, r0
    150a:	ca f7       	brpl	.-14     	; 0x14fe <__divsf3_pse+0x2c>
    150c:	2b d0       	rcall	.+86     	; 0x1564 <__divsf3_pse+0x92>
    150e:	fe 2f       	mov	r31, r30
    1510:	29 d0       	rcall	.+82     	; 0x1564 <__divsf3_pse+0x92>
    1512:	66 0f       	add	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	88 1f       	adc	r24, r24
    1518:	bb 1f       	adc	r27, r27
    151a:	26 17       	cp	r18, r22
    151c:	37 07       	cpc	r19, r23
    151e:	48 07       	cpc	r20, r24
    1520:	ab 07       	cpc	r26, r27
    1522:	b0 e8       	ldi	r27, 0x80	; 128
    1524:	09 f0       	breq	.+2      	; 0x1528 <__divsf3_pse+0x56>
    1526:	bb 0b       	sbc	r27, r27
    1528:	80 2d       	mov	r24, r0
    152a:	bf 01       	movw	r22, r30
    152c:	ff 27       	eor	r31, r31
    152e:	93 58       	subi	r25, 0x83	; 131
    1530:	5f 4f       	sbci	r21, 0xFF	; 255
    1532:	3a f0       	brmi	.+14     	; 0x1542 <__divsf3_pse+0x70>
    1534:	9e 3f       	cpi	r25, 0xFE	; 254
    1536:	51 05       	cpc	r21, r1
    1538:	78 f0       	brcs	.+30     	; 0x1558 <__divsf3_pse+0x86>
    153a:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_inf>
    153e:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__fp_szero>
    1542:	5f 3f       	cpi	r21, 0xFF	; 255
    1544:	e4 f3       	brlt	.-8      	; 0x153e <__divsf3_pse+0x6c>
    1546:	98 3e       	cpi	r25, 0xE8	; 232
    1548:	d4 f3       	brlt	.-12     	; 0x153e <__divsf3_pse+0x6c>
    154a:	86 95       	lsr	r24
    154c:	77 95       	ror	r23
    154e:	67 95       	ror	r22
    1550:	b7 95       	ror	r27
    1552:	f7 95       	ror	r31
    1554:	9f 5f       	subi	r25, 0xFF	; 255
    1556:	c9 f7       	brne	.-14     	; 0x154a <__divsf3_pse+0x78>
    1558:	88 0f       	add	r24, r24
    155a:	91 1d       	adc	r25, r1
    155c:	96 95       	lsr	r25
    155e:	87 95       	ror	r24
    1560:	97 f9       	bld	r25, 7
    1562:	08 95       	ret
    1564:	e1 e0       	ldi	r30, 0x01	; 1
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	88 1f       	adc	r24, r24
    156c:	bb 1f       	adc	r27, r27
    156e:	62 17       	cp	r22, r18
    1570:	73 07       	cpc	r23, r19
    1572:	84 07       	cpc	r24, r20
    1574:	ba 07       	cpc	r27, r26
    1576:	20 f0       	brcs	.+8      	; 0x1580 <__divsf3_pse+0xae>
    1578:	62 1b       	sub	r22, r18
    157a:	73 0b       	sbc	r23, r19
    157c:	84 0b       	sbc	r24, r20
    157e:	ba 0b       	sbc	r27, r26
    1580:	ee 1f       	adc	r30, r30
    1582:	88 f7       	brcc	.-30     	; 0x1566 <__divsf3_pse+0x94>
    1584:	e0 95       	com	r30
    1586:	08 95       	ret

00001588 <__fixunssfsi>:
    1588:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__fp_splitA>
    158c:	88 f0       	brcs	.+34     	; 0x15b0 <__fixunssfsi+0x28>
    158e:	9f 57       	subi	r25, 0x7F	; 127
    1590:	98 f0       	brcs	.+38     	; 0x15b8 <__fixunssfsi+0x30>
    1592:	b9 2f       	mov	r27, r25
    1594:	99 27       	eor	r25, r25
    1596:	b7 51       	subi	r27, 0x17	; 23
    1598:	b0 f0       	brcs	.+44     	; 0x15c6 <__fixunssfsi+0x3e>
    159a:	e1 f0       	breq	.+56     	; 0x15d4 <__fixunssfsi+0x4c>
    159c:	66 0f       	add	r22, r22
    159e:	77 1f       	adc	r23, r23
    15a0:	88 1f       	adc	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	1a f0       	brmi	.+6      	; 0x15ac <__fixunssfsi+0x24>
    15a6:	ba 95       	dec	r27
    15a8:	c9 f7       	brne	.-14     	; 0x159c <__fixunssfsi+0x14>
    15aa:	14 c0       	rjmp	.+40     	; 0x15d4 <__fixunssfsi+0x4c>
    15ac:	b1 30       	cpi	r27, 0x01	; 1
    15ae:	91 f0       	breq	.+36     	; 0x15d4 <__fixunssfsi+0x4c>
    15b0:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__fp_zero>
    15b4:	b1 e0       	ldi	r27, 0x01	; 1
    15b6:	08 95       	ret
    15b8:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <__fp_zero>
    15bc:	67 2f       	mov	r22, r23
    15be:	78 2f       	mov	r23, r24
    15c0:	88 27       	eor	r24, r24
    15c2:	b8 5f       	subi	r27, 0xF8	; 248
    15c4:	39 f0       	breq	.+14     	; 0x15d4 <__fixunssfsi+0x4c>
    15c6:	b9 3f       	cpi	r27, 0xF9	; 249
    15c8:	cc f3       	brlt	.-14     	; 0x15bc <__fixunssfsi+0x34>
    15ca:	86 95       	lsr	r24
    15cc:	77 95       	ror	r23
    15ce:	67 95       	ror	r22
    15d0:	b3 95       	inc	r27
    15d2:	d9 f7       	brne	.-10     	; 0x15ca <__fixunssfsi+0x42>
    15d4:	3e f4       	brtc	.+14     	; 0x15e4 <__fixunssfsi+0x5c>
    15d6:	90 95       	com	r25
    15d8:	80 95       	com	r24
    15da:	70 95       	com	r23
    15dc:	61 95       	neg	r22
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	8f 4f       	sbci	r24, 0xFF	; 255
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	08 95       	ret

000015e6 <__floatunsisf>:
    15e6:	e8 94       	clt
    15e8:	09 c0       	rjmp	.+18     	; 0x15fc <__floatsisf+0x12>

000015ea <__floatsisf>:
    15ea:	97 fb       	bst	r25, 7
    15ec:	3e f4       	brtc	.+14     	; 0x15fc <__floatsisf+0x12>
    15ee:	90 95       	com	r25
    15f0:	80 95       	com	r24
    15f2:	70 95       	com	r23
    15f4:	61 95       	neg	r22
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	8f 4f       	sbci	r24, 0xFF	; 255
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	99 23       	and	r25, r25
    15fe:	a9 f0       	breq	.+42     	; 0x162a <__floatsisf+0x40>
    1600:	f9 2f       	mov	r31, r25
    1602:	96 e9       	ldi	r25, 0x96	; 150
    1604:	bb 27       	eor	r27, r27
    1606:	93 95       	inc	r25
    1608:	f6 95       	lsr	r31
    160a:	87 95       	ror	r24
    160c:	77 95       	ror	r23
    160e:	67 95       	ror	r22
    1610:	b7 95       	ror	r27
    1612:	f1 11       	cpse	r31, r1
    1614:	f8 cf       	rjmp	.-16     	; 0x1606 <__floatsisf+0x1c>
    1616:	fa f4       	brpl	.+62     	; 0x1656 <__floatsisf+0x6c>
    1618:	bb 0f       	add	r27, r27
    161a:	11 f4       	brne	.+4      	; 0x1620 <__floatsisf+0x36>
    161c:	60 ff       	sbrs	r22, 0
    161e:	1b c0       	rjmp	.+54     	; 0x1656 <__floatsisf+0x6c>
    1620:	6f 5f       	subi	r22, 0xFF	; 255
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	16 c0       	rjmp	.+44     	; 0x1656 <__floatsisf+0x6c>
    162a:	88 23       	and	r24, r24
    162c:	11 f0       	breq	.+4      	; 0x1632 <__floatsisf+0x48>
    162e:	96 e9       	ldi	r25, 0x96	; 150
    1630:	11 c0       	rjmp	.+34     	; 0x1654 <__floatsisf+0x6a>
    1632:	77 23       	and	r23, r23
    1634:	21 f0       	breq	.+8      	; 0x163e <__floatsisf+0x54>
    1636:	9e e8       	ldi	r25, 0x8E	; 142
    1638:	87 2f       	mov	r24, r23
    163a:	76 2f       	mov	r23, r22
    163c:	05 c0       	rjmp	.+10     	; 0x1648 <__floatsisf+0x5e>
    163e:	66 23       	and	r22, r22
    1640:	71 f0       	breq	.+28     	; 0x165e <__floatsisf+0x74>
    1642:	96 e8       	ldi	r25, 0x86	; 134
    1644:	86 2f       	mov	r24, r22
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	2a f0       	brmi	.+10     	; 0x1656 <__floatsisf+0x6c>
    164c:	9a 95       	dec	r25
    164e:	66 0f       	add	r22, r22
    1650:	77 1f       	adc	r23, r23
    1652:	88 1f       	adc	r24, r24
    1654:	da f7       	brpl	.-10     	; 0x164c <__floatsisf+0x62>
    1656:	88 0f       	add	r24, r24
    1658:	96 95       	lsr	r25
    165a:	87 95       	ror	r24
    165c:	97 f9       	bld	r25, 7
    165e:	08 95       	ret

00001660 <__fp_inf>:
    1660:	97 f9       	bld	r25, 7
    1662:	9f 67       	ori	r25, 0x7F	; 127
    1664:	80 e8       	ldi	r24, 0x80	; 128
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	08 95       	ret

0000166c <__fp_nan>:
    166c:	9f ef       	ldi	r25, 0xFF	; 255
    166e:	80 ec       	ldi	r24, 0xC0	; 192
    1670:	08 95       	ret

00001672 <__fp_pscA>:
    1672:	00 24       	eor	r0, r0
    1674:	0a 94       	dec	r0
    1676:	16 16       	cp	r1, r22
    1678:	17 06       	cpc	r1, r23
    167a:	18 06       	cpc	r1, r24
    167c:	09 06       	cpc	r0, r25
    167e:	08 95       	ret

00001680 <__fp_pscB>:
    1680:	00 24       	eor	r0, r0
    1682:	0a 94       	dec	r0
    1684:	12 16       	cp	r1, r18
    1686:	13 06       	cpc	r1, r19
    1688:	14 06       	cpc	r1, r20
    168a:	05 06       	cpc	r0, r21
    168c:	08 95       	ret

0000168e <__fp_round>:
    168e:	09 2e       	mov	r0, r25
    1690:	03 94       	inc	r0
    1692:	00 0c       	add	r0, r0
    1694:	11 f4       	brne	.+4      	; 0x169a <__fp_round+0xc>
    1696:	88 23       	and	r24, r24
    1698:	52 f0       	brmi	.+20     	; 0x16ae <__fp_round+0x20>
    169a:	bb 0f       	add	r27, r27
    169c:	40 f4       	brcc	.+16     	; 0x16ae <__fp_round+0x20>
    169e:	bf 2b       	or	r27, r31
    16a0:	11 f4       	brne	.+4      	; 0x16a6 <__fp_round+0x18>
    16a2:	60 ff       	sbrs	r22, 0
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <__fp_round+0x20>
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	8f 4f       	sbci	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	08 95       	ret

000016b0 <__fp_split3>:
    16b0:	57 fd       	sbrc	r21, 7
    16b2:	90 58       	subi	r25, 0x80	; 128
    16b4:	44 0f       	add	r20, r20
    16b6:	55 1f       	adc	r21, r21
    16b8:	59 f0       	breq	.+22     	; 0x16d0 <__fp_splitA+0x10>
    16ba:	5f 3f       	cpi	r21, 0xFF	; 255
    16bc:	71 f0       	breq	.+28     	; 0x16da <__fp_splitA+0x1a>
    16be:	47 95       	ror	r20

000016c0 <__fp_splitA>:
    16c0:	88 0f       	add	r24, r24
    16c2:	97 fb       	bst	r25, 7
    16c4:	99 1f       	adc	r25, r25
    16c6:	61 f0       	breq	.+24     	; 0x16e0 <__fp_splitA+0x20>
    16c8:	9f 3f       	cpi	r25, 0xFF	; 255
    16ca:	79 f0       	breq	.+30     	; 0x16ea <__fp_splitA+0x2a>
    16cc:	87 95       	ror	r24
    16ce:	08 95       	ret
    16d0:	12 16       	cp	r1, r18
    16d2:	13 06       	cpc	r1, r19
    16d4:	14 06       	cpc	r1, r20
    16d6:	55 1f       	adc	r21, r21
    16d8:	f2 cf       	rjmp	.-28     	; 0x16be <__fp_split3+0xe>
    16da:	46 95       	lsr	r20
    16dc:	f1 df       	rcall	.-30     	; 0x16c0 <__fp_splitA>
    16de:	08 c0       	rjmp	.+16     	; 0x16f0 <__fp_splitA+0x30>
    16e0:	16 16       	cp	r1, r22
    16e2:	17 06       	cpc	r1, r23
    16e4:	18 06       	cpc	r1, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	f1 cf       	rjmp	.-30     	; 0x16cc <__fp_splitA+0xc>
    16ea:	86 95       	lsr	r24
    16ec:	71 05       	cpc	r23, r1
    16ee:	61 05       	cpc	r22, r1
    16f0:	08 94       	sec
    16f2:	08 95       	ret

000016f4 <__fp_zero>:
    16f4:	e8 94       	clt

000016f6 <__fp_szero>:
    16f6:	bb 27       	eor	r27, r27
    16f8:	66 27       	eor	r22, r22
    16fa:	77 27       	eor	r23, r23
    16fc:	cb 01       	movw	r24, r22
    16fe:	97 f9       	bld	r25, 7
    1700:	08 95       	ret

00001702 <__mulsf3>:
    1702:	0e 94 94 0b 	call	0x1728	; 0x1728 <__mulsf3x>
    1706:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__fp_round>
    170a:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fp_pscA>
    170e:	38 f0       	brcs	.+14     	; 0x171e <__mulsf3+0x1c>
    1710:	0e 94 40 0b 	call	0x1680	; 0x1680 <__fp_pscB>
    1714:	20 f0       	brcs	.+8      	; 0x171e <__mulsf3+0x1c>
    1716:	95 23       	and	r25, r21
    1718:	11 f0       	breq	.+4      	; 0x171e <__mulsf3+0x1c>
    171a:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_inf>
    171e:	0c 94 36 0b 	jmp	0x166c	; 0x166c <__fp_nan>
    1722:	11 24       	eor	r1, r1
    1724:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__fp_szero>

00001728 <__mulsf3x>:
    1728:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_split3>
    172c:	70 f3       	brcs	.-36     	; 0x170a <__mulsf3+0x8>

0000172e <__mulsf3_pse>:
    172e:	95 9f       	mul	r25, r21
    1730:	c1 f3       	breq	.-16     	; 0x1722 <__mulsf3+0x20>
    1732:	95 0f       	add	r25, r21
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	55 1f       	adc	r21, r21
    1738:	62 9f       	mul	r22, r18
    173a:	f0 01       	movw	r30, r0
    173c:	72 9f       	mul	r23, r18
    173e:	bb 27       	eor	r27, r27
    1740:	f0 0d       	add	r31, r0
    1742:	b1 1d       	adc	r27, r1
    1744:	63 9f       	mul	r22, r19
    1746:	aa 27       	eor	r26, r26
    1748:	f0 0d       	add	r31, r0
    174a:	b1 1d       	adc	r27, r1
    174c:	aa 1f       	adc	r26, r26
    174e:	64 9f       	mul	r22, r20
    1750:	66 27       	eor	r22, r22
    1752:	b0 0d       	add	r27, r0
    1754:	a1 1d       	adc	r26, r1
    1756:	66 1f       	adc	r22, r22
    1758:	82 9f       	mul	r24, r18
    175a:	22 27       	eor	r18, r18
    175c:	b0 0d       	add	r27, r0
    175e:	a1 1d       	adc	r26, r1
    1760:	62 1f       	adc	r22, r18
    1762:	73 9f       	mul	r23, r19
    1764:	b0 0d       	add	r27, r0
    1766:	a1 1d       	adc	r26, r1
    1768:	62 1f       	adc	r22, r18
    176a:	83 9f       	mul	r24, r19
    176c:	a0 0d       	add	r26, r0
    176e:	61 1d       	adc	r22, r1
    1770:	22 1f       	adc	r18, r18
    1772:	74 9f       	mul	r23, r20
    1774:	33 27       	eor	r19, r19
    1776:	a0 0d       	add	r26, r0
    1778:	61 1d       	adc	r22, r1
    177a:	23 1f       	adc	r18, r19
    177c:	84 9f       	mul	r24, r20
    177e:	60 0d       	add	r22, r0
    1780:	21 1d       	adc	r18, r1
    1782:	82 2f       	mov	r24, r18
    1784:	76 2f       	mov	r23, r22
    1786:	6a 2f       	mov	r22, r26
    1788:	11 24       	eor	r1, r1
    178a:	9f 57       	subi	r25, 0x7F	; 127
    178c:	50 40       	sbci	r21, 0x00	; 0
    178e:	9a f0       	brmi	.+38     	; 0x17b6 <__mulsf3_pse+0x88>
    1790:	f1 f0       	breq	.+60     	; 0x17ce <__mulsf3_pse+0xa0>
    1792:	88 23       	and	r24, r24
    1794:	4a f0       	brmi	.+18     	; 0x17a8 <__mulsf3_pse+0x7a>
    1796:	ee 0f       	add	r30, r30
    1798:	ff 1f       	adc	r31, r31
    179a:	bb 1f       	adc	r27, r27
    179c:	66 1f       	adc	r22, r22
    179e:	77 1f       	adc	r23, r23
    17a0:	88 1f       	adc	r24, r24
    17a2:	91 50       	subi	r25, 0x01	; 1
    17a4:	50 40       	sbci	r21, 0x00	; 0
    17a6:	a9 f7       	brne	.-22     	; 0x1792 <__mulsf3_pse+0x64>
    17a8:	9e 3f       	cpi	r25, 0xFE	; 254
    17aa:	51 05       	cpc	r21, r1
    17ac:	80 f0       	brcs	.+32     	; 0x17ce <__mulsf3_pse+0xa0>
    17ae:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_inf>
    17b2:	0c 94 7b 0b 	jmp	0x16f6	; 0x16f6 <__fp_szero>
    17b6:	5f 3f       	cpi	r21, 0xFF	; 255
    17b8:	e4 f3       	brlt	.-8      	; 0x17b2 <__mulsf3_pse+0x84>
    17ba:	98 3e       	cpi	r25, 0xE8	; 232
    17bc:	d4 f3       	brlt	.-12     	; 0x17b2 <__mulsf3_pse+0x84>
    17be:	86 95       	lsr	r24
    17c0:	77 95       	ror	r23
    17c2:	67 95       	ror	r22
    17c4:	b7 95       	ror	r27
    17c6:	f7 95       	ror	r31
    17c8:	e7 95       	ror	r30
    17ca:	9f 5f       	subi	r25, 0xFF	; 255
    17cc:	c1 f7       	brne	.-16     	; 0x17be <__mulsf3_pse+0x90>
    17ce:	fe 2b       	or	r31, r30
    17d0:	88 0f       	add	r24, r24
    17d2:	91 1d       	adc	r25, r1
    17d4:	96 95       	lsr	r25
    17d6:	87 95       	ror	r24
    17d8:	97 f9       	bld	r25, 7
    17da:	08 95       	ret

000017dc <__udivmodsi4>:
    17dc:	a1 e2       	ldi	r26, 0x21	; 33
    17de:	1a 2e       	mov	r1, r26
    17e0:	aa 1b       	sub	r26, r26
    17e2:	bb 1b       	sub	r27, r27
    17e4:	fd 01       	movw	r30, r26
    17e6:	0d c0       	rjmp	.+26     	; 0x1802 <__udivmodsi4_ep>

000017e8 <__udivmodsi4_loop>:
    17e8:	aa 1f       	adc	r26, r26
    17ea:	bb 1f       	adc	r27, r27
    17ec:	ee 1f       	adc	r30, r30
    17ee:	ff 1f       	adc	r31, r31
    17f0:	a2 17       	cp	r26, r18
    17f2:	b3 07       	cpc	r27, r19
    17f4:	e4 07       	cpc	r30, r20
    17f6:	f5 07       	cpc	r31, r21
    17f8:	20 f0       	brcs	.+8      	; 0x1802 <__udivmodsi4_ep>
    17fa:	a2 1b       	sub	r26, r18
    17fc:	b3 0b       	sbc	r27, r19
    17fe:	e4 0b       	sbc	r30, r20
    1800:	f5 0b       	sbc	r31, r21

00001802 <__udivmodsi4_ep>:
    1802:	66 1f       	adc	r22, r22
    1804:	77 1f       	adc	r23, r23
    1806:	88 1f       	adc	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	1a 94       	dec	r1
    180c:	69 f7       	brne	.-38     	; 0x17e8 <__udivmodsi4_loop>
    180e:	60 95       	com	r22
    1810:	70 95       	com	r23
    1812:	80 95       	com	r24
    1814:	90 95       	com	r25
    1816:	9b 01       	movw	r18, r22
    1818:	ac 01       	movw	r20, r24
    181a:	bd 01       	movw	r22, r26
    181c:	cf 01       	movw	r24, r30
    181e:	08 95       	ret

00001820 <__tablejump2__>:
    1820:	ee 0f       	add	r30, r30
    1822:	ff 1f       	adc	r31, r31
    1824:	05 90       	lpm	r0, Z+
    1826:	f4 91       	lpm	r31, Z
    1828:	e0 2d       	mov	r30, r0
    182a:	09 94       	ijmp

0000182c <_exit>:
    182c:	f8 94       	cli

0000182e <__stop_program>:
    182e:	ff cf       	rjmp	.-2      	; 0x182e <__stop_program>
