
CarControlSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  000016b6  0000174a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080009e  0080009e  00001788  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002326  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f97  00000000  00000000  00003d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001535  00000000  00000000  00004cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000061c  00000000  00000000  00006230  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012ea  00000000  00000000  0000684c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001689  00000000  00000000  00007b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000091bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 6b 06 	jmp	0xcd6	; 0xcd6 <__vector_4>
      14:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_5>
      18:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_6>
      1c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__vector_7>
      20:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__vector_8>
      24:	0c 94 d7 05 	jmp	0xbae	; 0xbae <__vector_9>
      28:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__vector_10>
      2c:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	c6 07       	cpc	r28, r22
      56:	d2 07       	cpc	r29, r18
      58:	c9 07       	cpc	r28, r25
      5a:	cc 07       	cpc	r28, r28
      5c:	cf 07       	cpc	r28, r31
      5e:	c6 07       	cpc	r28, r22
      60:	c6 07       	cpc	r28, r22

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e6 eb       	ldi	r30, 0xB6	; 182
      76:	f6 e1       	ldi	r31, 0x16	; 22
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	ae 39       	cpi	r26, 0x9E	; 158
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	ae e9       	ldi	r26, 0x9E	; 158
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a0 3c       	cpi	r26, 0xC0	; 192
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 1c 02 	call	0x438	; 0x438 <main>
      98:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <CarApp_init>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t CarApp_init(void)
{
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      a4:	84 30       	cpi	r24, 0x04	; 4
      a6:	51 f0       	breq	.+20     	; 0xbc <CarApp_init+0x1c>
	{
		return APP_STATUS_INITIALIZED;
	}
	/* Call the initializer in service layer*/
	if(SRVC_STATUS_ERROR_OK != Service_init())
      a8:	0e 94 8d 08 	call	0x111a	; 0x111a <Service_init>
      ac:	81 30       	cpi	r24, 0x01	; 1
      ae:	29 f4       	brne	.+10     	; 0xba <CarApp_init+0x1a>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
      b0:	84 e0       	ldi	r24, 0x04	; 4
      b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	08 95       	ret
		return APP_STATUS_INITIALIZED;
	}
	/* Call the initializer in service layer*/
	if(SRVC_STATUS_ERROR_OK != Service_init())
	{
		return APP_STATUS_ERROR_NOK;
      ba:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
      bc:	08 95       	ret

000000be <CarApp_update>:
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t CarApp_update(void)
{
	/* Get Button Pressed */
	Service_ReportButton(&gu8_buttonPressed);
      be:	8e e9       	ldi	r24, 0x9E	; 158
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 a2 08 	call	0x1144	; 0x1144 <Service_ReportButton>
	if(gu8_buttonPressed == BUTTON_NULL)
      c6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
      ca:	8f 3f       	cpi	r24, 0xFF	; 255
      cc:	11 f4       	brne	.+4      	; 0xd2 <CarApp_update+0x14>
		gu8_buttonPressed = CAR_BUTTONS_IDLE;
      ce:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
	/* Fill the enuCurrentButton according to the button pressed */
	switch (gu8_buttonPressed)
      d2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
      d6:	82 30       	cpi	r24, 0x02	; 2
      d8:	d9 f0       	breq	.+54     	; 0x110 <CarApp_update+0x52>
      da:	30 f4       	brcc	.+12     	; 0xe8 <CarApp_update+0x2a>
      dc:	88 23       	and	r24, r24
      de:	09 f4       	brne	.+2      	; 0xe2 <CarApp_update+0x24>
      e0:	43 c0       	rjmp	.+134    	; 0x168 <CarApp_update+0xaa>
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	31 f0       	breq	.+12     	; 0xf2 <CarApp_update+0x34>
      e6:	4b c0       	rjmp	.+150    	; 0x17e <CarApp_update+0xc0>
      e8:	83 30       	cpi	r24, 0x03	; 3
      ea:	e9 f0       	breq	.+58     	; 0x126 <CarApp_update+0x68>
      ec:	84 30       	cpi	r24, 0x04	; 4
      ee:	31 f1       	breq	.+76     	; 0x13c <CarApp_update+0x7e>
      f0:	46 c0       	rjmp	.+140    	; 0x17e <CarApp_update+0xc0>
	{
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_MOVE_HOLD:
		/* Check if it's already Moving */
		if(enuCurrentButton == CAR_MOVE_HOLD)
      f2:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <enuCurrentButton>
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	09 f4       	brne	.+2      	; 0xfc <CarApp_update+0x3e>
      fa:	41 c0       	rjmp	.+130    	; 0x17e <CarApp_update+0xc0>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_MOVE_HOLD;
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <enuCurrentButton>
		enuCurrentAction = CAR_ACTION_MOVE;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		if (enuCurrentGear == CAR_STATE_IDLE)
     102:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <enuCurrentGear>
     106:	66 23       	and	r22, r22
     108:	d1 f1       	breq	.+116    	; 0x17e <CarApp_update+0xc0>
		{
			break;
		}
		Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)enuCurrentGear);
     10a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Service_UpdateMotors>
		break;
     10e:	37 c0       	rjmp	.+110    	; 0x17e <CarApp_update+0xc0>
		
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_LEFT_HOLD:
		/* Check if it's already Moving Left */
		if(enuCurrentButton == CAR_LEFT_HOLD)
     110:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <enuCurrentButton>
     114:	82 30       	cpi	r24, 0x02	; 2
     116:	99 f1       	breq	.+102    	; 0x17e <CarApp_update+0xc0>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_LEFT_HOLD;
     118:	82 e0       	ldi	r24, 0x02	; 2
     11a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <enuCurrentButton>
		enuCurrentAction = CAR_ACTION_LEFT;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)CAR_STATE_30F);
     11e:	61 e0       	ldi	r22, 0x01	; 1
     120:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Service_UpdateMotors>
		break;
     124:	2c c0       	rjmp	.+88     	; 0x17e <CarApp_update+0xc0>
		
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_RIGHT_HOLD:
		/* Check if it's already Moving Right */
		if(enuCurrentButton == CAR_RIGHT_HOLD)
     126:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <enuCurrentButton>
     12a:	83 30       	cpi	r24, 0x03	; 3
     12c:	41 f1       	breq	.+80     	; 0x17e <CarApp_update+0xc0>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_RIGHT_HOLD;
     12e:	83 e0       	ldi	r24, 0x03	; 3
     130:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <enuCurrentButton>
		enuCurrentAction = CAR_ACTION_RIGHT;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)CAR_STATE_30F);
     134:	61 e0       	ldi	r22, 0x01	; 1
     136:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Service_UpdateMotors>
		break;
     13a:	21 c0       	rjmp	.+66     	; 0x17e <CarApp_update+0xc0>
		
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_GEAR_PRESSED:
		/* Check if it's already Moving Right */
		if(enuCurrentButton == CAR_GEAR_PRESSED)
     13c:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <enuCurrentButton>
     140:	84 30       	cpi	r24, 0x04	; 4
     142:	e9 f0       	breq	.+58     	; 0x17e <CarApp_update+0xc0>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_GEAR_PRESSED;
     144:	84 e0       	ldi	r24, 0x04	; 4
     146:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <enuCurrentButton>
		Dio_togglePin(DIO_LED1_CHANNEL_ID);
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	0e 94 ad 03 	call	0x75a	; 0x75a <Dio_togglePin>
		/* Update flag indicate the hold state and ignore it */
		
		/* Update the enuCurrentGear */
		if(enuCurrentGear != CAR_STATE_30B)
     150:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <enuCurrentGear>
     154:	84 30       	cpi	r24, 0x04	; 4
     156:	21 f0       	breq	.+8      	; 0x160 <CarApp_update+0xa2>
			enuCurrentGear++;
     158:	8f 5f       	subi	r24, 0xFF	; 255
     15a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <enuCurrentGear>
     15e:	0f c0       	rjmp	.+30     	; 0x17e <CarApp_update+0xc0>
		else
			enuCurrentGear = CAR_STATE_30F;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <enuCurrentGear>
     166:	0b c0       	rjmp	.+22     	; 0x17e <CarApp_update+0xc0>
	
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_BUTTONS_IDLE:
		/* Check if it's already Moving Right */
		if(enuCurrentButton == CAR_BUTTONS_IDLE)
     168:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <enuCurrentButton>
     16c:	88 23       	and	r24, r24
     16e:	39 f0       	breq	.+14     	; 0x17e <CarApp_update+0xc0>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_BUTTONS_IDLE;
     170:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <enuCurrentButton>
		enuCurrentAction = CAR_ACTION_STOP;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)enuCurrentGear);
     174:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <enuCurrentGear>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <Service_UpdateMotors>
	}
	/*******************************************************************************/
	/*******************************************************************************/

	return APP_STATUS_ERROR_OK;
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	08 95       	ret

00000182 <CarApp_start>:
* Description: Function to Start the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t CarApp_start(void)
{
	/* Initialize the Car application */
	CarApp_init();
     182:	0e 94 50 00 	call	0xa0	; 0xa0 <CarApp_init>
	EnableGlbl_Interrupt();
     186:	8f b7       	in	r24, 0x3f	; 63
     188:	80 68       	ori	r24, 0x80	; 128
     18a:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the car status */
		CarApp_update();
     18c:	0e 94 5f 00 	call	0xbe	; 0xbe <CarApp_update>
     190:	fd cf       	rjmp	.-6      	; 0x18c <CarApp_start+0xa>

00000192 <Button_init>:
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Button module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_init(void)
{
	Dio_init(strDio_pins);
     192:	81 e6       	ldi	r24, 0x61	; 97
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_init>
	return BTTN_STATUS_ERROR_OK;
}
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	08 95       	ret

0000019e <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if ((BUTTONS_USED_NUM+BUTTON_1_M) <= u8_bttnID)
     19e:	85 30       	cpi	r24, 0x05	; 5
     1a0:	60 f4       	brcc	.+24     	; 0x1ba <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
		}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
     1a2:	61 15       	cp	r22, r1
     1a4:	71 05       	cpc	r23, r1
     1a6:	59 f0       	breq	.+22     	; 0x1be <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
     1a8:	e8 2f       	mov	r30, r24
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	ef 55       	subi	r30, 0x5F	; 95
     1ae:	ff 4f       	sbci	r31, 0xFF	; 255
     1b0:	80 81       	ld	r24, Z
     1b2:	fb 01       	movw	r30, r22
     1b4:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if ((BUTTONS_USED_NUM+BUTTON_1_M) <= u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	08 95       	ret
		}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
     1be:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
     1c0:	08 95       	ret

000001c2 <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
     1c2:	1f 93       	push	r17
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	1f 92       	push	r1
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if ((BUTTONS_USED_NUM+BUTTON_1_M) <= u8_bttnID)
     1ce:	85 30       	cpi	r24, 0x05	; 5
     1d0:	08 f0       	brcs	.+2      	; 0x1d4 <Button_updateState+0x12>
     1d2:	4a c0       	rjmp	.+148    	; 0x268 <Button_updateState+0xa6>
     1d4:	18 2f       	mov	r17, r24
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
     1d6:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	
	/* Read the Pin and put its state in the global variable */
	Dio_readPin(u8_bttnID,&u8_valueTemp);
     1d8:	be 01       	movw	r22, r28
     1da:	6f 5f       	subi	r22, 0xFF	; 255
     1dc:	7f 4f       	sbci	r23, 0xFF	; 255
     1de:	0e 94 05 04 	call	0x80a	; 0x80a <Dio_readPin>
	if(u8_valueTemp == PIN_HIGH)
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	81 30       	cpi	r24, 0x01	; 1
     1e6:	f1 f4       	brne	.+60     	; 0x224 <Button_updateState+0x62>
     1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <Button_updateState+0x32>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
     1ea:	4f 5f       	subi	r20, 0xFF	; 255
     1ec:	5f 4f       	sbci	r21, 0xFF	; 255
     1ee:	6f 4f       	sbci	r22, 0xFF	; 255
     1f0:	7f 4f       	sbci	r23, 0xFF	; 255
     1f2:	03 c0       	rjmp	.+6      	; 0x1fa <Button_updateState+0x38>
     1f4:	40 e0       	ldi	r20, 0x00	; 0
     1f6:	50 e0       	ldi	r21, 0x00	; 0
     1f8:	ba 01       	movw	r22, r20
     1fa:	48 3b       	cpi	r20, 0xB8	; 184
     1fc:	8b e0       	ldi	r24, 0x0B	; 11
     1fe:	58 07       	cpc	r21, r24
     200:	61 05       	cpc	r22, r1
     202:	71 05       	cpc	r23, r1
     204:	90 f3       	brcs	.-28     	; 0x1ea <Button_updateState+0x28>
		/* De bouncing Check */
		Dio_readPin(u8_bttnID,&u8_valueTemp);
     206:	be 01       	movw	r22, r28
     208:	6f 5f       	subi	r22, 0xFF	; 255
     20a:	7f 4f       	sbci	r23, 0xFF	; 255
     20c:	81 2f       	mov	r24, r17
     20e:	0e 94 05 04 	call	0x80a	; 0x80a <Dio_readPin>
		if(u8_valueTemp == PIN_HIGH)
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	51 f5       	brne	.+84     	; 0x26c <Button_updateState+0xaa>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
     218:	e1 2f       	mov	r30, r17
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	ef 55       	subi	r30, 0x5F	; 95
     21e:	ff 4f       	sbci	r31, 0xFF	; 255
     220:	80 83       	st	Z, r24
     222:	27 c0       	rjmp	.+78     	; 0x272 <Button_updateState+0xb0>
	}else if (u8_valueTemp == PIN_LOW)
     224:	88 23       	and	r24, r24
     226:	39 f0       	breq	.+14     	; 0x236 <Button_updateState+0x74>
		/* De bouncing Check */
		Dio_readPin(u8_bttnID,&u8_valueTemp);
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
     228:	81 e0       	ldi	r24, 0x01	; 1
     22a:	23 c0       	rjmp	.+70     	; 0x272 <Button_updateState+0xb0>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
     22c:	4f 5f       	subi	r20, 0xFF	; 255
     22e:	5f 4f       	sbci	r21, 0xFF	; 255
     230:	6f 4f       	sbci	r22, 0xFF	; 255
     232:	7f 4f       	sbci	r23, 0xFF	; 255
     234:	03 c0       	rjmp	.+6      	; 0x23c <Button_updateState+0x7a>
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	ba 01       	movw	r22, r20
     23c:	48 3b       	cpi	r20, 0xB8	; 184
     23e:	8b e0       	ldi	r24, 0x0B	; 11
     240:	58 07       	cpc	r21, r24
     242:	61 05       	cpc	r22, r1
     244:	71 05       	cpc	r23, r1
     246:	90 f3       	brcs	.-28     	; 0x22c <Button_updateState+0x6a>
		/* De bouncing Check */
		Dio_readPin(u8_bttnID,&u8_valueTemp);
     248:	be 01       	movw	r22, r28
     24a:	6f 5f       	subi	r22, 0xFF	; 255
     24c:	7f 4f       	sbci	r23, 0xFF	; 255
     24e:	81 2f       	mov	r24, r17
     250:	0e 94 05 04 	call	0x80a	; 0x80a <Dio_readPin>
		if(u8_valueTemp == PIN_LOW)
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	81 11       	cpse	r24, r1
     258:	0b c0       	rjmp	.+22     	; 0x270 <Button_updateState+0xae>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
     25a:	e1 2f       	mov	r30, r17
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	ef 55       	subi	r30, 0x5F	; 95
     260:	ff 4f       	sbci	r31, 0xFF	; 255
     262:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	05 c0       	rjmp	.+10     	; 0x272 <Button_updateState+0xb0>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if ((BUTTONS_USED_NUM+BUTTON_1_M) <= u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	03 c0       	rjmp	.+6      	; 0x272 <Button_updateState+0xb0>
		/* De bouncing Check */
		Dio_readPin(u8_bttnID,&u8_valueTemp);
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	01 c0       	rjmp	.+2      	; 0x272 <Button_updateState+0xb0>
     270:	81 e0       	ldi	r24, 0x01	; 1
}
     272:	0f 90       	pop	r0
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	1f 91       	pop	r17
     27a:	08 95       	ret

0000027c <Motor_init>:
// 	}else{/*Nothing to here*/}
		
/**************************************************************************************/
/*								End of Error Checking								  */
/**************************************************************************************/
	SWPwm_Init();
     27c:	0e 94 37 07 	call	0xe6e	; 0xe6e <SWPwm_Init>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	return MOTOR_STATUS_ERROR_OK;
}
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	08 95       	ret

00000284 <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	1f 93       	push	r17
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
	/**************************************************************************************/
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
     28e:	82 30       	cpi	r24, 0x02	; 2
     290:	08 f0       	brcs	.+2      	; 0x294 <Motor_run+0x10>
     292:	56 c0       	rjmp	.+172    	; 0x340 <Motor_run+0xbc>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
     294:	65 36       	cpi	r22, 0x65	; 101
     296:	08 f0       	brcs	.+2      	; 0x29a <Motor_run+0x16>
     298:	55 c0       	rjmp	.+170    	; 0x344 <Motor_run+0xc0>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
     29a:	42 30       	cpi	r20, 0x02	; 2
     29c:	08 f0       	brcs	.+2      	; 0x2a0 <Motor_run+0x1c>
     29e:	54 c0       	rjmp	.+168    	; 0x348 <Motor_run+0xc4>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
     2a0:	c8 2f       	mov	r28, r24
     2a2:	d0 e0       	ldi	r29, 0x00	; 0
     2a4:	fe 01       	movw	r30, r28
     2a6:	eb 55       	subi	r30, 0x5B	; 91
     2a8:	ff 4f       	sbci	r31, 0xFF	; 255
     2aa:	80 81       	ld	r24, Z
     2ac:	81 30       	cpi	r24, 0x01	; 1
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <Motor_run+0x2e>
     2b0:	4d c0       	rjmp	.+154    	; 0x34c <Motor_run+0xc8>
     2b2:	16 2f       	mov	r17, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_direction == MOTOR_DIR_CLK_WISE)
     2b4:	41 11       	cpse	r20, r1
     2b6:	16 c0       	rjmp	.+44     	; 0x2e4 <Motor_run+0x60>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
     2b8:	ce 01       	movw	r24, r28
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	8c 0f       	add	r24, r28
     2c4:	9d 1f       	adc	r25, r29
     2c6:	9c 01       	movw	r18, r24
     2c8:	22 57       	subi	r18, 0x72	; 114
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	79 01       	movw	r14, r18
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	f9 01       	movw	r30, r18
     2d2:	81 81       	ldd	r24, Z+1	; 0x01
     2d4:	0e 94 14 03 	call	0x628	; 0x628 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	f7 01       	movw	r30, r14
     2dc:	82 81       	ldd	r24, Z+2	; 0x02
     2de:	0e 94 14 03 	call	0x628	; 0x628 <Dio_writePin>
     2e2:	16 c0       	rjmp	.+44     	; 0x310 <Motor_run+0x8c>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE)
     2e4:	41 30       	cpi	r20, 0x01	; 1
     2e6:	a1 f4       	brne	.+40     	; 0x310 <Motor_run+0x8c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
     2e8:	25 e0       	ldi	r18, 0x05	; 5
     2ea:	2c 9f       	mul	r18, r28
     2ec:	c0 01       	movw	r24, r0
     2ee:	2d 9f       	mul	r18, r29
     2f0:	90 0d       	add	r25, r0
     2f2:	11 24       	eor	r1, r1
     2f4:	9c 01       	movw	r18, r24
     2f6:	22 57       	subi	r18, 0x72	; 114
     2f8:	3f 4f       	sbci	r19, 0xFF	; 255
     2fa:	79 01       	movw	r14, r18
     2fc:	60 e0       	ldi	r22, 0x00	; 0
     2fe:	f9 01       	movw	r30, r18
     300:	81 81       	ldd	r24, Z+1	; 0x01
     302:	0e 94 14 03 	call	0x628	; 0x628 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
     306:	61 e0       	ldi	r22, 0x01	; 1
     308:	f7 01       	movw	r30, r14
     30a:	82 81       	ldd	r24, Z+2	; 0x02
     30c:	0e 94 14 03 	call	0x628	; 0x628 <Dio_writePin>
	}
	
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
     310:	fe 01       	movw	r30, r28
     312:	eb 55       	subi	r30, 0x5B	; 91
     314:	ff 4f       	sbci	r31, 0xFF	; 255
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	80 83       	st	Z, r24
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
     31a:	ce 01       	movw	r24, r28
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	88 0f       	add	r24, r24
     322:	99 1f       	adc	r25, r25
     324:	c8 0f       	add	r28, r24
     326:	d9 1f       	adc	r29, r25
     328:	c2 57       	subi	r28, 0x72	; 114
     32a:	df 4f       	sbci	r29, 0xFF	; 255
     32c:	4b 81       	ldd	r20, Y+3	; 0x03
     32e:	5c 81       	ldd	r21, Y+4	; 0x04
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	21 2f       	mov	r18, r17
     336:	88 81       	ld	r24, Y
     338:	0e 94 3f 07 	call	0xe7e	; 0xe7e <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	07 c0       	rjmp	.+14     	; 0x34e <Motor_run+0xca>
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
     340:	82 e0       	ldi	r24, 0x02	; 2
     342:	05 c0       	rjmp	.+10     	; 0x34e <Motor_run+0xca>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	03 c0       	rjmp	.+6      	; 0x34e <Motor_run+0xca>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	01 c0       	rjmp	.+2      	; 0x34e <Motor_run+0xca>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
     34c:	85 e0       	ldi	r24, 0x05	; 5
	
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	08 95       	ret

0000035a <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
	/**************************************************************************************/
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
     364:	82 30       	cpi	r24, 0x02	; 2
     366:	08 f0       	brcs	.+2      	; 0x36a <Motor_stop+0x10>
     368:	60 c0       	rjmp	.+192    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     36a:	c8 2f       	mov	r28, r24
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
     36c:	08 2f       	mov	r16, r24
     36e:	10 e0       	ldi	r17, 0x00	; 0
     370:	78 01       	movw	r14, r16
     372:	ee 0c       	add	r14, r14
     374:	ff 1c       	adc	r15, r15
     376:	ee 0c       	add	r14, r14
     378:	ff 1c       	adc	r15, r15
     37a:	c7 01       	movw	r24, r14
     37c:	80 0f       	add	r24, r16
     37e:	91 1f       	adc	r25, r17
     380:	9c 01       	movw	r18, r24
     382:	22 57       	subi	r18, 0x72	; 114
     384:	3f 4f       	sbci	r19, 0xFF	; 255
     386:	79 01       	movw	r14, r18
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	f9 01       	movw	r30, r18
     38c:	81 81       	ldd	r24, Z+1	; 0x01
     38e:	0e 94 14 03 	call	0x628	; 0x628 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	f7 01       	movw	r30, r14
     396:	82 81       	ldd	r24, Z+2	; 0x02
     398:	0e 94 14 03 	call	0x628	; 0x628 <Dio_writePin>
	
	uint8_t u8_loopIndex = 0;
	
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
     39c:	e0 e0       	ldi	r30, 0x00	; 0
     39e:	1c c0       	rjmp	.+56     	; 0x3d8 <Motor_stop+0x7e>
	{
		if(u8_loopIndex == u8_motorID)
     3a0:	ec 17       	cp	r30, r28
     3a2:	c9 f0       	breq	.+50     	; 0x3d6 <Motor_stop+0x7c>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
     3a4:	d8 01       	movw	r26, r16
     3a6:	aa 0f       	add	r26, r26
     3a8:	bb 1f       	adc	r27, r27
     3aa:	aa 0f       	add	r26, r26
     3ac:	bb 1f       	adc	r27, r27
     3ae:	a0 0f       	add	r26, r16
     3b0:	b1 1f       	adc	r27, r17
     3b2:	a2 57       	subi	r26, 0x72	; 114
     3b4:	bf 4f       	sbci	r27, 0xFF	; 255
     3b6:	2c 91       	ld	r18, X
     3b8:	8e 2f       	mov	r24, r30
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	dc 01       	movw	r26, r24
     3be:	aa 0f       	add	r26, r26
     3c0:	bb 1f       	adc	r27, r27
     3c2:	aa 0f       	add	r26, r26
     3c4:	bb 1f       	adc	r27, r27
     3c6:	8a 0f       	add	r24, r26
     3c8:	9b 1f       	adc	r25, r27
     3ca:	dc 01       	movw	r26, r24
     3cc:	a2 57       	subi	r26, 0x72	; 114
     3ce:	bf 4f       	sbci	r27, 0xFF	; 255
     3d0:	8c 91       	ld	r24, X
     3d2:	28 17       	cp	r18, r24
     3d4:	19 f0       	breq	.+6      	; 0x3dc <Motor_stop+0x82>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
	
	uint8_t u8_loopIndex = 0;
	
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
     3d6:	ef 5f       	subi	r30, 0xFF	; 255
     3d8:	e2 30       	cpi	r30, 0x02	; 2
     3da:	10 f3       	brcs	.-60     	; 0x3a0 <Motor_stop+0x46>
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
		{
			break;
		}
	}
	if(u8_loopIndex == MOTORS_USED_NUM)
     3dc:	e2 30       	cpi	r30, 0x02	; 2
     3de:	69 f4       	brne	.+26     	; 0x3fa <Motor_stop+0xa0>
	{
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
     3e0:	f8 01       	movw	r30, r16
     3e2:	ee 0f       	add	r30, r30
     3e4:	ff 1f       	adc	r31, r31
     3e6:	ee 0f       	add	r30, r30
     3e8:	ff 1f       	adc	r31, r31
     3ea:	e0 0f       	add	r30, r16
     3ec:	f1 1f       	adc	r31, r17
     3ee:	e2 57       	subi	r30, 0x72	; 114
     3f0:	ff 4f       	sbci	r31, 0xFF	; 255
     3f2:	80 81       	ld	r24, Z
     3f4:	0e 94 4f 08 	call	0x109e	; 0x109e <SWPwm_Stop>
     3f8:	12 c0       	rjmp	.+36     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	}else
	{
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED)
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	eb 55       	subi	r30, 0x5B	; 91
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	80 81       	ld	r24, Z
     402:	81 11       	cpse	r24, r1
     404:	0c c0       	rjmp	.+24     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		{
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
     406:	f8 01       	movw	r30, r16
     408:	ee 0f       	add	r30, r30
     40a:	ff 1f       	adc	r31, r31
     40c:	ee 0f       	add	r30, r30
     40e:	ff 1f       	adc	r31, r31
     410:	e0 0f       	add	r30, r16
     412:	f1 1f       	adc	r31, r17
     414:	e2 57       	subi	r30, 0x72	; 114
     416:	ff 4f       	sbci	r31, 0xFF	; 255
     418:	80 81       	ld	r24, Z
     41a:	0e 94 4f 08 	call	0x109e	; 0x109e <SWPwm_Stop>
		} 
	}
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
     41e:	f8 01       	movw	r30, r16
     420:	eb 55       	subi	r30, 0x5B	; 91
     422:	ff 4f       	sbci	r31, 0xFF	; 255
     424:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	01 c0       	rjmp	.+2      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
     42a:	82 e0       	ldi	r24, 0x02	; 2
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
		} 
	}
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	08 95       	ret

00000438 <main>:
#include "App Layer/App.h"

int main(void)
{
	
	CarApp_start();
     438:	0e 94 c1 00 	call	0x182	; 0x182 <CarApp_start>
     43c:	ff cf       	rjmp	.-2      	; 0x43c <main+0x4>

0000043e <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
     43e:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
     440:	89 2b       	or	r24, r25
     442:	09 f4       	brne	.+2      	; 0x446 <Dio_init+0x8>
     444:	e9 c0       	rjmp	.+466    	; 0x618 <Dio_init+0x1da>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	/*-* check if the Dio is already initialized *-*/
	if (DIO_INITIALIZED == u8_Dio_Status)
     446:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <u8_Dio_Status>
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	09 f4       	brne	.+2      	; 0x450 <Dio_init+0x12>
     44e:	e6 c0       	rjmp	.+460    	; 0x61c <Dio_init+0x1de>
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	d7 c0       	rjmp	.+430    	; 0x602 <Dio_init+0x1c4>
	{
		return DIO_STATUS_ALREADY_INIT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
     454:	e9 2f       	mov	r30, r25
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	ee 0f       	add	r30, r30
     45a:	ff 1f       	adc	r31, r31
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	e4 0f       	add	r30, r20
     462:	f5 1f       	adc	r31, r21
     464:	31 81       	ldd	r19, Z+1	; 0x01
     466:	38 30       	cpi	r19, 0x08	; 8
     468:	08 f0       	brcs	.+2      	; 0x46c <Dio_init+0x2e>
     46a:	da c0       	rjmp	.+436    	; 0x620 <Dio_init+0x1e2>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
     46c:	20 81       	ld	r18, Z
     46e:	21 30       	cpi	r18, 0x01	; 1
     470:	c1 f1       	breq	.+112    	; 0x4e2 <Dio_init+0xa4>
     472:	38 f0       	brcs	.+14     	; 0x482 <Dio_init+0x44>
     474:	22 30       	cpi	r18, 0x02	; 2
     476:	09 f4       	brne	.+2      	; 0x47a <Dio_init+0x3c>
     478:	64 c0       	rjmp	.+200    	; 0x542 <Dio_init+0x104>
     47a:	23 30       	cpi	r18, 0x03	; 3
     47c:	09 f4       	brne	.+2      	; 0x480 <Dio_init+0x42>
     47e:	91 c0       	rjmp	.+290    	; 0x5a2 <Dio_init+0x164>
     480:	d1 c0       	rjmp	.+418    	; 0x624 <Dio_init+0x1e6>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     482:	2a b3       	in	r18, 0x1a	; 26
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	db 01       	movw	r26, r22
     48a:	02 c0       	rjmp	.+4      	; 0x490 <Dio_init+0x52>
     48c:	aa 0f       	add	r26, r26
     48e:	bb 1f       	adc	r27, r27
     490:	3a 95       	dec	r19
     492:	e2 f7       	brpl	.-8      	; 0x48c <Dio_init+0x4e>
     494:	8a 2f       	mov	r24, r26
     496:	80 95       	com	r24
     498:	82 23       	and	r24, r18
     49a:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     49c:	aa b3       	in	r26, 0x1a	; 26
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	28 2f       	mov	r18, r24
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	01 80       	ldd	r0, Z+1	; 0x01
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <Dio_init+0x6e>
     4a8:	22 0f       	add	r18, r18
     4aa:	33 1f       	adc	r19, r19
     4ac:	0a 94       	dec	r0
     4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <Dio_init+0x6a>
     4b0:	2a 2b       	or	r18, r26
     4b2:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     4b4:	8b b3       	in	r24, 0x1b	; 27
     4b6:	01 80       	ldd	r0, Z+1	; 0x01
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <Dio_init+0x80>
     4ba:	66 0f       	add	r22, r22
     4bc:	77 1f       	adc	r23, r23
     4be:	0a 94       	dec	r0
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <Dio_init+0x7c>
     4c2:	60 95       	com	r22
     4c4:	68 23       	and	r22, r24
     4c6:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     4c8:	6b b3       	in	r22, 0x1b	; 27
     4ca:	83 81       	ldd	r24, Z+3	; 0x03
     4cc:	28 2f       	mov	r18, r24
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	01 80       	ldd	r0, Z+1	; 0x01
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <Dio_init+0x9a>
     4d4:	22 0f       	add	r18, r18
     4d6:	33 1f       	adc	r19, r19
     4d8:	0a 94       	dec	r0
     4da:	e2 f7       	brpl	.-8      	; 0x4d4 <Dio_init+0x96>
     4dc:	26 2b       	or	r18, r22
     4de:	2b bb       	out	0x1b, r18	; 27
				break;
     4e0:	8f c0       	rjmp	.+286    	; 0x600 <Dio_init+0x1c2>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     4e2:	27 b3       	in	r18, 0x17	; 23
     4e4:	61 e0       	ldi	r22, 0x01	; 1
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	db 01       	movw	r26, r22
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <Dio_init+0xb2>
     4ec:	aa 0f       	add	r26, r26
     4ee:	bb 1f       	adc	r27, r27
     4f0:	3a 95       	dec	r19
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <Dio_init+0xae>
     4f4:	8a 2f       	mov	r24, r26
     4f6:	80 95       	com	r24
     4f8:	82 23       	and	r24, r18
     4fa:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     4fc:	a7 b3       	in	r26, 0x17	; 23
     4fe:	82 81       	ldd	r24, Z+2	; 0x02
     500:	28 2f       	mov	r18, r24
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	01 80       	ldd	r0, Z+1	; 0x01
     506:	02 c0       	rjmp	.+4      	; 0x50c <Dio_init+0xce>
     508:	22 0f       	add	r18, r18
     50a:	33 1f       	adc	r19, r19
     50c:	0a 94       	dec	r0
     50e:	e2 f7       	brpl	.-8      	; 0x508 <Dio_init+0xca>
     510:	2a 2b       	or	r18, r26
     512:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     514:	88 b3       	in	r24, 0x18	; 24
     516:	01 80       	ldd	r0, Z+1	; 0x01
     518:	02 c0       	rjmp	.+4      	; 0x51e <Dio_init+0xe0>
     51a:	66 0f       	add	r22, r22
     51c:	77 1f       	adc	r23, r23
     51e:	0a 94       	dec	r0
     520:	e2 f7       	brpl	.-8      	; 0x51a <Dio_init+0xdc>
     522:	60 95       	com	r22
     524:	68 23       	and	r22, r24
     526:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     528:	68 b3       	in	r22, 0x18	; 24
     52a:	83 81       	ldd	r24, Z+3	; 0x03
     52c:	28 2f       	mov	r18, r24
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	01 80       	ldd	r0, Z+1	; 0x01
     532:	02 c0       	rjmp	.+4      	; 0x538 <Dio_init+0xfa>
     534:	22 0f       	add	r18, r18
     536:	33 1f       	adc	r19, r19
     538:	0a 94       	dec	r0
     53a:	e2 f7       	brpl	.-8      	; 0x534 <Dio_init+0xf6>
     53c:	26 2b       	or	r18, r22
     53e:	28 bb       	out	0x18, r18	; 24
				break;
     540:	5f c0       	rjmp	.+190    	; 0x600 <Dio_init+0x1c2>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     542:	24 b3       	in	r18, 0x14	; 20
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	db 01       	movw	r26, r22
     54a:	02 c0       	rjmp	.+4      	; 0x550 <Dio_init+0x112>
     54c:	aa 0f       	add	r26, r26
     54e:	bb 1f       	adc	r27, r27
     550:	3a 95       	dec	r19
     552:	e2 f7       	brpl	.-8      	; 0x54c <Dio_init+0x10e>
     554:	8a 2f       	mov	r24, r26
     556:	80 95       	com	r24
     558:	82 23       	and	r24, r18
     55a:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     55c:	a4 b3       	in	r26, 0x14	; 20
     55e:	82 81       	ldd	r24, Z+2	; 0x02
     560:	28 2f       	mov	r18, r24
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	01 80       	ldd	r0, Z+1	; 0x01
     566:	02 c0       	rjmp	.+4      	; 0x56c <Dio_init+0x12e>
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	0a 94       	dec	r0
     56e:	e2 f7       	brpl	.-8      	; 0x568 <Dio_init+0x12a>
     570:	2a 2b       	or	r18, r26
     572:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     574:	85 b3       	in	r24, 0x15	; 21
     576:	01 80       	ldd	r0, Z+1	; 0x01
     578:	02 c0       	rjmp	.+4      	; 0x57e <Dio_init+0x140>
     57a:	66 0f       	add	r22, r22
     57c:	77 1f       	adc	r23, r23
     57e:	0a 94       	dec	r0
     580:	e2 f7       	brpl	.-8      	; 0x57a <Dio_init+0x13c>
     582:	60 95       	com	r22
     584:	68 23       	and	r22, r24
     586:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     588:	65 b3       	in	r22, 0x15	; 21
     58a:	83 81       	ldd	r24, Z+3	; 0x03
     58c:	28 2f       	mov	r18, r24
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	01 80       	ldd	r0, Z+1	; 0x01
     592:	02 c0       	rjmp	.+4      	; 0x598 <Dio_init+0x15a>
     594:	22 0f       	add	r18, r18
     596:	33 1f       	adc	r19, r19
     598:	0a 94       	dec	r0
     59a:	e2 f7       	brpl	.-8      	; 0x594 <Dio_init+0x156>
     59c:	26 2b       	or	r18, r22
     59e:	25 bb       	out	0x15, r18	; 21
				break;
     5a0:	2f c0       	rjmp	.+94     	; 0x600 <Dio_init+0x1c2>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     5a2:	21 b3       	in	r18, 0x11	; 17
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	db 01       	movw	r26, r22
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <Dio_init+0x172>
     5ac:	aa 0f       	add	r26, r26
     5ae:	bb 1f       	adc	r27, r27
     5b0:	3a 95       	dec	r19
     5b2:	e2 f7       	brpl	.-8      	; 0x5ac <Dio_init+0x16e>
     5b4:	8a 2f       	mov	r24, r26
     5b6:	80 95       	com	r24
     5b8:	82 23       	and	r24, r18
     5ba:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     5bc:	a1 b3       	in	r26, 0x11	; 17
     5be:	82 81       	ldd	r24, Z+2	; 0x02
     5c0:	28 2f       	mov	r18, r24
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	01 80       	ldd	r0, Z+1	; 0x01
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <Dio_init+0x18e>
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	0a 94       	dec	r0
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <Dio_init+0x18a>
     5d0:	2a 2b       	or	r18, r26
     5d2:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     5d4:	82 b3       	in	r24, 0x12	; 18
     5d6:	01 80       	ldd	r0, Z+1	; 0x01
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <Dio_init+0x1a0>
     5da:	66 0f       	add	r22, r22
     5dc:	77 1f       	adc	r23, r23
     5de:	0a 94       	dec	r0
     5e0:	e2 f7       	brpl	.-8      	; 0x5da <Dio_init+0x19c>
     5e2:	60 95       	com	r22
     5e4:	68 23       	and	r22, r24
     5e6:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     5e8:	62 b3       	in	r22, 0x12	; 18
     5ea:	83 81       	ldd	r24, Z+3	; 0x03
     5ec:	28 2f       	mov	r18, r24
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	01 80       	ldd	r0, Z+1	; 0x01
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <Dio_init+0x1ba>
     5f4:	22 0f       	add	r18, r18
     5f6:	33 1f       	adc	r19, r19
     5f8:	0a 94       	dec	r0
     5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <Dio_init+0x1b6>
     5fc:	26 2b       	or	r18, r22
     5fe:	22 bb       	out	0x12, r18	; 18
	/*-* check if the Dio is already initialized *-*/
	if (DIO_INITIALIZED == u8_Dio_Status)
	{
		return DIO_STATUS_ALREADY_INIT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
     600:	9f 5f       	subi	r25, 0xFF	; 255
     602:	9a 30       	cpi	r25, 0x0A	; 10
     604:	08 f4       	brcc	.+2      	; 0x608 <Dio_init+0x1ca>
     606:	26 cf       	rjmp	.-436    	; 0x454 <Dio_init+0x16>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
     608:	50 93 a9 00 	sts	0x00A9, r21	; 0x8000a9 <pstrDio_pinsConfig+0x1>
     60c:	40 93 a8 00 	sts	0x00A8, r20	; 0x8000a8 <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
     616:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
     618:	85 e0       	ldi	r24, 0x05	; 5
     61a:	08 95       	ret
	}
	/*-* check if the Dio is already initialized *-*/
	if (DIO_INITIALIZED == u8_Dio_Status)
	{
		return DIO_STATUS_ALREADY_INIT;
     61c:	87 e0       	ldi	r24, 0x07	; 7
     61e:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
     624:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
     626:	08 95       	ret

00000628 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     628:	8b 30       	cpi	r24, 0x0B	; 11
     62a:	08 f0       	brcs	.+2      	; 0x62e <Dio_writePin+0x6>
     62c:	90 c0       	rjmp	.+288    	; 0x74e <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     62e:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <u8_Dio_Status>
     632:	99 23       	and	r25, r25
     634:	09 f4       	brne	.+2      	; 0x638 <Dio_writePin+0x10>
     636:	8d c0       	rjmp	.+282    	; 0x752 <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     638:	e8 2f       	mov	r30, r24
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	cf 01       	movw	r24, r30
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <pstrDio_pinsConfig>
     64a:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <pstrDio_pinsConfig+0x1>
     64e:	e8 0f       	add	r30, r24
     650:	f9 1f       	adc	r31, r25
     652:	80 81       	ld	r24, Z
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	21 f1       	breq	.+72     	; 0x6a0 <Dio_writePin+0x78>
     658:	30 f0       	brcs	.+12     	; 0x666 <Dio_writePin+0x3e>
     65a:	82 30       	cpi	r24, 0x02	; 2
     65c:	f1 f1       	breq	.+124    	; 0x6da <Dio_writePin+0xb2>
     65e:	83 30       	cpi	r24, 0x03	; 3
     660:	09 f4       	brne	.+2      	; 0x664 <Dio_writePin+0x3c>
     662:	58 c0       	rjmp	.+176    	; 0x714 <Dio_writePin+0xec>
     664:	78 c0       	rjmp	.+240    	; 0x756 <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
     666:	61 30       	cpi	r22, 0x01	; 1
     668:	69 f4       	brne	.+26     	; 0x684 <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     66a:	2b b3       	in	r18, 0x1b	; 27
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	01 80       	ldd	r0, Z+1	; 0x01
     672:	02 c0       	rjmp	.+4      	; 0x678 <Dio_writePin+0x50>
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	0a 94       	dec	r0
     67a:	e2 f7       	brpl	.-8      	; 0x674 <Dio_writePin+0x4c>
     67c:	82 2b       	or	r24, r18
     67e:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     684:	2b b3       	in	r18, 0x1b	; 27
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	01 80       	ldd	r0, Z+1	; 0x01
     68c:	02 c0       	rjmp	.+4      	; 0x692 <Dio_writePin+0x6a>
     68e:	88 0f       	add	r24, r24
     690:	99 1f       	adc	r25, r25
     692:	0a 94       	dec	r0
     694:	e2 f7       	brpl	.-8      	; 0x68e <Dio_writePin+0x66>
     696:	80 95       	com	r24
     698:	82 23       	and	r24, r18
     69a:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
     6a0:	61 30       	cpi	r22, 0x01	; 1
     6a2:	69 f4       	brne	.+26     	; 0x6be <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     6a4:	28 b3       	in	r18, 0x18	; 24
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	01 80       	ldd	r0, Z+1	; 0x01
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <Dio_writePin+0x8a>
     6ae:	88 0f       	add	r24, r24
     6b0:	99 1f       	adc	r25, r25
     6b2:	0a 94       	dec	r0
     6b4:	e2 f7       	brpl	.-8      	; 0x6ae <Dio_writePin+0x86>
     6b6:	82 2b       	or	r24, r18
     6b8:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     6be:	28 b3       	in	r18, 0x18	; 24
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	01 80       	ldd	r0, Z+1	; 0x01
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <Dio_writePin+0xa4>
     6c8:	88 0f       	add	r24, r24
     6ca:	99 1f       	adc	r25, r25
     6cc:	0a 94       	dec	r0
     6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <Dio_writePin+0xa0>
     6d0:	80 95       	com	r24
     6d2:	82 23       	and	r24, r18
     6d4:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
     6da:	61 30       	cpi	r22, 0x01	; 1
     6dc:	69 f4       	brne	.+26     	; 0x6f8 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     6de:	25 b3       	in	r18, 0x15	; 21
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	01 80       	ldd	r0, Z+1	; 0x01
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <Dio_writePin+0xc4>
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	0a 94       	dec	r0
     6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <Dio_writePin+0xc0>
     6f0:	82 2b       	or	r24, r18
     6f2:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     6f8:	25 b3       	in	r18, 0x15	; 21
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	01 80       	ldd	r0, Z+1	; 0x01
     700:	02 c0       	rjmp	.+4      	; 0x706 <Dio_writePin+0xde>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	0a 94       	dec	r0
     708:	e2 f7       	brpl	.-8      	; 0x702 <Dio_writePin+0xda>
     70a:	80 95       	com	r24
     70c:	82 23       	and	r24, r18
     70e:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
     714:	61 30       	cpi	r22, 0x01	; 1
     716:	69 f4       	brne	.+26     	; 0x732 <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     718:	22 b3       	in	r18, 0x12	; 18
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	01 80       	ldd	r0, Z+1	; 0x01
     720:	02 c0       	rjmp	.+4      	; 0x726 <Dio_writePin+0xfe>
     722:	88 0f       	add	r24, r24
     724:	99 1f       	adc	r25, r25
     726:	0a 94       	dec	r0
     728:	e2 f7       	brpl	.-8      	; 0x722 <Dio_writePin+0xfa>
     72a:	82 2b       	or	r24, r18
     72c:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     732:	22 b3       	in	r18, 0x12	; 18
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	01 80       	ldd	r0, Z+1	; 0x01
     73a:	02 c0       	rjmp	.+4      	; 0x740 <Dio_writePin+0x118>
     73c:	88 0f       	add	r24, r24
     73e:	99 1f       	adc	r25, r25
     740:	0a 94       	dec	r0
     742:	e2 f7       	brpl	.-8      	; 0x73c <Dio_writePin+0x114>
     744:	80 95       	com	r24
     746:	82 23       	and	r24, r18
     748:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     752:	86 e0       	ldi	r24, 0x06	; 6
     754:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     756:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
     758:	08 95       	ret

0000075a <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     75a:	8b 30       	cpi	r24, 0x0B	; 11
     75c:	08 f0       	brcs	.+2      	; 0x760 <Dio_togglePin+0x6>
     75e:	4f c0       	rjmp	.+158    	; 0x7fe <Dio_togglePin+0xa4>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     760:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <u8_Dio_Status>
     764:	99 23       	and	r25, r25
     766:	09 f4       	brne	.+2      	; 0x76a <Dio_togglePin+0x10>
     768:	4c c0       	rjmp	.+152    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     76a:	e8 2f       	mov	r30, r24
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	cf 01       	movw	r24, r30
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <pstrDio_pinsConfig>
     77c:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <pstrDio_pinsConfig+0x1>
     780:	e8 0f       	add	r30, r24
     782:	f9 1f       	adc	r31, r25
     784:	80 81       	ld	r24, Z
     786:	81 30       	cpi	r24, 0x01	; 1
     788:	99 f0       	breq	.+38     	; 0x7b0 <Dio_togglePin+0x56>
     78a:	28 f0       	brcs	.+10     	; 0x796 <Dio_togglePin+0x3c>
     78c:	82 30       	cpi	r24, 0x02	; 2
     78e:	e9 f0       	breq	.+58     	; 0x7ca <Dio_togglePin+0x70>
     790:	83 30       	cpi	r24, 0x03	; 3
     792:	41 f1       	breq	.+80     	; 0x7e4 <Dio_togglePin+0x8a>
     794:	38 c0       	rjmp	.+112    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     796:	2b b3       	in	r18, 0x1b	; 27
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	01 80       	ldd	r0, Z+1	; 0x01
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <Dio_togglePin+0x4a>
     7a0:	88 0f       	add	r24, r24
     7a2:	99 1f       	adc	r25, r25
     7a4:	0a 94       	dec	r0
     7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <Dio_togglePin+0x46>
     7a8:	82 27       	eor	r24, r18
     7aa:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     7ae:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     7b0:	28 b3       	in	r18, 0x18	; 24
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	01 80       	ldd	r0, Z+1	; 0x01
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <Dio_togglePin+0x64>
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	0a 94       	dec	r0
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <Dio_togglePin+0x60>
     7c2:	82 27       	eor	r24, r18
     7c4:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     7c6:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     7c8:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     7ca:	25 b3       	in	r18, 0x15	; 21
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	01 80       	ldd	r0, Z+1	; 0x01
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <Dio_togglePin+0x7e>
     7d4:	88 0f       	add	r24, r24
     7d6:	99 1f       	adc	r25, r25
     7d8:	0a 94       	dec	r0
     7da:	e2 f7       	brpl	.-8      	; 0x7d4 <Dio_togglePin+0x7a>
     7dc:	82 27       	eor	r24, r18
     7de:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     7e0:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     7e2:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     7e4:	22 b3       	in	r18, 0x12	; 18
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	01 80       	ldd	r0, Z+1	; 0x01
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <Dio_togglePin+0x98>
     7ee:	88 0f       	add	r24, r24
     7f0:	99 1f       	adc	r25, r25
     7f2:	0a 94       	dec	r0
     7f4:	e2 f7       	brpl	.-8      	; 0x7ee <Dio_togglePin+0x94>
     7f6:	82 27       	eor	r24, r18
     7f8:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     7fa:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     7fc:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     802:	86 e0       	ldi	r24, 0x06	; 6
     804:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     806:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
     808:	08 95       	ret

0000080a <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     80a:	8b 30       	cpi	r24, 0x0B	; 11
     80c:	08 f0       	brcs	.+2      	; 0x810 <Dio_readPin+0x6>
     80e:	7c c0       	rjmp	.+248    	; 0x908 <__stack+0xa9>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     810:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <u8_Dio_Status>
     814:	99 23       	and	r25, r25
     816:	09 f4       	brne	.+2      	; 0x81a <Dio_readPin+0x10>
     818:	79 c0       	rjmp	.+242    	; 0x90c <__stack+0xad>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     81a:	e8 2f       	mov	r30, r24
     81c:	f0 e0       	ldi	r31, 0x00	; 0
     81e:	cf 01       	movw	r24, r30
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <pstrDio_pinsConfig>
     82c:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <pstrDio_pinsConfig+0x1>
     830:	e8 0f       	add	r30, r24
     832:	f9 1f       	adc	r31, r25
     834:	80 81       	ld	r24, Z
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	f9 f0       	breq	.+62     	; 0x878 <__stack+0x19>
     83a:	30 f0       	brcs	.+12     	; 0x848 <Dio_readPin+0x3e>
     83c:	82 30       	cpi	r24, 0x02	; 2
     83e:	a1 f1       	breq	.+104    	; 0x8a8 <__stack+0x49>
     840:	83 30       	cpi	r24, 0x03	; 3
     842:	09 f4       	brne	.+2      	; 0x846 <Dio_readPin+0x3c>
     844:	49 c0       	rjmp	.+146    	; 0x8d8 <__stack+0x79>
     846:	64 c0       	rjmp	.+200    	; 0x910 <__stack+0xb1>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     848:	49 b3       	in	r20, 0x19	; 25
     84a:	51 81       	ldd	r21, Z+1	; 0x01
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	9c 01       	movw	r18, r24
     852:	05 2e       	mov	r0, r21
     854:	02 c0       	rjmp	.+4      	; 0x85a <Dio_readPin+0x50>
     856:	22 0f       	add	r18, r18
     858:	33 1f       	adc	r19, r19
     85a:	0a 94       	dec	r0
     85c:	e2 f7       	brpl	.-8      	; 0x856 <Dio_readPin+0x4c>
     85e:	84 2f       	mov	r24, r20
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	82 23       	and	r24, r18
     864:	93 23       	and	r25, r19
     866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
     868:	95 95       	asr	r25
     86a:	87 95       	ror	r24
     86c:	5a 95       	dec	r21
     86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
     870:	fb 01       	movw	r30, r22
     872:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     874:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     876:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     878:	46 b3       	in	r20, 0x16	; 22
     87a:	51 81       	ldd	r21, Z+1	; 0x01
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	9c 01       	movw	r18, r24
     882:	05 2e       	mov	r0, r21
     884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
     886:	22 0f       	add	r18, r18
     888:	33 1f       	adc	r19, r19
     88a:	0a 94       	dec	r0
     88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
     88e:	84 2f       	mov	r24, r20
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	82 23       	and	r24, r18
     894:	93 23       	and	r25, r19
     896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
     898:	95 95       	asr	r25
     89a:	87 95       	ror	r24
     89c:	5a 95       	dec	r21
     89e:	e2 f7       	brpl	.-8      	; 0x898 <__stack+0x39>
     8a0:	fb 01       	movw	r30, r22
     8a2:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     8a6:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     8a8:	43 b3       	in	r20, 0x13	; 19
     8aa:	51 81       	ldd	r21, Z+1	; 0x01
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	9c 01       	movw	r18, r24
     8b2:	05 2e       	mov	r0, r21
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
     8b6:	22 0f       	add	r18, r18
     8b8:	33 1f       	adc	r19, r19
     8ba:	0a 94       	dec	r0
     8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__stack+0x57>
     8be:	84 2f       	mov	r24, r20
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	82 23       	and	r24, r18
     8c4:	93 23       	and	r25, r19
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
     8c8:	95 95       	asr	r25
     8ca:	87 95       	ror	r24
     8cc:	5a 95       	dec	r21
     8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
     8d0:	fb 01       	movw	r30, r22
     8d2:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     8d6:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     8d8:	40 b3       	in	r20, 0x10	; 16
     8da:	51 81       	ldd	r21, Z+1	; 0x01
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	9c 01       	movw	r18, r24
     8e2:	05 2e       	mov	r0, r21
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x8b>
     8e6:	22 0f       	add	r18, r18
     8e8:	33 1f       	adc	r19, r19
     8ea:	0a 94       	dec	r0
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <__stack+0x87>
     8ee:	84 2f       	mov	r24, r20
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	82 23       	and	r24, r18
     8f4:	93 23       	and	r25, r19
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <__stack+0x9d>
     8f8:	95 95       	asr	r25
     8fa:	87 95       	ror	r24
     8fc:	5a 95       	dec	r21
     8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <__stack+0x99>
     900:	fb 01       	movw	r30, r22
     902:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     904:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     906:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     90c:	86 e0       	ldi	r24, 0x06	; 6
     90e:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     910:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
     912:	08 95       	ret

00000914 <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e c0       	rjmp	.+28     	; 0x934 <Gpt_ISRHandler+0x20>
     918:	29 2f       	mov	r18, r25
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	f9 01       	movw	r30, r18
     91e:	ee 0f       	add	r30, r30
     920:	ff 1f       	adc	r31, r31
     922:	2e 0f       	add	r18, r30
     924:	3f 1f       	adc	r19, r31
     926:	f9 01       	movw	r30, r18
     928:	e8 56       	subi	r30, 0x68	; 104
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	20 81       	ld	r18, Z
     92e:	28 17       	cp	r18, r24
     930:	19 f0       	breq	.+6      	; 0x938 <Gpt_ISRHandler+0x24>
     932:	9f 5f       	subi	r25, 0xFF	; 255
     934:	99 23       	and	r25, r25
     936:	81 f3       	breq	.-32     	; 0x918 <Gpt_ISRHandler+0x4>
     938:	89 2f       	mov	r24, r25
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	fc 01       	movw	r30, r24
     93e:	ee 0f       	add	r30, r30
     940:	ff 1f       	adc	r31, r31
     942:	ee 0f       	add	r30, r30
     944:	ff 1f       	adc	r31, r31
     946:	e6 55       	subi	r30, 0x56	; 86
     948:	ff 4f       	sbci	r31, 0xFF	; 255
     94a:	40 81       	ld	r20, Z
     94c:	51 81       	ldd	r21, Z+1	; 0x01
     94e:	62 81       	ldd	r22, Z+2	; 0x02
     950:	73 81       	ldd	r23, Z+3	; 0x03
     952:	41 15       	cp	r20, r1
     954:	51 05       	cpc	r21, r1
     956:	61 05       	cpc	r22, r1
     958:	71 05       	cpc	r23, r1
     95a:	81 f0       	breq	.+32     	; 0x97c <Gpt_ISRHandler+0x68>
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	fc 01       	movw	r30, r24
     966:	e6 55       	subi	r30, 0x56	; 86
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	41 50       	subi	r20, 0x01	; 1
     96c:	51 09       	sbc	r21, r1
     96e:	61 09       	sbc	r22, r1
     970:	71 09       	sbc	r23, r1
     972:	40 83       	st	Z, r20
     974:	51 83       	std	Z+1, r21	; 0x01
     976:	62 83       	std	Z+2, r22	; 0x02
     978:	73 83       	std	Z+3, r23	; 0x03
     97a:	08 95       	ret
     97c:	23 b7       	in	r18, 0x33	; 51
     97e:	2e 7f       	andi	r18, 0xFE	; 254
     980:	23 bf       	out	0x33, r18	; 51
     982:	23 b7       	in	r18, 0x33	; 51
     984:	2d 7f       	andi	r18, 0xFD	; 253
     986:	23 bf       	out	0x33, r18	; 51
     988:	23 b7       	in	r18, 0x33	; 51
     98a:	2b 7f       	andi	r18, 0xFB	; 251
     98c:	23 bf       	out	0x33, r18	; 51
     98e:	29 b7       	in	r18, 0x39	; 57
     990:	2e 7f       	andi	r18, 0xFE	; 254
     992:	29 bf       	out	0x39, r18	; 57
     994:	fc 01       	movw	r30, r24
     996:	e2 55       	subi	r30, 0x52	; 82
     998:	ff 4f       	sbci	r31, 0xFF	; 255
     99a:	24 e0       	ldi	r18, 0x04	; 4
     99c:	20 83       	st	Z, r18
     99e:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <Gpt_Timer0_CallBackPtr>
     9a2:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <Gpt_Timer0_CallBackPtr+0x1>
     9a6:	09 95       	icall
     9a8:	08 95       	ret

000009aa <GptInit>:
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	24 c0       	rjmp	.+72     	; 0x9f6 <GptInit+0x4c>
     9ae:	82 2f       	mov	r24, r18
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	fc 01       	movw	r30, r24
     9b4:	ee 0f       	add	r30, r30
     9b6:	ff 1f       	adc	r31, r31
     9b8:	e8 0f       	add	r30, r24
     9ba:	f9 1f       	adc	r31, r25
     9bc:	e8 56       	subi	r30, 0x68	; 104
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	30 81       	ld	r19, Z
     9c2:	33 23       	and	r19, r19
     9c4:	19 f0       	breq	.+6      	; 0x9cc <GptInit+0x22>
     9c6:	33 30       	cpi	r19, 0x03	; 3
     9c8:	d0 f4       	brcc	.+52     	; 0x9fe <GptInit+0x54>
     9ca:	0f c0       	rjmp	.+30     	; 0x9ea <GptInit+0x40>
     9cc:	fc 01       	movw	r30, r24
     9ce:	ee 0f       	add	r30, r30
     9d0:	ff 1f       	adc	r31, r31
     9d2:	e8 0f       	add	r30, r24
     9d4:	f9 1f       	adc	r31, r25
     9d6:	e8 56       	subi	r30, 0x68	; 104
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	32 81       	ldd	r19, Z+2	; 0x02
     9dc:	31 11       	cpse	r19, r1
     9de:	05 c0       	rjmp	.+10     	; 0x9ea <GptInit+0x40>
     9e0:	13 be       	out	0x33, r1	; 51
     9e2:	39 b7       	in	r19, 0x39	; 57
     9e4:	3c 7f       	andi	r19, 0xFC	; 252
     9e6:	39 bf       	out	0x39, r19	; 57
     9e8:	12 be       	out	0x32, r1	; 50
     9ea:	fc 01       	movw	r30, r24
     9ec:	e2 55       	subi	r30, 0x52	; 82
     9ee:	ff 4f       	sbci	r31, 0xFF	; 255
     9f0:	31 e0       	ldi	r19, 0x01	; 1
     9f2:	30 83       	st	Z, r19
     9f4:	2f 5f       	subi	r18, 0xFF	; 255
     9f6:	22 23       	and	r18, r18
     9f8:	d1 f2       	breq	.-76     	; 0x9ae <GptInit+0x4>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	08 95       	ret
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	08 95       	ret

00000a02 <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
     a0c:	81 11       	cpse	r24, r1
     a0e:	4a c0       	rjmp	.+148    	; 0xaa4 <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
     a10:	c8 2f       	mov	r28, r24
     a12:	d0 e0       	ldi	r29, 0x00	; 0
     a14:	fe 01       	movw	r30, r28
     a16:	e2 55       	subi	r30, 0x52	; 82
     a18:	ff 4f       	sbci	r31, 0xFF	; 255
     a1a:	80 81       	ld	r24, Z
     a1c:	88 23       	and	r24, r24
     a1e:	09 f4       	brne	.+2      	; 0xa22 <GptStart_aSync+0x20>
     a20:	43 c0       	rjmp	.+134    	; 0xaa8 <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	09 f4       	brne	.+2      	; 0xa28 <GptStart_aSync+0x26>
     a26:	42 c0       	rjmp	.+132    	; 0xaac <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	fe 01       	movw	r30, r28
     a2c:	e2 55       	subi	r30, 0x52	; 82
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
     a32:	fe 01       	movw	r30, r28
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	ec 0f       	add	r30, r28
     a3a:	fd 1f       	adc	r31, r29
     a3c:	e8 56       	subi	r30, 0x68	; 104
     a3e:	ff 4f       	sbci	r31, 0xFF	; 255
     a40:	80 81       	ld	r24, Z
     a42:	88 23       	and	r24, r24
     a44:	21 f0       	breq	.+8      	; 0xa4e <GptStart_aSync+0x4c>
     a46:	83 30       	cpi	r24, 0x03	; 3
     a48:	98 f1       	brcs	.+102    	; 0xab0 <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
     a4a:	84 e0       	ldi	r24, 0x04	; 4
     a4c:	34 c0       	rjmp	.+104    	; 0xab6 <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
     a4e:	cb 01       	movw	r24, r22
     a50:	ba 01       	movw	r22, r20
     a52:	2f ef       	ldi	r18, 0xFF	; 255
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	0e 94 31 0b 	call	0x1662	; 0x1662 <__udivmodsi4>
     a5e:	fe 01       	movw	r30, r28
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	e6 55       	subi	r30, 0x56	; 86
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	20 83       	st	Z, r18
     a6e:	31 83       	std	Z+1, r19	; 0x01
     a70:	42 83       	std	Z+2, r20	; 0x02
     a72:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
     a74:	26 2f       	mov	r18, r22
     a76:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
     a78:	89 b7       	in	r24, 0x39	; 57
     a7a:	81 60       	ori	r24, 0x01	; 1
     a7c:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
     a7e:	10 93 b0 00 	sts	0x00B0, r17	; 0x8000b0 <Gpt_Timer0_CallBackPtr+0x1>
     a82:	00 93 af 00 	sts	0x00AF, r16	; 0x8000af <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
     a86:	ce 01       	movw	r24, r28
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	c8 0f       	add	r28, r24
     a8e:	d9 1f       	adc	r29, r25
     a90:	c8 56       	subi	r28, 0x68	; 104
     a92:	df 4f       	sbci	r29, 0xFF	; 255
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
     a98:	23 2b       	or	r18, r19
     a9a:	61 f0       	breq	.+24     	; 0xab4 <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
     a9c:	61 95       	neg	r22
     a9e:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	09 c0       	rjmp	.+18     	; 0xab6 <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
     aa4:	85 e0       	ldi	r24, 0x05	; 5
     aa6:	07 c0       	rjmp	.+14     	; 0xab6 <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
     aa8:	82 e0       	ldi	r24, 0x02	; 2
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
     aac:	86 e0       	ldi	r24, 0x06	; 6
     aae:	03 c0       	rjmp	.+6      	; 0xab6 <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <GptStart_aSync+0xb4>
     ab4:	81 e0       	ldi	r24, 0x01	; 1
}
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	1f 91       	pop	r17
     abc:	0f 91       	pop	r16
     abe:	08 95       	ret

00000ac0 <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
     ac0:	81 11       	cpse	r24, r1
     ac2:	23 c0       	rjmp	.+70     	; 0xb0a <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	fc 01       	movw	r30, r24
     ac8:	e2 55       	subi	r30, 0x52	; 82
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	20 81       	ld	r18, Z
     ace:	22 23       	and	r18, r18
     ad0:	f1 f0       	breq	.+60     	; 0xb0e <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
     ad2:	22 30       	cpi	r18, 0x02	; 2
     ad4:	f1 f4       	brne	.+60     	; 0xb12 <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
     ad6:	fc 01       	movw	r30, r24
     ad8:	ee 0f       	add	r30, r30
     ada:	ff 1f       	adc	r31, r31
     adc:	e8 0f       	add	r30, r24
     ade:	f9 1f       	adc	r31, r25
     ae0:	e8 56       	subi	r30, 0x68	; 104
     ae2:	ff 4f       	sbci	r31, 0xFF	; 255
     ae4:	20 81       	ld	r18, Z
     ae6:	22 23       	and	r18, r18
     ae8:	19 f0       	breq	.+6      	; 0xaf0 <GptStop+0x30>
     aea:	23 30       	cpi	r18, 0x03	; 3
     aec:	a0 f4       	brcc	.+40     	; 0xb16 <GptStop+0x56>
     aee:	06 c0       	rjmp	.+12     	; 0xafc <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
     af0:	23 b7       	in	r18, 0x33	; 51
     af2:	28 7f       	andi	r18, 0xF8	; 248
     af4:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
     af6:	29 b7       	in	r18, 0x39	; 57
     af8:	2c 7f       	andi	r18, 0xFC	; 252
     afa:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_STOPPED;
     afc:	fc 01       	movw	r30, r24
     afe:	e2 55       	subi	r30, 0x52	; 82
     b00:	ff 4f       	sbci	r31, 0xFF	; 255
     b02:	23 e0       	ldi	r18, 0x03	; 3
     b04:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
     b0a:	85 e0       	ldi	r24, 0x05	; 5
     b0c:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
     b12:	87 e0       	ldi	r24, 0x07	; 7
     b14:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
     b16:	84 e0       	ldi	r24, 0x04	; 4
	}
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
     b18:	08 95       	ret

00000b1a <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 8a 04 	call	0x914	; 0x914 <Gpt_ISRHandler>
     b42:	ff 91       	pop	r31
     b44:	ef 91       	pop	r30
     b46:	bf 91       	pop	r27
     b48:	af 91       	pop	r26
     b4a:	9f 91       	pop	r25
     b4c:	8f 91       	pop	r24
     b4e:	7f 91       	pop	r23
     b50:	6f 91       	pop	r22
     b52:	5f 91       	pop	r21
     b54:	4f 91       	pop	r20
     b56:	3f 91       	pop	r19
     b58:	2f 91       	pop	r18
     b5a:	0f 90       	pop	r0
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	0f 90       	pop	r0
     b60:	1f 90       	pop	r1
     b62:	18 95       	reti

00000b64 <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
     b64:	1f 92       	push	r1
     b66:	0f 92       	push	r0
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	0f 92       	push	r0
     b6c:	11 24       	eor	r1, r1
     b6e:	2f 93       	push	r18
     b70:	3f 93       	push	r19
     b72:	4f 93       	push	r20
     b74:	5f 93       	push	r21
     b76:	6f 93       	push	r22
     b78:	7f 93       	push	r23
     b7a:	8f 93       	push	r24
     b7c:	9f 93       	push	r25
     b7e:	af 93       	push	r26
     b80:	bf 93       	push	r27
     b82:	ef 93       	push	r30
     b84:	ff 93       	push	r31
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	0e 94 8a 04 	call	0x914	; 0x914 <Gpt_ISRHandler>
     b8c:	ff 91       	pop	r31
     b8e:	ef 91       	pop	r30
     b90:	bf 91       	pop	r27
     b92:	af 91       	pop	r26
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	7f 91       	pop	r23
     b9a:	6f 91       	pop	r22
     b9c:	5f 91       	pop	r21
     b9e:	4f 91       	pop	r20
     ba0:	3f 91       	pop	r19
     ba2:	2f 91       	pop	r18
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	0f 90       	pop	r0
     baa:	1f 90       	pop	r1
     bac:	18 95       	reti

00000bae <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     bae:	1f 92       	push	r1
     bb0:	0f 92       	push	r0
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	0f 92       	push	r0
     bb6:	11 24       	eor	r1, r1
     bb8:	2f 93       	push	r18
     bba:	3f 93       	push	r19
     bbc:	4f 93       	push	r20
     bbe:	5f 93       	push	r21
     bc0:	6f 93       	push	r22
     bc2:	7f 93       	push	r23
     bc4:	8f 93       	push	r24
     bc6:	9f 93       	push	r25
     bc8:	af 93       	push	r26
     bca:	bf 93       	push	r27
     bcc:	ef 93       	push	r30
     bce:	ff 93       	push	r31
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	0e 94 8a 04 	call	0x914	; 0x914 <Gpt_ISRHandler>
     bd6:	ff 91       	pop	r31
     bd8:	ef 91       	pop	r30
     bda:	bf 91       	pop	r27
     bdc:	af 91       	pop	r26
     bde:	9f 91       	pop	r25
     be0:	8f 91       	pop	r24
     be2:	7f 91       	pop	r23
     be4:	6f 91       	pop	r22
     be6:	5f 91       	pop	r21
     be8:	4f 91       	pop	r20
     bea:	3f 91       	pop	r19
     bec:	2f 91       	pop	r18
     bee:	0f 90       	pop	r0
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	0f 90       	pop	r0
     bf4:	1f 90       	pop	r1
     bf6:	18 95       	reti

00000bf8 <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	2f 93       	push	r18
     c04:	3f 93       	push	r19
     c06:	4f 93       	push	r20
     c08:	5f 93       	push	r21
     c0a:	6f 93       	push	r22
     c0c:	7f 93       	push	r23
     c0e:	8f 93       	push	r24
     c10:	9f 93       	push	r25
     c12:	af 93       	push	r26
     c14:	bf 93       	push	r27
     c16:	ef 93       	push	r30
     c18:	ff 93       	push	r31
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	0e 94 8a 04 	call	0x914	; 0x914 <Gpt_ISRHandler>
     c20:	ff 91       	pop	r31
     c22:	ef 91       	pop	r30
     c24:	bf 91       	pop	r27
     c26:	af 91       	pop	r26
     c28:	9f 91       	pop	r25
     c2a:	8f 91       	pop	r24
     c2c:	7f 91       	pop	r23
     c2e:	6f 91       	pop	r22
     c30:	5f 91       	pop	r21
     c32:	4f 91       	pop	r20
     c34:	3f 91       	pop	r19
     c36:	2f 91       	pop	r18
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	0f 90       	pop	r0
     c3e:	1f 90       	pop	r1
     c40:	18 95       	reti

00000c42 <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     c42:	1f 92       	push	r1
     c44:	0f 92       	push	r0
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	0f 92       	push	r0
     c4a:	11 24       	eor	r1, r1
     c4c:	2f 93       	push	r18
     c4e:	3f 93       	push	r19
     c50:	4f 93       	push	r20
     c52:	5f 93       	push	r21
     c54:	6f 93       	push	r22
     c56:	7f 93       	push	r23
     c58:	8f 93       	push	r24
     c5a:	9f 93       	push	r25
     c5c:	af 93       	push	r26
     c5e:	bf 93       	push	r27
     c60:	ef 93       	push	r30
     c62:	ff 93       	push	r31
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	0e 94 8a 04 	call	0x914	; 0x914 <Gpt_ISRHandler>
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
     c6e:	bf 91       	pop	r27
     c70:	af 91       	pop	r26
     c72:	9f 91       	pop	r25
     c74:	8f 91       	pop	r24
     c76:	7f 91       	pop	r23
     c78:	6f 91       	pop	r22
     c7a:	5f 91       	pop	r21
     c7c:	4f 91       	pop	r20
     c7e:	3f 91       	pop	r19
     c80:	2f 91       	pop	r18
     c82:	0f 90       	pop	r0
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	0f 90       	pop	r0
     c88:	1f 90       	pop	r1
     c8a:	18 95       	reti

00000c8c <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     c8c:	1f 92       	push	r1
     c8e:	0f 92       	push	r0
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	0f 92       	push	r0
     c94:	11 24       	eor	r1, r1
     c96:	2f 93       	push	r18
     c98:	3f 93       	push	r19
     c9a:	4f 93       	push	r20
     c9c:	5f 93       	push	r21
     c9e:	6f 93       	push	r22
     ca0:	7f 93       	push	r23
     ca2:	8f 93       	push	r24
     ca4:	9f 93       	push	r25
     ca6:	af 93       	push	r26
     ca8:	bf 93       	push	r27
     caa:	ef 93       	push	r30
     cac:	ff 93       	push	r31
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	0e 94 8a 04 	call	0x914	; 0x914 <Gpt_ISRHandler>
     cb4:	ff 91       	pop	r31
     cb6:	ef 91       	pop	r30
     cb8:	bf 91       	pop	r27
     cba:	af 91       	pop	r26
     cbc:	9f 91       	pop	r25
     cbe:	8f 91       	pop	r24
     cc0:	7f 91       	pop	r23
     cc2:	6f 91       	pop	r22
     cc4:	5f 91       	pop	r21
     cc6:	4f 91       	pop	r20
     cc8:	3f 91       	pop	r19
     cca:	2f 91       	pop	r18
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	0f 90       	pop	r0
     cd2:	1f 90       	pop	r1
     cd4:	18 95       	reti

00000cd6 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	2f 93       	push	r18
     ce2:	3f 93       	push	r19
     ce4:	4f 93       	push	r20
     ce6:	5f 93       	push	r21
     ce8:	6f 93       	push	r22
     cea:	7f 93       	push	r23
     cec:	8f 93       	push	r24
     cee:	9f 93       	push	r25
     cf0:	af 93       	push	r26
     cf2:	bf 93       	push	r27
     cf4:	ef 93       	push	r30
     cf6:	ff 93       	push	r31
     cf8:	82 e0       	ldi	r24, 0x02	; 2
     cfa:	0e 94 8a 04 	call	0x914	; 0x914 <Gpt_ISRHandler>
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	bf 91       	pop	r27
     d04:	af 91       	pop	r26
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	7f 91       	pop	r23
     d0c:	6f 91       	pop	r22
     d0e:	5f 91       	pop	r21
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	0e 94 8a 04 	call	0x914	; 0x914 <Gpt_ISRHandler>
     d48:	ff 91       	pop	r31
     d4a:	ef 91       	pop	r30
     d4c:	bf 91       	pop	r27
     d4e:	af 91       	pop	r26
     d50:	9f 91       	pop	r25
     d52:	8f 91       	pop	r24
     d54:	7f 91       	pop	r23
     d56:	6f 91       	pop	r22
     d58:	5f 91       	pop	r21
     d5a:	4f 91       	pop	r20
     d5c:	3f 91       	pop	r19
     d5e:	2f 91       	pop	r18
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
	Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID);
     d6e:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <gu8_currentPwmChannel>
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	ee 0f       	add	r30, r30
     d76:	ff 1f       	adc	r31, r31
     d78:	e5 56       	subi	r30, 0x65	; 101
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	80 81       	ld	r24, Z
     d7e:	0e 94 ad 03 	call	0x75a	; 0x75a <Dio_togglePin>
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
     d82:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <gu8_currentPwmChannel>
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9c 01       	movw	r18, r24
     d8a:	22 0f       	add	r18, r18
     d8c:	33 1f       	adc	r19, r19
     d8e:	f9 01       	movw	r30, r18
     d90:	ee 0f       	add	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	ee 0f       	add	r30, r30
     d9a:	ff 1f       	adc	r31, r31
     d9c:	e2 1b       	sub	r30, r18
     d9e:	f3 0b       	sbc	r31, r19
     da0:	ee 54       	subi	r30, 0x4E	; 78
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	25 85       	ldd	r18, Z+13	; 0x0d
     da6:	22 30       	cpi	r18, 0x02	; 2
     da8:	09 f0       	breq	.+2      	; 0xdac <waveFunction+0x42>
     daa:	5e c0       	rjmp	.+188    	; 0xe68 <waveFunction+0xfe>
	{
		GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID, gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks, waveFunction);
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	fc 01       	movw	r30, r24
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	e8 1b       	sub	r30, r24
     dc0:	f9 0b       	sbc	r31, r25
     dc2:	ee 54       	subi	r30, 0x4E	; 78
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	41 85       	ldd	r20, Z+9	; 0x09
     dc8:	52 85       	ldd	r21, Z+10	; 0x0a
     dca:	63 85       	ldd	r22, Z+11	; 0x0b
     dcc:	74 85       	ldd	r23, Z+12	; 0x0c
     dce:	fc 01       	movw	r30, r24
     dd0:	e5 56       	subi	r30, 0x65	; 101
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	25 eb       	ldi	r18, 0xB5	; 181
     dd6:	36 e0       	ldi	r19, 0x06	; 6
     dd8:	81 81       	ldd	r24, Z+1	; 0x01
     dda:	0e 94 01 05 	call	0xa02	; 0xa02 <GptStart_aSync>
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
     dde:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <gu8_currentPwmChannel>
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	9c 01       	movw	r18, r24
     de6:	22 0f       	add	r18, r18
     de8:	33 1f       	adc	r19, r19
     dea:	f9 01       	movw	r30, r18
     dec:	ee 0f       	add	r30, r30
     dee:	ff 1f       	adc	r31, r31
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	e2 1b       	sub	r30, r18
     dfa:	f3 0b       	sbc	r31, r19
     dfc:	ee 54       	subi	r30, 0x4E	; 78
     dfe:	ff 4f       	sbci	r31, 0xFF	; 255
     e00:	01 85       	ldd	r16, Z+9	; 0x09
     e02:	12 85       	ldd	r17, Z+10	; 0x0a
     e04:	23 85       	ldd	r18, Z+11	; 0x0b
     e06:	34 85       	ldd	r19, Z+12	; 0x0c
     e08:	45 81       	ldd	r20, Z+5	; 0x05
     e0a:	56 81       	ldd	r21, Z+6	; 0x06
     e0c:	67 81       	ldd	r22, Z+7	; 0x07
     e0e:	70 85       	ldd	r23, Z+8	; 0x08
     e10:	04 17       	cp	r16, r20
     e12:	15 07       	cpc	r17, r21
     e14:	26 07       	cpc	r18, r22
     e16:	37 07       	cpc	r19, r23
     e18:	b1 f4       	brne	.+44     	; 0xe46 <waveFunction+0xdc>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	fc 01       	movw	r30, r24
     e20:	ee 0f       	add	r30, r30
     e22:	ff 1f       	adc	r31, r31
     e24:	ee 0f       	add	r30, r30
     e26:	ff 1f       	adc	r31, r31
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	e8 1b       	sub	r30, r24
     e2e:	f9 0b       	sbc	r31, r25
     e30:	ee 54       	subi	r30, 0x4E	; 78
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	81 81       	ldd	r24, Z+1	; 0x01
     e36:	92 81       	ldd	r25, Z+2	; 0x02
     e38:	a3 81       	ldd	r26, Z+3	; 0x03
     e3a:	b4 81       	ldd	r27, Z+4	; 0x04
     e3c:	81 87       	std	Z+9, r24	; 0x09
     e3e:	92 87       	std	Z+10, r25	; 0x0a
     e40:	a3 87       	std	Z+11, r26	; 0x0b
     e42:	b4 87       	std	Z+12, r27	; 0x0c
     e44:	11 c0       	rjmp	.+34     	; 0xe68 <waveFunction+0xfe>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	fc 01       	movw	r30, r24
     e4c:	ee 0f       	add	r30, r30
     e4e:	ff 1f       	adc	r31, r31
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	ee 0f       	add	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	e8 1b       	sub	r30, r24
     e5a:	f9 0b       	sbc	r31, r25
     e5c:	ee 54       	subi	r30, 0x4E	; 78
     e5e:	ff 4f       	sbci	r31, 0xFF	; 255
     e60:	41 87       	std	Z+9, r20	; 0x09
     e62:	52 87       	std	Z+10, r21	; 0x0a
     e64:	63 87       	std	Z+11, r22	; 0x0b
     e66:	74 87       	std	Z+12, r23	; 0x0c
	}
}
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <SWPwm_Init>:
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	GptInit();
     e6e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <GptInit>
	Dio_init(strDio_pins);
     e72:	81 e6       	ldi	r24, 0x61	; 97
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 1f 02 	call	0x43e	; 0x43e <Dio_init>
	return SWPWM_STATUS_ERROR_OK;
}
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	08 95       	ret

00000e7e <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
     e7e:	4f 92       	push	r4
     e80:	5f 92       	push	r5
     e82:	6f 92       	push	r6
     e84:	7f 92       	push	r7
     e86:	8f 92       	push	r8
     e88:	9f 92       	push	r9
     e8a:	af 92       	push	r10
     e8c:	bf 92       	push	r11
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <SWPwm_Start+0x1e>
     e9c:	00 d0       	rcall	.+0      	; 0xe9e <SWPwm_Start+0x20>
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <SWPwm_Start+0x22>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
	/**************************************************************************************/
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
     ea4:	81 11       	cpse	r24, r1
     ea6:	dd c0       	rjmp	.+442    	; 0x1062 <SWPwm_Start+0x1e4>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
     ea8:	25 36       	cpi	r18, 0x65	; 101
     eaa:	08 f0       	brcs	.+2      	; 0xeae <SWPwm_Start+0x30>
     eac:	dc c0       	rjmp	.+440    	; 0x1066 <SWPwm_Start+0x1e8>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
     eae:	e8 2f       	mov	r30, r24
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	fe 83       	std	Y+6, r31	; 0x06
     eb4:	ed 83       	std	Y+5, r30	; 0x05
     eb6:	df 01       	movw	r26, r30
     eb8:	aa 0f       	add	r26, r26
     eba:	bb 1f       	adc	r27, r27
     ebc:	fd 01       	movw	r30, r26
     ebe:	ee 0f       	add	r30, r30
     ec0:	ff 1f       	adc	r31, r31
     ec2:	ee 0f       	add	r30, r30
     ec4:	ff 1f       	adc	r31, r31
     ec6:	ee 0f       	add	r30, r30
     ec8:	ff 1f       	adc	r31, r31
     eca:	ea 1b       	sub	r30, r26
     ecc:	fb 0b       	sbc	r31, r27
     ece:	ee 54       	subi	r30, 0x4E	; 78
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	95 85       	ldd	r25, Z+13	; 0x0d
     ed4:	92 30       	cpi	r25, 0x02	; 2
     ed6:	09 f4       	brne	.+2      	; 0xeda <SWPwm_Start+0x5c>
     ed8:	c8 c0       	rjmp	.+400    	; 0x106a <SWPwm_Start+0x1ec>
	/**************************************************************************************/

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	if(u8_DutyCycle == 0)
     eda:	22 23       	and	r18, r18
     edc:	09 f4       	brne	.+2      	; 0xee0 <SWPwm_Start+0x62>
     ede:	c7 c0       	rjmp	.+398    	; 0x106e <SWPwm_Start+0x1f0>
     ee0:	12 2f       	mov	r17, r18
     ee2:	e8 2e       	mov	r14, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
     ee4:	24 36       	cpi	r18, 0x64	; 100
     ee6:	51 f4       	brne	.+20     	; 0xefc <SWPwm_Start+0x7e>
	{
		Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH);
     ee8:	9d 01       	movw	r18, r26
     eea:	25 56       	subi	r18, 0x65	; 101
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	f9 01       	movw	r30, r18
     ef2:	80 81       	ld	r24, Z
     ef4:	0e 94 14 03 	call	0x628	; 0x628 <Dio_writePin>
		return SWPWM_STATUS_ERROR_OK;
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	bc c0       	rjmp	.+376    	; 0x1074 <SWPwm_Start+0x1f6>
	}
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;
     efc:	cb 01       	movw	r24, r22
     efe:	ba 01       	movw	r22, r20
     f00:	0e 94 36 0a 	call	0x146c	; 0x146c <__floatunsisf>
     f04:	9b 01       	movw	r18, r22
     f06:	ac 01       	movw	r20, r24
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	80 e8       	ldi	r24, 0x80	; 128
     f0e:	9f e3       	ldi	r25, 0x3F	; 63
     f10:	0e 94 95 09 	call	0x132a	; 0x132a <__divsf3>
     f14:	4b 01       	movw	r8, r22
     f16:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;
     f18:	61 2f       	mov	r22, r17
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 38 0a 	call	0x1470	; 0x1470 <__floatsisf>
     f24:	a5 01       	movw	r20, r10
     f26:	94 01       	movw	r18, r8
     f28:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__mulsf3>
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	48 ec       	ldi	r20, 0xC8	; 200
     f32:	52 e4       	ldi	r21, 0x42	; 66
     f34:	0e 94 95 09 	call	0x132a	; 0x132a <__divsf3>
     f38:	2b 01       	movw	r4, r22
     f3a:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;
     f3c:	9b 01       	movw	r18, r22
     f3e:	ac 01       	movw	r20, r24
     f40:	c5 01       	movw	r24, r10
     f42:	b4 01       	movw	r22, r8
     f44:	0e 94 28 09 	call	0x1250	; 0x1250 <__subsf3>
     f48:	69 83       	std	Y+1, r22	; 0x01
     f4a:	7a 83       	std	Y+2, r23	; 0x02
     f4c:	8b 83       	std	Y+3, r24	; 0x03
     f4e:	9c 83       	std	Y+4, r25	; 0x04
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
     f50:	ed 81       	ldd	r30, Y+5	; 0x05
     f52:	fe 81       	ldd	r31, Y+6	; 0x06
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	e5 56       	subi	r30, 0x65	; 101
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	f1 80       	ldd	r15, Z+1	; 0x01
     f5e:	8f 2d       	mov	r24, r15
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	fc 01       	movw	r30, r24
     f64:	ee 0f       	add	r30, r30
     f66:	ff 1f       	adc	r31, r31
     f68:	8e 0f       	add	r24, r30
     f6a:	9f 1f       	adc	r25, r31
     f6c:	fc 01       	movw	r30, r24
     f6e:	e8 56       	subi	r30, 0x68	; 104
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	e1 81       	ldd	r30, Z+1	; 0x01
     f74:	8e 2f       	mov	r24, r30
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	fc 01       	movw	r30, r24
     f7a:	31 97       	sbiw	r30, 0x01	; 1
     f7c:	e7 30       	cpi	r30, 0x07	; 7
     f7e:	f1 05       	cpc	r31, r1
     f80:	08 f0       	brcs	.+2      	; 0xf84 <SWPwm_Start+0x106>
     f82:	77 c0       	rjmp	.+238    	; 0x1072 <SWPwm_Start+0x1f4>
     f84:	e6 5d       	subi	r30, 0xD6	; 214
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	0b c0       	rjmp	.+22     	; 0xfa8 <SWPwm_Start+0x12a>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
     f92:	60 e4       	ldi	r22, 0x40	; 64
     f94:	70 e0       	ldi	r23, 0x00	; 0
			break;
     f96:	08 c0       	rjmp	.+16     	; 0xfa8 <SWPwm_Start+0x12a>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	71 e0       	ldi	r23, 0x01	; 1
			break;
     f9c:	05 c0       	rjmp	.+10     	; 0xfa8 <SWPwm_Start+0x12a>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	74 e0       	ldi	r23, 0x04	; 4
			break;
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <SWPwm_Start+0x12a>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
     fa4:	68 e0       	ldi	r22, 0x08	; 8
     fa6:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}

	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 36 0a 	call	0x146c	; 0x146c <__floatunsisf>
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	34 e2       	ldi	r19, 0x24	; 36
     fb4:	44 e7       	ldi	r20, 0x74	; 116
     fb6:	59 e4       	ldi	r21, 0x49	; 73
     fb8:	0e 94 95 09 	call	0x132a	; 0x132a <__divsf3>
     fbc:	4b 01       	movw	r8, r22
     fbe:	5c 01       	movw	r10, r24
	gu8_currentPwmChannel = u8_ChannelID;
     fc0:	e0 92 b1 00 	sts	0x00B1, r14	; 0x8000b1 <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;
     fc4:	9b 01       	movw	r18, r22
     fc6:	ac 01       	movw	r20, r24
     fc8:	c3 01       	movw	r24, r6
     fca:	b2 01       	movw	r22, r4
     fcc:	0e 94 95 09 	call	0x132a	; 0x132a <__divsf3>
     fd0:	0d 81       	ldd	r16, Y+5	; 0x05
     fd2:	1e 81       	ldd	r17, Y+6	; 0x06
     fd4:	00 0f       	add	r16, r16
     fd6:	11 1f       	adc	r17, r17
     fd8:	98 01       	movw	r18, r16
     fda:	22 0f       	add	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	22 0f       	add	r18, r18
     fe0:	33 1f       	adc	r19, r19
     fe2:	22 0f       	add	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	20 1b       	sub	r18, r16
     fe8:	31 0b       	sbc	r19, r17
     fea:	2e 54       	subi	r18, 0x4E	; 78
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	3e 83       	std	Y+6, r19	; 0x06
     ff0:	2d 83       	std	Y+5, r18	; 0x05
     ff2:	0e 94 07 0a 	call	0x140e	; 0x140e <__fixunssfsi>
     ff6:	ed 81       	ldd	r30, Y+5	; 0x05
     ff8:	fe 81       	ldd	r31, Y+6	; 0x06
     ffa:	61 83       	std	Z+1, r22	; 0x01
     ffc:	72 83       	std	Z+2, r23	; 0x02
     ffe:	83 83       	std	Z+3, r24	; 0x03
    1000:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;
    1002:	a5 01       	movw	r20, r10
    1004:	94 01       	movw	r18, r8
    1006:	69 81       	ldd	r22, Y+1	; 0x01
    1008:	7a 81       	ldd	r23, Y+2	; 0x02
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	0e 94 95 09 	call	0x132a	; 0x132a <__divsf3>
    1012:	0e 94 07 0a 	call	0x140e	; 0x140e <__fixunssfsi>
    1016:	ed 81       	ldd	r30, Y+5	; 0x05
    1018:	fe 81       	ldd	r31, Y+6	; 0x06
    101a:	65 83       	std	Z+5, r22	; 0x05
    101c:	76 83       	std	Z+6, r23	; 0x06
    101e:	87 83       	std	Z+7, r24	; 0x07
    1020:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    1022:	e0 82       	st	Z, r14

	Dio_togglePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID);
    1024:	f8 01       	movw	r30, r16
    1026:	e5 56       	subi	r30, 0x65	; 101
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	80 81       	ld	r24, Z
    102c:	0e 94 ad 03 	call	0x75a	; 0x75a <Dio_togglePin>
	GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID, gstr_ChannelsData[u8_ChannelID].u32_ONTicks, waveFunction);
    1030:	ed 81       	ldd	r30, Y+5	; 0x05
    1032:	fe 81       	ldd	r31, Y+6	; 0x06
    1034:	41 81       	ldd	r20, Z+1	; 0x01
    1036:	52 81       	ldd	r21, Z+2	; 0x02
    1038:	63 81       	ldd	r22, Z+3	; 0x03
    103a:	74 81       	ldd	r23, Z+4	; 0x04
    103c:	25 eb       	ldi	r18, 0xB5	; 181
    103e:	36 e0       	ldi	r19, 0x06	; 6
    1040:	8f 2d       	mov	r24, r15
    1042:	0e 94 01 05 	call	0xa02	; 0xa02 <GptStart_aSync>
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    1046:	ed 81       	ldd	r30, Y+5	; 0x05
    1048:	fe 81       	ldd	r31, Y+6	; 0x06
    104a:	85 81       	ldd	r24, Z+5	; 0x05
    104c:	96 81       	ldd	r25, Z+6	; 0x06
    104e:	a7 81       	ldd	r26, Z+7	; 0x07
    1050:	b0 85       	ldd	r27, Z+8	; 0x08
    1052:	81 87       	std	Z+9, r24	; 0x09
    1054:	92 87       	std	Z+10, r25	; 0x0a
    1056:	a3 87       	std	Z+11, r26	; 0x0b
    1058:	b4 87       	std	Z+12, r27	; 0x0c
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	09 c0       	rjmp	.+18     	; 0x1074 <SWPwm_Start+0x1f6>
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <SWPwm_Start+0x1f6>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	05 c0       	rjmp	.+10     	; 0x1074 <SWPwm_Start+0x1f6>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    106a:	85 e0       	ldi	r24, 0x05	; 5
    106c:	03 c0       	rjmp	.+6      	; 0x1074 <SWPwm_Start+0x1f6>
	/*								Function Implementation								  */
	/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <SWPwm_Start+0x1f6>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    1072:	80 e0       	ldi	r24, 0x00	; 0
	GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID, gstr_ChannelsData[u8_ChannelID].u32_ONTicks, waveFunction);
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    1074:	26 96       	adiw	r28, 0x06	; 6
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	bf 90       	pop	r11
    108e:	af 90       	pop	r10
    1090:	9f 90       	pop	r9
    1092:	8f 90       	pop	r8
    1094:	7f 90       	pop	r7
    1096:	6f 90       	pop	r6
    1098:	5f 90       	pop	r5
    109a:	4f 90       	pop	r4
    109c:	08 95       	ret

0000109e <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
	/**************************************************************************************/
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    10a6:	81 11       	cpse	r24, r1
    10a8:	30 c0       	rjmp	.+96     	; 0x110a <SWPwm_Stop+0x6c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	9c 01       	movw	r18, r24
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	f9 01       	movw	r30, r18
    10b4:	ee 0f       	add	r30, r30
    10b6:	ff 1f       	adc	r31, r31
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	e2 1b       	sub	r30, r18
    10c2:	f3 0b       	sbc	r31, r19
    10c4:	ee 54       	subi	r30, 0x4E	; 78
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	25 85       	ldd	r18, Z+13	; 0x0d
    10ca:	22 30       	cpi	r18, 0x02	; 2
    10cc:	01 f5       	brne	.+64     	; 0x110e <SWPwm_Stop+0x70>
	/**************************************************************************************/
	
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW);
    10ce:	ec 01       	movw	r28, r24
    10d0:	cc 0f       	add	r28, r28
    10d2:	dd 1f       	adc	r29, r29
    10d4:	8e 01       	movw	r16, r28
    10d6:	05 56       	subi	r16, 0x65	; 101
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	f8 01       	movw	r30, r16
    10de:	80 81       	ld	r24, Z
    10e0:	0e 94 14 03 	call	0x628	; 0x628 <Dio_writePin>
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    10e4:	fe 01       	movw	r30, r28
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	ec 1b       	sub	r30, r28
    10f4:	fd 0b       	sbc	r31, r29
    10f6:	ee 54       	subi	r30, 0x4E	; 78
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	85 87       	std	Z+13, r24	; 0x0d
	GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID);
    10fe:	f8 01       	movw	r30, r16
    1100:	81 81       	ldd	r24, Z+1	; 0x01
    1102:	0e 94 60 05 	call	0xac0	; 0xac0 <GptStop>
	
	return SWPWM_STATUS_ERROR_OK;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <SWPwm_Stop+0x72>
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    110a:	83 e0       	ldi	r24, 0x03	; 3
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <SWPwm_Stop+0x72>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    110e:	85 e0       	ldi	r24, 0x05	; 5
	Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW);
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
	GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID);
	
	return SWPWM_STATUS_ERROR_OK;
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <Service_init>:
* Description: Function to Initialize the Service layer -- Initialize all the below layers.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_init(void)
{
	/* Check if the Service Layer has been already initialized */
	if(genu_SrvcStatus == SRVC_STATUS_INITIALIZED)
    111a:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <genu_SrvcStatus>
    111e:	84 30       	cpi	r24, 0x04	; 4
    1120:	81 f0       	breq	.+32     	; 0x1142 <Service_init+0x28>
		return SRVC_STATUS_INITIALIZED;
		
		
	/* Call the initializer in Button and Motor*/
	if(BTTN_STATUS_ERROR_OK != Button_init())
    1122:	0e 94 c9 00 	call	0x192	; 0x192 <Button_init>
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	49 f4       	brne	.+18     	; 0x113c <Service_init+0x22>
		return SRVC_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
    112a:	0e 94 3e 01 	call	0x27c	; 0x27c <Motor_init>
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	39 f4       	brne	.+14     	; 0x1140 <Service_init+0x26>
		return SRVC_STATUS_ERROR_NOK;
	
	genu_SrvcStatus = SRVC_STATUS_INITIALIZED;
    1132:	84 e0       	ldi	r24, 0x04	; 4
    1134:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <genu_SrvcStatus>
	return SRVC_STATUS_ERROR_OK;
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	08 95       	ret
		return SRVC_STATUS_INITIALIZED;
		
		
	/* Call the initializer in Button and Motor*/
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return SRVC_STATUS_ERROR_NOK;
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return SRVC_STATUS_ERROR_NOK;
    1140:	80 e0       	ldi	r24, 0x00	; 0
	
	genu_SrvcStatus = SRVC_STATUS_INITIALIZED;
	return SRVC_STATUS_ERROR_OK;
}
    1142:	08 95       	ret

00001144 <Service_ReportButton>:
* Parameters (out): pu8_button - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_ReportButton(uint8_t* pu8_button)
{
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	1f 92       	push	r1
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	5c 01       	movw	r10, r24
	uint8_t u8_ButtonsIndex=0;
	uint8_t u8_ButtonCurrState=0;
    115e:	19 82       	std	Y+1, r1	; 0x01
	for (u8_ButtonsIndex=0 ; u8_ButtonsIndex<BUTTONS_USED_NUM; u8_ButtonsIndex++)
    1160:	10 e0       	ldi	r17, 0x00	; 0
    1162:	1a c0       	rjmp	.+52     	; 0x1198 <Service_ReportButton+0x54>
	{
		Button_updateState(gau8_buttons[u8_ButtonsIndex]);
    1164:	c1 2e       	mov	r12, r17
    1166:	d1 2c       	mov	r13, r1
    1168:	c6 01       	movw	r24, r12
    116a:	86 57       	subi	r24, 0x76	; 118
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	7c 01       	movw	r14, r24
    1170:	fc 01       	movw	r30, r24
    1172:	80 81       	ld	r24, Z
    1174:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Button_updateState>
		Button_getState(gau8_buttons[u8_ButtonsIndex], &u8_ButtonCurrState);
    1178:	be 01       	movw	r22, r28
    117a:	6f 5f       	subi	r22, 0xFF	; 255
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	f7 01       	movw	r30, r14
    1180:	80 81       	ld	r24, Z
    1182:	0e 94 cf 00 	call	0x19e	; 0x19e <Button_getState>
		if(u8_ButtonCurrState == BUTTON_STATE_PRESSED)
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	29 f4       	brne	.+10     	; 0x1196 <Service_ReportButton+0x52>
		{
			*pu8_button = gau8_buttons[u8_ButtonsIndex];
    118c:	f7 01       	movw	r30, r14
    118e:	80 81       	ld	r24, Z
    1190:	f5 01       	movw	r30, r10
    1192:	80 83       	st	Z, r24
			return SRVC_STATUS_ERROR_OK;
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <Service_ReportButton+0x5e>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_ReportButton(uint8_t* pu8_button)
{
	uint8_t u8_ButtonsIndex=0;
	uint8_t u8_ButtonCurrState=0;
	for (u8_ButtonsIndex=0 ; u8_ButtonsIndex<BUTTONS_USED_NUM; u8_ButtonsIndex++)
    1196:	1f 5f       	subi	r17, 0xFF	; 255
    1198:	14 30       	cpi	r17, 0x04	; 4
    119a:	20 f3       	brcs	.-56     	; 0x1164 <Service_ReportButton+0x20>
		{
			*pu8_button = gau8_buttons[u8_ButtonsIndex];
			return SRVC_STATUS_ERROR_OK;
		}
	}
	*pu8_button = BUTTON_NULL;
    119c:	8f ef       	ldi	r24, 0xFF	; 255
    119e:	f5 01       	movw	r30, r10
    11a0:	80 83       	st	Z, r24
	return SRVC_STATUS_ERROR_OK;
}
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	0f 90       	pop	r0
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	ff 90       	pop	r15
    11ae:	ef 90       	pop	r14
    11b0:	df 90       	pop	r13
    11b2:	cf 90       	pop	r12
    11b4:	bf 90       	pop	r11
    11b6:	af 90       	pop	r10
    11b8:	08 95       	ret

000011ba <Service_UpdateMotors>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the motor (Run the motor with the specific action
*				,direction and speed)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_UpdateMotors(uint8_t u8_motorAction, uint8_t u8_motorSpeed)
{
    11ba:	cf 93       	push	r28
    11bc:	df 93       	push	r29
    11be:	c8 2f       	mov	r28, r24
	if(u8_motorAction == ACTION_STOP)
    11c0:	81 11       	cpse	r24, r1
    11c2:	08 c0       	rjmp	.+16     	; 0x11d4 <Service_UpdateMotors+0x1a>
	{
		Motor_stop(MOTOR_LEFT);
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	0e 94 ad 01 	call	0x35a	; 0x35a <Motor_stop>
		Motor_stop(MOTOR_RIGHT);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 ad 01 	call	0x35a	; 0x35a <Motor_stop>
		return SRVC_STATUS_ERROR_OK;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	3b c0       	rjmp	.+118    	; 0x124a <Service_UpdateMotors+0x90>
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
	uint8_t u8_rightMotorDir=MOTOR_FRWRD;
	
	switch (u8_motorSpeed)
    11d4:	62 30       	cpi	r22, 0x02	; 2
    11d6:	59 f0       	breq	.+22     	; 0x11ee <Service_UpdateMotors+0x34>
    11d8:	18 f4       	brcc	.+6      	; 0x11e0 <Service_UpdateMotors+0x26>
    11da:	61 30       	cpi	r22, 0x01	; 1
    11dc:	a9 f0       	breq	.+42     	; 0x1208 <Service_UpdateMotors+0x4e>
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <Service_UpdateMotors+0x2e>
    11e0:	63 30       	cpi	r22, 0x03	; 3
    11e2:	41 f0       	breq	.+16     	; 0x11f4 <Service_UpdateMotors+0x3a>
    11e4:	64 30       	cpi	r22, 0x04	; 4
    11e6:	69 f0       	breq	.+26     	; 0x1202 <Service_UpdateMotors+0x48>
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    11e8:	40 e0       	ldi	r20, 0x00	; 0
	{
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
    11ea:	d0 e0       	ldi	r29, 0x00	; 0
    11ec:	0f c0       	rjmp	.+30     	; 0x120c <Service_UpdateMotors+0x52>
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    11ee:	40 e0       	ldi	r20, 0x00	; 0
	{
	case SPEED_30F:
		u8_speed = 30;
		break;
	case SPEED_60F:
		u8_speed = 60;
    11f0:	dc e3       	ldi	r29, 0x3C	; 60
		break;
    11f2:	0c c0       	rjmp	.+24     	; 0x120c <Service_UpdateMotors+0x52>
	case SPEED_90F:
		u8_speed = 90;
		Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_LOW);
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	0e 94 14 03 	call	0x628	; 0x628 <Dio_writePin>
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    11fc:	40 e0       	ldi	r20, 0x00	; 0
		break;
	case SPEED_60F:
		u8_speed = 60;
		break;
	case SPEED_90F:
		u8_speed = 90;
    11fe:	da e5       	ldi	r29, 0x5A	; 90
		Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_LOW);
		break;
    1200:	05 c0       	rjmp	.+10     	; 0x120c <Service_UpdateMotors+0x52>
	case SPEED_30B:
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
    1202:	41 e0       	ldi	r20, 0x01	; 1
	case SPEED_90F:
		u8_speed = 90;
		Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_LOW);
		break;
	case SPEED_30B:
		u8_speed = 30;
    1204:	de e1       	ldi	r29, 0x1E	; 30
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
		break;
    1206:	02 c0       	rjmp	.+4      	; 0x120c <Service_UpdateMotors+0x52>
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    1208:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t u8_rightMotorDir=MOTOR_FRWRD;
	
	switch (u8_motorSpeed)
	{
	case SPEED_30F:
		u8_speed = 30;
    120a:	de e1       	ldi	r29, 0x1E	; 30
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
		break;
	}
	
	if (u8_motorAction == ACTION_LEFT)
    120c:	c2 30       	cpi	r28, 0x02	; 2
    120e:	21 f0       	breq	.+8      	; 0x1218 <Service_UpdateMotors+0x5e>
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
    1210:	c3 30       	cpi	r28, 0x03	; 3
    1212:	31 f0       	breq	.+12     	; 0x1220 <Service_UpdateMotors+0x66>
    1214:	c4 2f       	mov	r28, r20
    1216:	07 c0       	rjmp	.+14     	; 0x1226 <Service_UpdateMotors+0x6c>
	
	if (u8_motorAction == ACTION_LEFT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
    1218:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	if (u8_motorAction == ACTION_LEFT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
    121a:	40 e0       	ldi	r20, 0x00	; 0
		break;
	}
	
	if (u8_motorAction == ACTION_LEFT)
	{
		u8_speed = 30;
    121c:	de e1       	ldi	r29, 0x1E	; 30
    121e:	03 c0       	rjmp	.+6      	; 0x1226 <Service_UpdateMotors+0x6c>
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_FRWRD;
    1220:	c0 e0       	ldi	r28, 0x00	; 0
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
    1222:	41 e0       	ldi	r20, 0x01	; 1
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
	{
		u8_speed = 30;
    1224:	de e1       	ldi	r29, 0x1E	; 30
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_FRWRD;
	}
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_LEFT, u8_speed, u8_leftMotorDir))
    1226:	6d 2f       	mov	r22, r29
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	0e 94 42 01 	call	0x284	; 0x284 <Motor_run>
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	49 f4       	brne	.+18     	; 0x1244 <Service_UpdateMotors+0x8a>
		return SRVC_STATUS_ERROR_NOK;
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_RIGHT, u8_speed, u8_rightMotorDir))
    1232:	4c 2f       	mov	r20, r28
    1234:	6d 2f       	mov	r22, r29
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	0e 94 42 01 	call	0x284	; 0x284 <Motor_run>
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	21 f0       	breq	.+8      	; 0x1248 <Service_UpdateMotors+0x8e>
		return SRVC_STATUS_ERROR_NOK;
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	03 c0       	rjmp	.+6      	; 0x124a <Service_UpdateMotors+0x90>
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_FRWRD;
	}
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_LEFT, u8_speed, u8_leftMotorDir))
		return SRVC_STATUS_ERROR_NOK;
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	01 c0       	rjmp	.+2      	; 0x124a <Service_UpdateMotors+0x90>
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_RIGHT, u8_speed, u8_rightMotorDir))
		return SRVC_STATUS_ERROR_NOK;
	return  SRVC_STATUS_ERROR_OK;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	08 95       	ret

00001250 <__subsf3>:
    1250:	50 58       	subi	r21, 0x80	; 128

00001252 <__addsf3>:
    1252:	bb 27       	eor	r27, r27
    1254:	aa 27       	eor	r26, r26
    1256:	0e 94 40 09 	call	0x1280	; 0x1280 <__addsf3x>
    125a:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__fp_round>
    125e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__fp_pscA>
    1262:	38 f0       	brcs	.+14     	; 0x1272 <__addsf3+0x20>
    1264:	0e 94 83 0a 	call	0x1506	; 0x1506 <__fp_pscB>
    1268:	20 f0       	brcs	.+8      	; 0x1272 <__addsf3+0x20>
    126a:	39 f4       	brne	.+14     	; 0x127a <__addsf3+0x28>
    126c:	9f 3f       	cpi	r25, 0xFF	; 255
    126e:	19 f4       	brne	.+6      	; 0x1276 <__addsf3+0x24>
    1270:	26 f4       	brtc	.+8      	; 0x127a <__addsf3+0x28>
    1272:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <__fp_nan>
    1276:	0e f4       	brtc	.+2      	; 0x127a <__addsf3+0x28>
    1278:	e0 95       	com	r30
    127a:	e7 fb       	bst	r30, 7
    127c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_inf>

00001280 <__addsf3x>:
    1280:	e9 2f       	mov	r30, r25
    1282:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_split3>
    1286:	58 f3       	brcs	.-42     	; 0x125e <__addsf3+0xc>
    1288:	ba 17       	cp	r27, r26
    128a:	62 07       	cpc	r22, r18
    128c:	73 07       	cpc	r23, r19
    128e:	84 07       	cpc	r24, r20
    1290:	95 07       	cpc	r25, r21
    1292:	20 f0       	brcs	.+8      	; 0x129c <__addsf3x+0x1c>
    1294:	79 f4       	brne	.+30     	; 0x12b4 <__addsf3x+0x34>
    1296:	a6 f5       	brtc	.+104    	; 0x1300 <__addsf3x+0x80>
    1298:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__fp_zero>
    129c:	0e f4       	brtc	.+2      	; 0x12a0 <__addsf3x+0x20>
    129e:	e0 95       	com	r30
    12a0:	0b 2e       	mov	r0, r27
    12a2:	ba 2f       	mov	r27, r26
    12a4:	a0 2d       	mov	r26, r0
    12a6:	0b 01       	movw	r0, r22
    12a8:	b9 01       	movw	r22, r18
    12aa:	90 01       	movw	r18, r0
    12ac:	0c 01       	movw	r0, r24
    12ae:	ca 01       	movw	r24, r20
    12b0:	a0 01       	movw	r20, r0
    12b2:	11 24       	eor	r1, r1
    12b4:	ff 27       	eor	r31, r31
    12b6:	59 1b       	sub	r21, r25
    12b8:	99 f0       	breq	.+38     	; 0x12e0 <__addsf3x+0x60>
    12ba:	59 3f       	cpi	r21, 0xF9	; 249
    12bc:	50 f4       	brcc	.+20     	; 0x12d2 <__addsf3x+0x52>
    12be:	50 3e       	cpi	r21, 0xE0	; 224
    12c0:	68 f1       	brcs	.+90     	; 0x131c <__addsf3x+0x9c>
    12c2:	1a 16       	cp	r1, r26
    12c4:	f0 40       	sbci	r31, 0x00	; 0
    12c6:	a2 2f       	mov	r26, r18
    12c8:	23 2f       	mov	r18, r19
    12ca:	34 2f       	mov	r19, r20
    12cc:	44 27       	eor	r20, r20
    12ce:	58 5f       	subi	r21, 0xF8	; 248
    12d0:	f3 cf       	rjmp	.-26     	; 0x12b8 <__addsf3x+0x38>
    12d2:	46 95       	lsr	r20
    12d4:	37 95       	ror	r19
    12d6:	27 95       	ror	r18
    12d8:	a7 95       	ror	r26
    12da:	f0 40       	sbci	r31, 0x00	; 0
    12dc:	53 95       	inc	r21
    12de:	c9 f7       	brne	.-14     	; 0x12d2 <__addsf3x+0x52>
    12e0:	7e f4       	brtc	.+30     	; 0x1300 <__addsf3x+0x80>
    12e2:	1f 16       	cp	r1, r31
    12e4:	ba 0b       	sbc	r27, r26
    12e6:	62 0b       	sbc	r22, r18
    12e8:	73 0b       	sbc	r23, r19
    12ea:	84 0b       	sbc	r24, r20
    12ec:	ba f0       	brmi	.+46     	; 0x131c <__addsf3x+0x9c>
    12ee:	91 50       	subi	r25, 0x01	; 1
    12f0:	a1 f0       	breq	.+40     	; 0x131a <__addsf3x+0x9a>
    12f2:	ff 0f       	add	r31, r31
    12f4:	bb 1f       	adc	r27, r27
    12f6:	66 1f       	adc	r22, r22
    12f8:	77 1f       	adc	r23, r23
    12fa:	88 1f       	adc	r24, r24
    12fc:	c2 f7       	brpl	.-16     	; 0x12ee <__addsf3x+0x6e>
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <__addsf3x+0x9c>
    1300:	ba 0f       	add	r27, r26
    1302:	62 1f       	adc	r22, r18
    1304:	73 1f       	adc	r23, r19
    1306:	84 1f       	adc	r24, r20
    1308:	48 f4       	brcc	.+18     	; 0x131c <__addsf3x+0x9c>
    130a:	87 95       	ror	r24
    130c:	77 95       	ror	r23
    130e:	67 95       	ror	r22
    1310:	b7 95       	ror	r27
    1312:	f7 95       	ror	r31
    1314:	9e 3f       	cpi	r25, 0xFE	; 254
    1316:	08 f0       	brcs	.+2      	; 0x131a <__addsf3x+0x9a>
    1318:	b0 cf       	rjmp	.-160    	; 0x127a <__addsf3+0x28>
    131a:	93 95       	inc	r25
    131c:	88 0f       	add	r24, r24
    131e:	08 f0       	brcs	.+2      	; 0x1322 <__addsf3x+0xa2>
    1320:	99 27       	eor	r25, r25
    1322:	ee 0f       	add	r30, r30
    1324:	97 95       	ror	r25
    1326:	87 95       	ror	r24
    1328:	08 95       	ret

0000132a <__divsf3>:
    132a:	0e 94 a9 09 	call	0x1352	; 0x1352 <__divsf3x>
    132e:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__fp_round>
    1332:	0e 94 83 0a 	call	0x1506	; 0x1506 <__fp_pscB>
    1336:	58 f0       	brcs	.+22     	; 0x134e <__divsf3+0x24>
    1338:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__fp_pscA>
    133c:	40 f0       	brcs	.+16     	; 0x134e <__divsf3+0x24>
    133e:	29 f4       	brne	.+10     	; 0x134a <__divsf3+0x20>
    1340:	5f 3f       	cpi	r21, 0xFF	; 255
    1342:	29 f0       	breq	.+10     	; 0x134e <__divsf3+0x24>
    1344:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_inf>
    1348:	51 11       	cpse	r21, r1
    134a:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_szero>
    134e:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <__fp_nan>

00001352 <__divsf3x>:
    1352:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_split3>
    1356:	68 f3       	brcs	.-38     	; 0x1332 <__divsf3+0x8>

00001358 <__divsf3_pse>:
    1358:	99 23       	and	r25, r25
    135a:	b1 f3       	breq	.-20     	; 0x1348 <__divsf3+0x1e>
    135c:	55 23       	and	r21, r21
    135e:	91 f3       	breq	.-28     	; 0x1344 <__divsf3+0x1a>
    1360:	95 1b       	sub	r25, r21
    1362:	55 0b       	sbc	r21, r21
    1364:	bb 27       	eor	r27, r27
    1366:	aa 27       	eor	r26, r26
    1368:	62 17       	cp	r22, r18
    136a:	73 07       	cpc	r23, r19
    136c:	84 07       	cpc	r24, r20
    136e:	38 f0       	brcs	.+14     	; 0x137e <__divsf3_pse+0x26>
    1370:	9f 5f       	subi	r25, 0xFF	; 255
    1372:	5f 4f       	sbci	r21, 0xFF	; 255
    1374:	22 0f       	add	r18, r18
    1376:	33 1f       	adc	r19, r19
    1378:	44 1f       	adc	r20, r20
    137a:	aa 1f       	adc	r26, r26
    137c:	a9 f3       	breq	.-22     	; 0x1368 <__divsf3_pse+0x10>
    137e:	35 d0       	rcall	.+106    	; 0x13ea <__divsf3_pse+0x92>
    1380:	0e 2e       	mov	r0, r30
    1382:	3a f0       	brmi	.+14     	; 0x1392 <__divsf3_pse+0x3a>
    1384:	e0 e8       	ldi	r30, 0x80	; 128
    1386:	32 d0       	rcall	.+100    	; 0x13ec <__divsf3_pse+0x94>
    1388:	91 50       	subi	r25, 0x01	; 1
    138a:	50 40       	sbci	r21, 0x00	; 0
    138c:	e6 95       	lsr	r30
    138e:	00 1c       	adc	r0, r0
    1390:	ca f7       	brpl	.-14     	; 0x1384 <__divsf3_pse+0x2c>
    1392:	2b d0       	rcall	.+86     	; 0x13ea <__divsf3_pse+0x92>
    1394:	fe 2f       	mov	r31, r30
    1396:	29 d0       	rcall	.+82     	; 0x13ea <__divsf3_pse+0x92>
    1398:	66 0f       	add	r22, r22
    139a:	77 1f       	adc	r23, r23
    139c:	88 1f       	adc	r24, r24
    139e:	bb 1f       	adc	r27, r27
    13a0:	26 17       	cp	r18, r22
    13a2:	37 07       	cpc	r19, r23
    13a4:	48 07       	cpc	r20, r24
    13a6:	ab 07       	cpc	r26, r27
    13a8:	b0 e8       	ldi	r27, 0x80	; 128
    13aa:	09 f0       	breq	.+2      	; 0x13ae <__divsf3_pse+0x56>
    13ac:	bb 0b       	sbc	r27, r27
    13ae:	80 2d       	mov	r24, r0
    13b0:	bf 01       	movw	r22, r30
    13b2:	ff 27       	eor	r31, r31
    13b4:	93 58       	subi	r25, 0x83	; 131
    13b6:	5f 4f       	sbci	r21, 0xFF	; 255
    13b8:	3a f0       	brmi	.+14     	; 0x13c8 <__divsf3_pse+0x70>
    13ba:	9e 3f       	cpi	r25, 0xFE	; 254
    13bc:	51 05       	cpc	r21, r1
    13be:	78 f0       	brcs	.+30     	; 0x13de <__divsf3_pse+0x86>
    13c0:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_inf>
    13c4:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_szero>
    13c8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ca:	e4 f3       	brlt	.-8      	; 0x13c4 <__divsf3_pse+0x6c>
    13cc:	98 3e       	cpi	r25, 0xE8	; 232
    13ce:	d4 f3       	brlt	.-12     	; 0x13c4 <__divsf3_pse+0x6c>
    13d0:	86 95       	lsr	r24
    13d2:	77 95       	ror	r23
    13d4:	67 95       	ror	r22
    13d6:	b7 95       	ror	r27
    13d8:	f7 95       	ror	r31
    13da:	9f 5f       	subi	r25, 0xFF	; 255
    13dc:	c9 f7       	brne	.-14     	; 0x13d0 <__divsf3_pse+0x78>
    13de:	88 0f       	add	r24, r24
    13e0:	91 1d       	adc	r25, r1
    13e2:	96 95       	lsr	r25
    13e4:	87 95       	ror	r24
    13e6:	97 f9       	bld	r25, 7
    13e8:	08 95       	ret
    13ea:	e1 e0       	ldi	r30, 0x01	; 1
    13ec:	66 0f       	add	r22, r22
    13ee:	77 1f       	adc	r23, r23
    13f0:	88 1f       	adc	r24, r24
    13f2:	bb 1f       	adc	r27, r27
    13f4:	62 17       	cp	r22, r18
    13f6:	73 07       	cpc	r23, r19
    13f8:	84 07       	cpc	r24, r20
    13fa:	ba 07       	cpc	r27, r26
    13fc:	20 f0       	brcs	.+8      	; 0x1406 <__divsf3_pse+0xae>
    13fe:	62 1b       	sub	r22, r18
    1400:	73 0b       	sbc	r23, r19
    1402:	84 0b       	sbc	r24, r20
    1404:	ba 0b       	sbc	r27, r26
    1406:	ee 1f       	adc	r30, r30
    1408:	88 f7       	brcc	.-30     	; 0x13ec <__divsf3_pse+0x94>
    140a:	e0 95       	com	r30
    140c:	08 95       	ret

0000140e <__fixunssfsi>:
    140e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__fp_splitA>
    1412:	88 f0       	brcs	.+34     	; 0x1436 <__fixunssfsi+0x28>
    1414:	9f 57       	subi	r25, 0x7F	; 127
    1416:	98 f0       	brcs	.+38     	; 0x143e <__fixunssfsi+0x30>
    1418:	b9 2f       	mov	r27, r25
    141a:	99 27       	eor	r25, r25
    141c:	b7 51       	subi	r27, 0x17	; 23
    141e:	b0 f0       	brcs	.+44     	; 0x144c <__fixunssfsi+0x3e>
    1420:	e1 f0       	breq	.+56     	; 0x145a <__fixunssfsi+0x4c>
    1422:	66 0f       	add	r22, r22
    1424:	77 1f       	adc	r23, r23
    1426:	88 1f       	adc	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	1a f0       	brmi	.+6      	; 0x1432 <__fixunssfsi+0x24>
    142c:	ba 95       	dec	r27
    142e:	c9 f7       	brne	.-14     	; 0x1422 <__fixunssfsi+0x14>
    1430:	14 c0       	rjmp	.+40     	; 0x145a <__fixunssfsi+0x4c>
    1432:	b1 30       	cpi	r27, 0x01	; 1
    1434:	91 f0       	breq	.+36     	; 0x145a <__fixunssfsi+0x4c>
    1436:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_zero>
    143a:	b1 e0       	ldi	r27, 0x01	; 1
    143c:	08 95       	ret
    143e:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__fp_zero>
    1442:	67 2f       	mov	r22, r23
    1444:	78 2f       	mov	r23, r24
    1446:	88 27       	eor	r24, r24
    1448:	b8 5f       	subi	r27, 0xF8	; 248
    144a:	39 f0       	breq	.+14     	; 0x145a <__fixunssfsi+0x4c>
    144c:	b9 3f       	cpi	r27, 0xF9	; 249
    144e:	cc f3       	brlt	.-14     	; 0x1442 <__fixunssfsi+0x34>
    1450:	86 95       	lsr	r24
    1452:	77 95       	ror	r23
    1454:	67 95       	ror	r22
    1456:	b3 95       	inc	r27
    1458:	d9 f7       	brne	.-10     	; 0x1450 <__fixunssfsi+0x42>
    145a:	3e f4       	brtc	.+14     	; 0x146a <__fixunssfsi+0x5c>
    145c:	90 95       	com	r25
    145e:	80 95       	com	r24
    1460:	70 95       	com	r23
    1462:	61 95       	neg	r22
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	8f 4f       	sbci	r24, 0xFF	; 255
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	08 95       	ret

0000146c <__floatunsisf>:
    146c:	e8 94       	clt
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <__floatsisf+0x12>

00001470 <__floatsisf>:
    1470:	97 fb       	bst	r25, 7
    1472:	3e f4       	brtc	.+14     	; 0x1482 <__floatsisf+0x12>
    1474:	90 95       	com	r25
    1476:	80 95       	com	r24
    1478:	70 95       	com	r23
    147a:	61 95       	neg	r22
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	8f 4f       	sbci	r24, 0xFF	; 255
    1480:	9f 4f       	sbci	r25, 0xFF	; 255
    1482:	99 23       	and	r25, r25
    1484:	a9 f0       	breq	.+42     	; 0x14b0 <__floatsisf+0x40>
    1486:	f9 2f       	mov	r31, r25
    1488:	96 e9       	ldi	r25, 0x96	; 150
    148a:	bb 27       	eor	r27, r27
    148c:	93 95       	inc	r25
    148e:	f6 95       	lsr	r31
    1490:	87 95       	ror	r24
    1492:	77 95       	ror	r23
    1494:	67 95       	ror	r22
    1496:	b7 95       	ror	r27
    1498:	f1 11       	cpse	r31, r1
    149a:	f8 cf       	rjmp	.-16     	; 0x148c <__floatsisf+0x1c>
    149c:	fa f4       	brpl	.+62     	; 0x14dc <__floatsisf+0x6c>
    149e:	bb 0f       	add	r27, r27
    14a0:	11 f4       	brne	.+4      	; 0x14a6 <__floatsisf+0x36>
    14a2:	60 ff       	sbrs	r22, 0
    14a4:	1b c0       	rjmp	.+54     	; 0x14dc <__floatsisf+0x6c>
    14a6:	6f 5f       	subi	r22, 0xFF	; 255
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	8f 4f       	sbci	r24, 0xFF	; 255
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	16 c0       	rjmp	.+44     	; 0x14dc <__floatsisf+0x6c>
    14b0:	88 23       	and	r24, r24
    14b2:	11 f0       	breq	.+4      	; 0x14b8 <__floatsisf+0x48>
    14b4:	96 e9       	ldi	r25, 0x96	; 150
    14b6:	11 c0       	rjmp	.+34     	; 0x14da <__floatsisf+0x6a>
    14b8:	77 23       	and	r23, r23
    14ba:	21 f0       	breq	.+8      	; 0x14c4 <__floatsisf+0x54>
    14bc:	9e e8       	ldi	r25, 0x8E	; 142
    14be:	87 2f       	mov	r24, r23
    14c0:	76 2f       	mov	r23, r22
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <__floatsisf+0x5e>
    14c4:	66 23       	and	r22, r22
    14c6:	71 f0       	breq	.+28     	; 0x14e4 <__floatsisf+0x74>
    14c8:	96 e8       	ldi	r25, 0x86	; 134
    14ca:	86 2f       	mov	r24, r22
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	2a f0       	brmi	.+10     	; 0x14dc <__floatsisf+0x6c>
    14d2:	9a 95       	dec	r25
    14d4:	66 0f       	add	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	88 1f       	adc	r24, r24
    14da:	da f7       	brpl	.-10     	; 0x14d2 <__floatsisf+0x62>
    14dc:	88 0f       	add	r24, r24
    14de:	96 95       	lsr	r25
    14e0:	87 95       	ror	r24
    14e2:	97 f9       	bld	r25, 7
    14e4:	08 95       	ret

000014e6 <__fp_inf>:
    14e6:	97 f9       	bld	r25, 7
    14e8:	9f 67       	ori	r25, 0x7F	; 127
    14ea:	80 e8       	ldi	r24, 0x80	; 128
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	08 95       	ret

000014f2 <__fp_nan>:
    14f2:	9f ef       	ldi	r25, 0xFF	; 255
    14f4:	80 ec       	ldi	r24, 0xC0	; 192
    14f6:	08 95       	ret

000014f8 <__fp_pscA>:
    14f8:	00 24       	eor	r0, r0
    14fa:	0a 94       	dec	r0
    14fc:	16 16       	cp	r1, r22
    14fe:	17 06       	cpc	r1, r23
    1500:	18 06       	cpc	r1, r24
    1502:	09 06       	cpc	r0, r25
    1504:	08 95       	ret

00001506 <__fp_pscB>:
    1506:	00 24       	eor	r0, r0
    1508:	0a 94       	dec	r0
    150a:	12 16       	cp	r1, r18
    150c:	13 06       	cpc	r1, r19
    150e:	14 06       	cpc	r1, r20
    1510:	05 06       	cpc	r0, r21
    1512:	08 95       	ret

00001514 <__fp_round>:
    1514:	09 2e       	mov	r0, r25
    1516:	03 94       	inc	r0
    1518:	00 0c       	add	r0, r0
    151a:	11 f4       	brne	.+4      	; 0x1520 <__fp_round+0xc>
    151c:	88 23       	and	r24, r24
    151e:	52 f0       	brmi	.+20     	; 0x1534 <__fp_round+0x20>
    1520:	bb 0f       	add	r27, r27
    1522:	40 f4       	brcc	.+16     	; 0x1534 <__fp_round+0x20>
    1524:	bf 2b       	or	r27, r31
    1526:	11 f4       	brne	.+4      	; 0x152c <__fp_round+0x18>
    1528:	60 ff       	sbrs	r22, 0
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <__fp_round+0x20>
    152c:	6f 5f       	subi	r22, 0xFF	; 255
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	8f 4f       	sbci	r24, 0xFF	; 255
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	08 95       	ret

00001536 <__fp_split3>:
    1536:	57 fd       	sbrc	r21, 7
    1538:	90 58       	subi	r25, 0x80	; 128
    153a:	44 0f       	add	r20, r20
    153c:	55 1f       	adc	r21, r21
    153e:	59 f0       	breq	.+22     	; 0x1556 <__fp_splitA+0x10>
    1540:	5f 3f       	cpi	r21, 0xFF	; 255
    1542:	71 f0       	breq	.+28     	; 0x1560 <__fp_splitA+0x1a>
    1544:	47 95       	ror	r20

00001546 <__fp_splitA>:
    1546:	88 0f       	add	r24, r24
    1548:	97 fb       	bst	r25, 7
    154a:	99 1f       	adc	r25, r25
    154c:	61 f0       	breq	.+24     	; 0x1566 <__fp_splitA+0x20>
    154e:	9f 3f       	cpi	r25, 0xFF	; 255
    1550:	79 f0       	breq	.+30     	; 0x1570 <__fp_splitA+0x2a>
    1552:	87 95       	ror	r24
    1554:	08 95       	ret
    1556:	12 16       	cp	r1, r18
    1558:	13 06       	cpc	r1, r19
    155a:	14 06       	cpc	r1, r20
    155c:	55 1f       	adc	r21, r21
    155e:	f2 cf       	rjmp	.-28     	; 0x1544 <__fp_split3+0xe>
    1560:	46 95       	lsr	r20
    1562:	f1 df       	rcall	.-30     	; 0x1546 <__fp_splitA>
    1564:	08 c0       	rjmp	.+16     	; 0x1576 <__fp_splitA+0x30>
    1566:	16 16       	cp	r1, r22
    1568:	17 06       	cpc	r1, r23
    156a:	18 06       	cpc	r1, r24
    156c:	99 1f       	adc	r25, r25
    156e:	f1 cf       	rjmp	.-30     	; 0x1552 <__fp_splitA+0xc>
    1570:	86 95       	lsr	r24
    1572:	71 05       	cpc	r23, r1
    1574:	61 05       	cpc	r22, r1
    1576:	08 94       	sec
    1578:	08 95       	ret

0000157a <__fp_zero>:
    157a:	e8 94       	clt

0000157c <__fp_szero>:
    157c:	bb 27       	eor	r27, r27
    157e:	66 27       	eor	r22, r22
    1580:	77 27       	eor	r23, r23
    1582:	cb 01       	movw	r24, r22
    1584:	97 f9       	bld	r25, 7
    1586:	08 95       	ret

00001588 <__mulsf3>:
    1588:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3x>
    158c:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__fp_round>
    1590:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__fp_pscA>
    1594:	38 f0       	brcs	.+14     	; 0x15a4 <__mulsf3+0x1c>
    1596:	0e 94 83 0a 	call	0x1506	; 0x1506 <__fp_pscB>
    159a:	20 f0       	brcs	.+8      	; 0x15a4 <__mulsf3+0x1c>
    159c:	95 23       	and	r25, r21
    159e:	11 f0       	breq	.+4      	; 0x15a4 <__mulsf3+0x1c>
    15a0:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_inf>
    15a4:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <__fp_nan>
    15a8:	11 24       	eor	r1, r1
    15aa:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_szero>

000015ae <__mulsf3x>:
    15ae:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__fp_split3>
    15b2:	70 f3       	brcs	.-36     	; 0x1590 <__mulsf3+0x8>

000015b4 <__mulsf3_pse>:
    15b4:	95 9f       	mul	r25, r21
    15b6:	c1 f3       	breq	.-16     	; 0x15a8 <__mulsf3+0x20>
    15b8:	95 0f       	add	r25, r21
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	55 1f       	adc	r21, r21
    15be:	62 9f       	mul	r22, r18
    15c0:	f0 01       	movw	r30, r0
    15c2:	72 9f       	mul	r23, r18
    15c4:	bb 27       	eor	r27, r27
    15c6:	f0 0d       	add	r31, r0
    15c8:	b1 1d       	adc	r27, r1
    15ca:	63 9f       	mul	r22, r19
    15cc:	aa 27       	eor	r26, r26
    15ce:	f0 0d       	add	r31, r0
    15d0:	b1 1d       	adc	r27, r1
    15d2:	aa 1f       	adc	r26, r26
    15d4:	64 9f       	mul	r22, r20
    15d6:	66 27       	eor	r22, r22
    15d8:	b0 0d       	add	r27, r0
    15da:	a1 1d       	adc	r26, r1
    15dc:	66 1f       	adc	r22, r22
    15de:	82 9f       	mul	r24, r18
    15e0:	22 27       	eor	r18, r18
    15e2:	b0 0d       	add	r27, r0
    15e4:	a1 1d       	adc	r26, r1
    15e6:	62 1f       	adc	r22, r18
    15e8:	73 9f       	mul	r23, r19
    15ea:	b0 0d       	add	r27, r0
    15ec:	a1 1d       	adc	r26, r1
    15ee:	62 1f       	adc	r22, r18
    15f0:	83 9f       	mul	r24, r19
    15f2:	a0 0d       	add	r26, r0
    15f4:	61 1d       	adc	r22, r1
    15f6:	22 1f       	adc	r18, r18
    15f8:	74 9f       	mul	r23, r20
    15fa:	33 27       	eor	r19, r19
    15fc:	a0 0d       	add	r26, r0
    15fe:	61 1d       	adc	r22, r1
    1600:	23 1f       	adc	r18, r19
    1602:	84 9f       	mul	r24, r20
    1604:	60 0d       	add	r22, r0
    1606:	21 1d       	adc	r18, r1
    1608:	82 2f       	mov	r24, r18
    160a:	76 2f       	mov	r23, r22
    160c:	6a 2f       	mov	r22, r26
    160e:	11 24       	eor	r1, r1
    1610:	9f 57       	subi	r25, 0x7F	; 127
    1612:	50 40       	sbci	r21, 0x00	; 0
    1614:	9a f0       	brmi	.+38     	; 0x163c <__mulsf3_pse+0x88>
    1616:	f1 f0       	breq	.+60     	; 0x1654 <__mulsf3_pse+0xa0>
    1618:	88 23       	and	r24, r24
    161a:	4a f0       	brmi	.+18     	; 0x162e <__mulsf3_pse+0x7a>
    161c:	ee 0f       	add	r30, r30
    161e:	ff 1f       	adc	r31, r31
    1620:	bb 1f       	adc	r27, r27
    1622:	66 1f       	adc	r22, r22
    1624:	77 1f       	adc	r23, r23
    1626:	88 1f       	adc	r24, r24
    1628:	91 50       	subi	r25, 0x01	; 1
    162a:	50 40       	sbci	r21, 0x00	; 0
    162c:	a9 f7       	brne	.-22     	; 0x1618 <__mulsf3_pse+0x64>
    162e:	9e 3f       	cpi	r25, 0xFE	; 254
    1630:	51 05       	cpc	r21, r1
    1632:	80 f0       	brcs	.+32     	; 0x1654 <__mulsf3_pse+0xa0>
    1634:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_inf>
    1638:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_szero>
    163c:	5f 3f       	cpi	r21, 0xFF	; 255
    163e:	e4 f3       	brlt	.-8      	; 0x1638 <__mulsf3_pse+0x84>
    1640:	98 3e       	cpi	r25, 0xE8	; 232
    1642:	d4 f3       	brlt	.-12     	; 0x1638 <__mulsf3_pse+0x84>
    1644:	86 95       	lsr	r24
    1646:	77 95       	ror	r23
    1648:	67 95       	ror	r22
    164a:	b7 95       	ror	r27
    164c:	f7 95       	ror	r31
    164e:	e7 95       	ror	r30
    1650:	9f 5f       	subi	r25, 0xFF	; 255
    1652:	c1 f7       	brne	.-16     	; 0x1644 <__mulsf3_pse+0x90>
    1654:	fe 2b       	or	r31, r30
    1656:	88 0f       	add	r24, r24
    1658:	91 1d       	adc	r25, r1
    165a:	96 95       	lsr	r25
    165c:	87 95       	ror	r24
    165e:	97 f9       	bld	r25, 7
    1660:	08 95       	ret

00001662 <__udivmodsi4>:
    1662:	a1 e2       	ldi	r26, 0x21	; 33
    1664:	1a 2e       	mov	r1, r26
    1666:	aa 1b       	sub	r26, r26
    1668:	bb 1b       	sub	r27, r27
    166a:	fd 01       	movw	r30, r26
    166c:	0d c0       	rjmp	.+26     	; 0x1688 <__udivmodsi4_ep>

0000166e <__udivmodsi4_loop>:
    166e:	aa 1f       	adc	r26, r26
    1670:	bb 1f       	adc	r27, r27
    1672:	ee 1f       	adc	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	a2 17       	cp	r26, r18
    1678:	b3 07       	cpc	r27, r19
    167a:	e4 07       	cpc	r30, r20
    167c:	f5 07       	cpc	r31, r21
    167e:	20 f0       	brcs	.+8      	; 0x1688 <__udivmodsi4_ep>
    1680:	a2 1b       	sub	r26, r18
    1682:	b3 0b       	sbc	r27, r19
    1684:	e4 0b       	sbc	r30, r20
    1686:	f5 0b       	sbc	r31, r21

00001688 <__udivmodsi4_ep>:
    1688:	66 1f       	adc	r22, r22
    168a:	77 1f       	adc	r23, r23
    168c:	88 1f       	adc	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	1a 94       	dec	r1
    1692:	69 f7       	brne	.-38     	; 0x166e <__udivmodsi4_loop>
    1694:	60 95       	com	r22
    1696:	70 95       	com	r23
    1698:	80 95       	com	r24
    169a:	90 95       	com	r25
    169c:	9b 01       	movw	r18, r22
    169e:	ac 01       	movw	r20, r24
    16a0:	bd 01       	movw	r22, r26
    16a2:	cf 01       	movw	r24, r30
    16a4:	08 95       	ret

000016a6 <__tablejump2__>:
    16a6:	ee 0f       	add	r30, r30
    16a8:	ff 1f       	adc	r31, r31
    16aa:	05 90       	lpm	r0, Z+
    16ac:	f4 91       	lpm	r31, Z
    16ae:	e0 2d       	mov	r30, r0
    16b0:	09 94       	ijmp

000016b2 <_exit>:
    16b2:	f8 94       	cli

000016b4 <__stop_program>:
    16b4:	ff cf       	rjmp	.-2      	; 0x16b4 <__stop_program>
