
CarControlSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000016e4  00001778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008000a4  008000a4  000017bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000243b  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe2  00000000  00000000  00003ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015d3  00000000  00000000  00004ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000620  00000000  00000000  00006478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001371  00000000  00000000  00006a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001696  00000000  00000000  00007e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000949f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__vector_4>
      14:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__vector_5>
      18:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__vector_6>
      1c:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__vector_7>
      20:	0c 94 5d 06 	jmp	0xcba	; 0xcba <__vector_8>
      24:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_9>
      28:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <__vector_10>
      2c:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	dd 07       	cpc	r29, r29
      56:	e9 07       	cpc	r30, r25
      58:	e0 07       	cpc	r30, r16
      5a:	e3 07       	cpc	r30, r19
      5c:	e6 07       	cpc	r30, r22
      5e:	dd 07       	cpc	r29, r29
      60:	dd 07       	cpc	r29, r29

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	e4 ee       	ldi	r30, 0xE4	; 228
      76:	f6 e1       	ldi	r31, 0x16	; 22
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	a4 3a       	cpi	r26, 0xA4	; 164
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	a4 ea       	ldi	r26, 0xA4	; 164
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	a5 3c       	cpi	r26, 0xC5	; 197
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 33 02 	call	0x466	; 0x466 <main>
      98:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <CarApp_init>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t CarApp_init(void)
{
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
      a0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <enuCurrentAppStatus>
      a4:	84 30       	cpi	r24, 0x04	; 4
      a6:	51 f0       	breq	.+20     	; 0xbc <CarApp_init+0x1c>
	{
		return APP_STATUS_INITIALIZED;
	}
	/* Call the initializer in service layer*/
	if(SRVC_STATUS_ERROR_OK != Service_init())
      a8:	0e 94 a4 08 	call	0x1148	; 0x1148 <Service_init>
      ac:	81 30       	cpi	r24, 0x01	; 1
      ae:	29 f4       	brne	.+10     	; 0xba <CarApp_init+0x1a>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
      b0:	84 e0       	ldi	r24, 0x04	; 4
      b2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <enuCurrentAppStatus>
	return APP_STATUS_ERROR_OK;
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	08 95       	ret
		return APP_STATUS_INITIALIZED;
	}
	/* Call the initializer in service layer*/
	if(SRVC_STATUS_ERROR_OK != Service_init())
	{
		return APP_STATUS_ERROR_NOK;
      ba:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
      bc:	08 95       	ret

000000be <CarApp_update>:
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t CarApp_update(void)
{
	/* Get Button Pressed */
	Service_ReportButton(&gu8_buttonPressed);
      be:	84 ea       	ldi	r24, 0xA4	; 164
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 b9 08 	call	0x1172	; 0x1172 <Service_ReportButton>
	if(gu8_buttonPressed == BUTTON_NULL)
      c6:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
      ca:	8f 3f       	cpi	r24, 0xFF	; 255
      cc:	19 f4       	brne	.+6      	; 0xd4 <CarApp_update+0x16>
		gu8_buttonPressed = CAR_BUTTONS_IDLE;
      ce:	84 e0       	ldi	r24, 0x04	; 4
      d0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__data_end>
	/* Fill the enuCurrentButton according to the button pressed */
	switch (gu8_buttonPressed)
      d4:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end>
      d8:	82 30       	cpi	r24, 0x02	; 2
      da:	31 f1       	breq	.+76     	; 0x128 <CarApp_update+0x6a>
      dc:	28 f4       	brcc	.+10     	; 0xe8 <CarApp_update+0x2a>
      de:	88 23       	and	r24, r24
      e0:	41 f0       	breq	.+16     	; 0xf2 <CarApp_update+0x34>
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	a9 f0       	breq	.+42     	; 0x110 <CarApp_update+0x52>
      e6:	4e c0       	rjmp	.+156    	; 0x184 <CarApp_update+0xc6>
      e8:	83 30       	cpi	r24, 0x03	; 3
      ea:	51 f1       	breq	.+84     	; 0x140 <CarApp_update+0x82>
      ec:	84 30       	cpi	r24, 0x04	; 4
      ee:	f1 f1       	breq	.+124    	; 0x16c <CarApp_update+0xae>
      f0:	49 c0       	rjmp	.+146    	; 0x184 <CarApp_update+0xc6>
	{
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_MOVE_HOLD:
		/* Check if it's already Moving */
		if(enuCurrentButton == CAR_MOVE_HOLD)
      f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      f6:	88 23       	and	r24, r24
      f8:	09 f4       	brne	.+2      	; 0xfc <CarApp_update+0x3e>
      fa:	44 c0       	rjmp	.+136    	; 0x184 <CarApp_update+0xc6>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_MOVE_HOLD;
      fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		enuCurrentAction = CAR_ACTION_MOVE;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		if (enuCurrentGear == CAR_STATE_IDLE)
     100:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <enuCurrentGear>
     104:	66 23       	and	r22, r22
     106:	f1 f1       	breq	.+124    	; 0x184 <CarApp_update+0xc6>
		{
			break;
		}
		Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)enuCurrentGear);
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <Service_UpdateMotors>
		break;
     10e:	3a c0       	rjmp	.+116    	; 0x184 <CarApp_update+0xc6>
		
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_LEFT_HOLD:
		/* Check if it's already Moving Left */
		if(enuCurrentButton == CAR_LEFT_HOLD)
     110:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     114:	81 30       	cpi	r24, 0x01	; 1
     116:	b1 f1       	breq	.+108    	; 0x184 <CarApp_update+0xc6>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_LEFT_HOLD;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		enuCurrentAction = CAR_ACTION_LEFT;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)CAR_STATE_30F);
     11e:	61 e0       	ldi	r22, 0x01	; 1
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <Service_UpdateMotors>
		break;
     126:	2e c0       	rjmp	.+92     	; 0x184 <CarApp_update+0xc6>
		
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_RIGHT_HOLD:
		/* Check if it's already Moving Right */
		if(enuCurrentButton == CAR_RIGHT_HOLD)
     128:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	51 f1       	breq	.+84     	; 0x184 <CarApp_update+0xc6>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_RIGHT_HOLD;
     130:	82 e0       	ldi	r24, 0x02	; 2
     132:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		enuCurrentAction = CAR_ACTION_RIGHT;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)CAR_STATE_30F);
     136:	61 e0       	ldi	r22, 0x01	; 1
     138:	83 e0       	ldi	r24, 0x03	; 3
     13a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <Service_UpdateMotors>
		break;
     13e:	22 c0       	rjmp	.+68     	; 0x184 <CarApp_update+0xc6>
		
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_GEAR_PRESSED:
		/* Check if it's already Moving Right */
		if(enuCurrentButton == CAR_GEAR_PRESSED)
     140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     144:	83 30       	cpi	r24, 0x03	; 3
     146:	f1 f0       	breq	.+60     	; 0x184 <CarApp_update+0xc6>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_GEAR_PRESSED;
     148:	83 e0       	ldi	r24, 0x03	; 3
     14a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		Dio_togglePin(DIO_LED1_CHANNEL_ID);
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	0e 94 c4 03 	call	0x788	; 0x788 <Dio_togglePin>
		/* Update flag indicate the hold state and ignore it */
		
		/* Update the enuCurrentGear */
		if(enuCurrentGear != CAR_STATE_30B)
     154:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <enuCurrentGear>
     158:	84 30       	cpi	r24, 0x04	; 4
     15a:	21 f0       	breq	.+8      	; 0x164 <CarApp_update+0xa6>
			enuCurrentGear++;
     15c:	8f 5f       	subi	r24, 0xFF	; 255
     15e:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <enuCurrentGear>
     162:	10 c0       	rjmp	.+32     	; 0x184 <CarApp_update+0xc6>
		else
			enuCurrentGear = CAR_STATE_30F;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <enuCurrentGear>
     16a:	0c c0       	rjmp	.+24     	; 0x184 <CarApp_update+0xc6>
	
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_BUTTONS_IDLE:
		/* Check if it's already Moving Right */
		if(enuCurrentButton == CAR_BUTTONS_IDLE)
     16c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     170:	84 30       	cpi	r24, 0x04	; 4
     172:	41 f0       	breq	.+16     	; 0x184 <CarApp_update+0xc6>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_BUTTONS_IDLE;
     174:	84 e0       	ldi	r24, 0x04	; 4
     176:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		enuCurrentAction = CAR_ACTION_STOP;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)enuCurrentGear);
     17a:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <enuCurrentGear>
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <Service_UpdateMotors>
	}
	/*******************************************************************************/
	/*******************************************************************************/

	return APP_STATUS_ERROR_OK;
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	08 95       	ret

00000188 <CarApp_start>:
* Description: Function to Start the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t CarApp_start(void)
{
	/* Initialize the Car application */
	CarApp_init();
     188:	0e 94 50 00 	call	0xa0	; 0xa0 <CarApp_init>
	EnableGlbl_Interrupt();
     18c:	8f b7       	in	r24, 0x3f	; 63
     18e:	80 68       	ori	r24, 0x80	; 128
     190:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the car status */
		CarApp_update();
     192:	0e 94 5f 00 	call	0xbe	; 0xbe <CarApp_update>
     196:	fd cf       	rjmp	.-6      	; 0x192 <CarApp_start+0xa>

00000198 <Button_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button module is already initialized */
	if (genu_BttnModuleState == BTTN_STATUS_INIT)
     198:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <genu_BttnModuleState>
     19c:	85 30       	cpi	r24, 0x05	; 5
     19e:	61 f0       	breq	.+24     	; 0x1b8 <Button_init+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(DIO_STATUS_ERROR_OK != Dio_init(strDio_pins))
     1a0:	87 e6       	ldi	r24, 0x67	; 103
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 36 02 	call	0x46c	; 0x46c <Dio_init>
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	29 f4       	brne	.+10     	; 0x1b6 <Button_init+0x1e>
		return BTTN_STATUS_ERROR_NOK;
	genu_BttnModuleState = BTTN_STATUS_INIT;
     1ac:	85 e0       	ldi	r24, 0x05	; 5
     1ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <genu_BttnModuleState>
	return BTTN_STATUS_ERROR_OK;
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	08 95       	ret

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(DIO_STATUS_ERROR_OK != Dio_init(strDio_pins))
		return BTTN_STATUS_ERROR_NOK;
     1b6:	80 e0       	ldi	r24, 0x00	; 0
	genu_BttnModuleState = BTTN_STATUS_INIT;
	return BTTN_STATUS_ERROR_OK;
}
     1b8:	08 95       	ret

000001ba <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
     1ba:	85 30       	cpi	r24, 0x05	; 5
     1bc:	60 f4       	brcc	.+24     	; 0x1d6 <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
     1be:	61 15       	cp	r22, r1
     1c0:	71 05       	cpc	r23, r1
     1c2:	59 f0       	breq	.+22     	; 0x1da <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
     1c4:	e8 2f       	mov	r30, r24
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	ea 55       	subi	r30, 0x5A	; 90
     1ca:	ff 4f       	sbci	r31, 0xFF	; 255
     1cc:	80 81       	ld	r24, Z
     1ce:	fb 01       	movw	r30, r22
     1d0:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if (BUTTONS_USED_NUM < u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
     1da:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
     1dc:	08 95       	ret

000001de <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	1f 92       	push	r1
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
     1ec:	85 30       	cpi	r24, 0x05	; 5
     1ee:	08 f0       	brcs	.+2      	; 0x1f2 <Button_updateState+0x14>
     1f0:	51 c0       	rjmp	.+162    	; 0x294 <Button_updateState+0xb6>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
     1f2:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	/* Read the Pin and put its state in the global variable */
	Dio_readPin(gau8_buttonsUsed[u8_bttnID], &u8_valueTemp);
     1f4:	08 2f       	mov	r16, r24
     1f6:	10 e0       	ldi	r17, 0x00	; 0
     1f8:	f8 01       	movw	r30, r16
     1fa:	ed 59       	subi	r30, 0x9D	; 157
     1fc:	ff 4f       	sbci	r31, 0xFF	; 255
     1fe:	be 01       	movw	r22, r28
     200:	6f 5f       	subi	r22, 0xFF	; 255
     202:	7f 4f       	sbci	r23, 0xFF	; 255
     204:	80 81       	ld	r24, Z
     206:	0e 94 1c 04 	call	0x838	; 0x838 <Dio_readPin>
	if(u8_valueTemp == PIN_HIGH)
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	f9 f4       	brne	.+62     	; 0x24e <Button_updateState+0x70>
     210:	04 c0       	rjmp	.+8      	; 0x21a <Button_updateState+0x3c>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
     212:	01 96       	adiw	r24, 0x01	; 1
     214:	a1 1d       	adc	r26, r1
     216:	b1 1d       	adc	r27, r1
     218:	03 c0       	rjmp	.+6      	; 0x220 <Button_updateState+0x42>
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	dc 01       	movw	r26, r24
     220:	88 3b       	cpi	r24, 0xB8	; 184
     222:	2b e0       	ldi	r18, 0x0B	; 11
     224:	92 07       	cpc	r25, r18
     226:	a1 05       	cpc	r26, r1
     228:	b1 05       	cpc	r27, r1
     22a:	98 f3       	brcs	.-26     	; 0x212 <Button_updateState+0x34>
		/* De bouncing Check */
		Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp);
     22c:	be 01       	movw	r22, r28
     22e:	6f 5f       	subi	r22, 0xFF	; 255
     230:	7f 4f       	sbci	r23, 0xFF	; 255
     232:	f8 01       	movw	r30, r16
     234:	ed 59       	subi	r30, 0x9D	; 157
     236:	ff 4f       	sbci	r31, 0xFF	; 255
     238:	80 81       	ld	r24, Z
     23a:	0e 94 1c 04 	call	0x838	; 0x838 <Dio_readPin>
		if(u8_valueTemp == PIN_HIGH)
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	81 30       	cpi	r24, 0x01	; 1
     242:	51 f5       	brne	.+84     	; 0x298 <Button_updateState+0xba>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
     244:	f8 01       	movw	r30, r16
     246:	ea 55       	subi	r30, 0x5A	; 90
     248:	ff 4f       	sbci	r31, 0xFF	; 255
     24a:	80 83       	st	Z, r24
     24c:	28 c0       	rjmp	.+80     	; 0x29e <Button_updateState+0xc0>
	}else if (u8_valueTemp == PIN_LOW)
     24e:	88 23       	and	r24, r24
     250:	31 f0       	breq	.+12     	; 0x25e <Button_updateState+0x80>
		/* De bouncing Check */
		Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp);
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	24 c0       	rjmp	.+72     	; 0x29e <Button_updateState+0xc0>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
     256:	01 96       	adiw	r24, 0x01	; 1
     258:	a1 1d       	adc	r26, r1
     25a:	b1 1d       	adc	r27, r1
     25c:	03 c0       	rjmp	.+6      	; 0x264 <Button_updateState+0x86>
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	dc 01       	movw	r26, r24
     264:	88 3b       	cpi	r24, 0xB8	; 184
     266:	2b e0       	ldi	r18, 0x0B	; 11
     268:	92 07       	cpc	r25, r18
     26a:	a1 05       	cpc	r26, r1
     26c:	b1 05       	cpc	r27, r1
     26e:	98 f3       	brcs	.-26     	; 0x256 <Button_updateState+0x78>
		/* De bouncing Check */
		Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp);
     270:	be 01       	movw	r22, r28
     272:	6f 5f       	subi	r22, 0xFF	; 255
     274:	7f 4f       	sbci	r23, 0xFF	; 255
     276:	f8 01       	movw	r30, r16
     278:	ed 59       	subi	r30, 0x9D	; 157
     27a:	ff 4f       	sbci	r31, 0xFF	; 255
     27c:	80 81       	ld	r24, Z
     27e:	0e 94 1c 04 	call	0x838	; 0x838 <Dio_readPin>
		if(u8_valueTemp == PIN_LOW)
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	81 11       	cpse	r24, r1
     286:	0a c0       	rjmp	.+20     	; 0x29c <Button_updateState+0xbe>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
     288:	f8 01       	movw	r30, r16
     28a:	ea 55       	subi	r30, 0x5A	; 90
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	05 c0       	rjmp	.+10     	; 0x29e <Button_updateState+0xc0>
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if(u8_bttnID > BUTTONS_USED_NUM)
		return BTTN_STATUS_ERROR_ID_INVALID;
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	03 c0       	rjmp	.+6      	; 0x29e <Button_updateState+0xc0>
		/* De bouncing Check */
		Dio_readPin(gau8_buttonsUsed[u8_bttnID],&u8_valueTemp);
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	01 c0       	rjmp	.+2      	; 0x29e <Button_updateState+0xc0>
     29c:	81 e0       	ldi	r24, 0x01	; 1
}
     29e:	0f 90       	pop	r0
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	1f 91       	pop	r17
     2a6:	0f 91       	pop	r16
     2a8:	08 95       	ret

000002aa <Motor_init>:
// 	}else{/*Nothing to here*/}
		
/**************************************************************************************/
/*								End of Error Checking								  */
/**************************************************************************************/
	SWPwm_Init();
     2aa:	0e 94 4e 07 	call	0xe9c	; 0xe9c <SWPwm_Init>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	return MOTOR_STATUS_ERROR_OK;
}
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	08 95       	ret

000002b2 <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
	/**************************************************************************************/
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
     2bc:	82 30       	cpi	r24, 0x02	; 2
     2be:	08 f0       	brcs	.+2      	; 0x2c2 <Motor_run+0x10>
     2c0:	56 c0       	rjmp	.+172    	; 0x36e <Motor_run+0xbc>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
     2c2:	65 36       	cpi	r22, 0x65	; 101
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <Motor_run+0x16>
     2c6:	55 c0       	rjmp	.+170    	; 0x372 <Motor_run+0xc0>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
     2c8:	42 30       	cpi	r20, 0x02	; 2
     2ca:	08 f0       	brcs	.+2      	; 0x2ce <Motor_run+0x1c>
     2cc:	54 c0       	rjmp	.+168    	; 0x376 <Motor_run+0xc4>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
     2ce:	c8 2f       	mov	r28, r24
     2d0:	d0 e0       	ldi	r29, 0x00	; 0
     2d2:	fe 01       	movw	r30, r28
     2d4:	e6 55       	subi	r30, 0x56	; 86
     2d6:	ff 4f       	sbci	r31, 0xFF	; 255
     2d8:	80 81       	ld	r24, Z
     2da:	81 30       	cpi	r24, 0x01	; 1
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <Motor_run+0x2e>
     2de:	4d c0       	rjmp	.+154    	; 0x37a <Motor_run+0xc8>
     2e0:	16 2f       	mov	r17, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_direction == MOTOR_DIR_CLK_WISE)
     2e2:	41 11       	cpse	r20, r1
     2e4:	16 c0       	rjmp	.+44     	; 0x312 <Motor_run+0x60>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
     2e6:	ce 01       	movw	r24, r28
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	8c 0f       	add	r24, r28
     2f2:	9d 1f       	adc	r25, r29
     2f4:	9c 01       	movw	r18, r24
     2f6:	2c 56       	subi	r18, 0x6C	; 108
     2f8:	3f 4f       	sbci	r19, 0xFF	; 255
     2fa:	79 01       	movw	r14, r18
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	f9 01       	movw	r30, r18
     300:	81 81       	ldd	r24, Z+1	; 0x01
     302:	0e 94 2b 03 	call	0x656	; 0x656 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
     306:	60 e0       	ldi	r22, 0x00	; 0
     308:	f7 01       	movw	r30, r14
     30a:	82 81       	ldd	r24, Z+2	; 0x02
     30c:	0e 94 2b 03 	call	0x656	; 0x656 <Dio_writePin>
     310:	16 c0       	rjmp	.+44     	; 0x33e <Motor_run+0x8c>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE)
     312:	41 30       	cpi	r20, 0x01	; 1
     314:	a1 f4       	brne	.+40     	; 0x33e <Motor_run+0x8c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
     316:	25 e0       	ldi	r18, 0x05	; 5
     318:	2c 9f       	mul	r18, r28
     31a:	c0 01       	movw	r24, r0
     31c:	2d 9f       	mul	r18, r29
     31e:	90 0d       	add	r25, r0
     320:	11 24       	eor	r1, r1
     322:	9c 01       	movw	r18, r24
     324:	2c 56       	subi	r18, 0x6C	; 108
     326:	3f 4f       	sbci	r19, 0xFF	; 255
     328:	79 01       	movw	r14, r18
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	f9 01       	movw	r30, r18
     32e:	81 81       	ldd	r24, Z+1	; 0x01
     330:	0e 94 2b 03 	call	0x656	; 0x656 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	f7 01       	movw	r30, r14
     338:	82 81       	ldd	r24, Z+2	; 0x02
     33a:	0e 94 2b 03 	call	0x656	; 0x656 <Dio_writePin>
	}
	
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
     33e:	fe 01       	movw	r30, r28
     340:	e6 55       	subi	r30, 0x56	; 86
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	80 83       	st	Z, r24
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
     348:	ce 01       	movw	r24, r28
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25
     352:	c8 0f       	add	r28, r24
     354:	d9 1f       	adc	r29, r25
     356:	cc 56       	subi	r28, 0x6C	; 108
     358:	df 4f       	sbci	r29, 0xFF	; 255
     35a:	4b 81       	ldd	r20, Y+3	; 0x03
     35c:	5c 81       	ldd	r21, Y+4	; 0x04
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	21 2f       	mov	r18, r17
     364:	88 81       	ld	r24, Y
     366:	0e 94 56 07 	call	0xeac	; 0xeac <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	07 c0       	rjmp	.+14     	; 0x37c <Motor_run+0xca>
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	05 c0       	rjmp	.+10     	; 0x37c <Motor_run+0xca>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
     372:	83 e0       	ldi	r24, 0x03	; 3
     374:	03 c0       	rjmp	.+6      	; 0x37c <Motor_run+0xca>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
     376:	84 e0       	ldi	r24, 0x04	; 4
     378:	01 c0       	rjmp	.+2      	; 0x37c <Motor_run+0xca>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
     37a:	85 e0       	ldi	r24, 0x05	; 5
	
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	08 95       	ret

00000388 <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
     392:	82 30       	cpi	r24, 0x02	; 2
     394:	08 f0       	brcs	.+2      	; 0x398 <Motor_stop+0x10>
     396:	60 c0       	rjmp	.+192    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     398:	c8 2f       	mov	r28, r24
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
     39a:	08 2f       	mov	r16, r24
     39c:	10 e0       	ldi	r17, 0x00	; 0
     39e:	78 01       	movw	r14, r16
     3a0:	ee 0c       	add	r14, r14
     3a2:	ff 1c       	adc	r15, r15
     3a4:	ee 0c       	add	r14, r14
     3a6:	ff 1c       	adc	r15, r15
     3a8:	c7 01       	movw	r24, r14
     3aa:	80 0f       	add	r24, r16
     3ac:	91 1f       	adc	r25, r17
     3ae:	9c 01       	movw	r18, r24
     3b0:	2c 56       	subi	r18, 0x6C	; 108
     3b2:	3f 4f       	sbci	r19, 0xFF	; 255
     3b4:	79 01       	movw	r14, r18
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	f9 01       	movw	r30, r18
     3ba:	81 81       	ldd	r24, Z+1	; 0x01
     3bc:	0e 94 2b 03 	call	0x656	; 0x656 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	f7 01       	movw	r30, r14
     3c4:	82 81       	ldd	r24, Z+2	; 0x02
     3c6:	0e 94 2b 03 	call	0x656	; 0x656 <Dio_writePin>
	
	uint8_t u8_loopIndex = 0;
	
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
     3ca:	e0 e0       	ldi	r30, 0x00	; 0
     3cc:	1c c0       	rjmp	.+56     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
	{
		if(u8_loopIndex == u8_motorID)
     3ce:	ec 17       	cp	r30, r28
     3d0:	c9 f0       	breq	.+50     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
     3d2:	d8 01       	movw	r26, r16
     3d4:	aa 0f       	add	r26, r26
     3d6:	bb 1f       	adc	r27, r27
     3d8:	aa 0f       	add	r26, r26
     3da:	bb 1f       	adc	r27, r27
     3dc:	a0 0f       	add	r26, r16
     3de:	b1 1f       	adc	r27, r17
     3e0:	ac 56       	subi	r26, 0x6C	; 108
     3e2:	bf 4f       	sbci	r27, 0xFF	; 255
     3e4:	2c 91       	ld	r18, X
     3e6:	8e 2f       	mov	r24, r30
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	dc 01       	movw	r26, r24
     3ec:	aa 0f       	add	r26, r26
     3ee:	bb 1f       	adc	r27, r27
     3f0:	aa 0f       	add	r26, r26
     3f2:	bb 1f       	adc	r27, r27
     3f4:	8a 0f       	add	r24, r26
     3f6:	9b 1f       	adc	r25, r27
     3f8:	dc 01       	movw	r26, r24
     3fa:	ac 56       	subi	r26, 0x6C	; 108
     3fc:	bf 4f       	sbci	r27, 0xFF	; 255
     3fe:	8c 91       	ld	r24, X
     400:	28 17       	cp	r18, r24
     402:	19 f0       	breq	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
	
	uint8_t u8_loopIndex = 0;
	
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
     404:	ef 5f       	subi	r30, 0xFF	; 255
     406:	e2 30       	cpi	r30, 0x02	; 2
     408:	10 f3       	brcs	.-60     	; 0x3ce <Motor_stop+0x46>
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
		{
			break;
		}
	}
	if(u8_loopIndex == MOTORS_USED_NUM)
     40a:	e2 30       	cpi	r30, 0x02	; 2
     40c:	69 f4       	brne	.+26     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	{
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
     40e:	f8 01       	movw	r30, r16
     410:	ee 0f       	add	r30, r30
     412:	ff 1f       	adc	r31, r31
     414:	ee 0f       	add	r30, r30
     416:	ff 1f       	adc	r31, r31
     418:	e0 0f       	add	r30, r16
     41a:	f1 1f       	adc	r31, r17
     41c:	ec 56       	subi	r30, 0x6C	; 108
     41e:	ff 4f       	sbci	r31, 0xFF	; 255
     420:	80 81       	ld	r24, Z
     422:	0e 94 66 08 	call	0x10cc	; 0x10cc <SWPwm_Stop>
     426:	12 c0       	rjmp	.+36     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
	}else
	{
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED)
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	e6 55       	subi	r30, 0x56	; 86
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	80 81       	ld	r24, Z
     430:	81 11       	cpse	r24, r1
     432:	0c c0       	rjmp	.+24     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
		{
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
     434:	f8 01       	movw	r30, r16
     436:	ee 0f       	add	r30, r30
     438:	ff 1f       	adc	r31, r31
     43a:	ee 0f       	add	r30, r30
     43c:	ff 1f       	adc	r31, r31
     43e:	e0 0f       	add	r30, r16
     440:	f1 1f       	adc	r31, r17
     442:	ec 56       	subi	r30, 0x6C	; 108
     444:	ff 4f       	sbci	r31, 0xFF	; 255
     446:	80 81       	ld	r24, Z
     448:	0e 94 66 08 	call	0x10cc	; 0x10cc <SWPwm_Stop>
		} 
	}
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
     44c:	f8 01       	movw	r30, r16
     44e:	e6 55       	subi	r30, 0x56	; 86
     450:	ff 4f       	sbci	r31, 0xFF	; 255
     452:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	01 c0       	rjmp	.+2      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
     458:	82 e0       	ldi	r24, 0x02	; 2
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
		} 
	}
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
     45a:	cf 91       	pop	r28
     45c:	1f 91       	pop	r17
     45e:	0f 91       	pop	r16
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	08 95       	ret

00000466 <main>:
#include "App Layer/App.h"

int main(void)
{
	
	CarApp_start();
     466:	0e 94 c4 00 	call	0x188	; 0x188 <CarApp_start>
     46a:	ff cf       	rjmp	.-2      	; 0x46a <main+0x4>

0000046c <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
     46c:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
     46e:	89 2b       	or	r24, r25
     470:	09 f4       	brne	.+2      	; 0x474 <Dio_init+0x8>
     472:	e9 c0       	rjmp	.+466    	; 0x646 <Dio_init+0x1da>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	/*-* check if the Dio is already initialized *-*/
	if (DIO_INITIALIZED == u8_Dio_Status)
     474:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <u8_Dio_Status>
     478:	81 30       	cpi	r24, 0x01	; 1
     47a:	09 f4       	brne	.+2      	; 0x47e <Dio_init+0x12>
     47c:	e6 c0       	rjmp	.+460    	; 0x64a <Dio_init+0x1de>
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	d7 c0       	rjmp	.+430    	; 0x630 <Dio_init+0x1c4>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
     482:	e9 2f       	mov	r30, r25
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	ee 0f       	add	r30, r30
     488:	ff 1f       	adc	r31, r31
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	e4 0f       	add	r30, r20
     490:	f5 1f       	adc	r31, r21
     492:	31 81       	ldd	r19, Z+1	; 0x01
     494:	38 30       	cpi	r19, 0x08	; 8
     496:	08 f0       	brcs	.+2      	; 0x49a <Dio_init+0x2e>
     498:	da c0       	rjmp	.+436    	; 0x64e <Dio_init+0x1e2>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
     49a:	20 81       	ld	r18, Z
     49c:	21 30       	cpi	r18, 0x01	; 1
     49e:	c1 f1       	breq	.+112    	; 0x510 <Dio_init+0xa4>
     4a0:	38 f0       	brcs	.+14     	; 0x4b0 <Dio_init+0x44>
     4a2:	22 30       	cpi	r18, 0x02	; 2
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <Dio_init+0x3c>
     4a6:	64 c0       	rjmp	.+200    	; 0x570 <Dio_init+0x104>
     4a8:	23 30       	cpi	r18, 0x03	; 3
     4aa:	09 f4       	brne	.+2      	; 0x4ae <Dio_init+0x42>
     4ac:	91 c0       	rjmp	.+290    	; 0x5d0 <Dio_init+0x164>
     4ae:	d1 c0       	rjmp	.+418    	; 0x652 <Dio_init+0x1e6>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     4b0:	2a b3       	in	r18, 0x1a	; 26
     4b2:	61 e0       	ldi	r22, 0x01	; 1
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	db 01       	movw	r26, r22
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <Dio_init+0x52>
     4ba:	aa 0f       	add	r26, r26
     4bc:	bb 1f       	adc	r27, r27
     4be:	3a 95       	dec	r19
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <Dio_init+0x4e>
     4c2:	8a 2f       	mov	r24, r26
     4c4:	80 95       	com	r24
     4c6:	82 23       	and	r24, r18
     4c8:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     4ca:	aa b3       	in	r26, 0x1a	; 26
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	28 2f       	mov	r18, r24
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	01 80       	ldd	r0, Z+1	; 0x01
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <Dio_init+0x6e>
     4d6:	22 0f       	add	r18, r18
     4d8:	33 1f       	adc	r19, r19
     4da:	0a 94       	dec	r0
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <Dio_init+0x6a>
     4de:	2a 2b       	or	r18, r26
     4e0:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     4e2:	8b b3       	in	r24, 0x1b	; 27
     4e4:	01 80       	ldd	r0, Z+1	; 0x01
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <Dio_init+0x80>
     4e8:	66 0f       	add	r22, r22
     4ea:	77 1f       	adc	r23, r23
     4ec:	0a 94       	dec	r0
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <Dio_init+0x7c>
     4f0:	60 95       	com	r22
     4f2:	68 23       	and	r22, r24
     4f4:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     4f6:	6b b3       	in	r22, 0x1b	; 27
     4f8:	83 81       	ldd	r24, Z+3	; 0x03
     4fa:	28 2f       	mov	r18, r24
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	01 80       	ldd	r0, Z+1	; 0x01
     500:	02 c0       	rjmp	.+4      	; 0x506 <Dio_init+0x9a>
     502:	22 0f       	add	r18, r18
     504:	33 1f       	adc	r19, r19
     506:	0a 94       	dec	r0
     508:	e2 f7       	brpl	.-8      	; 0x502 <Dio_init+0x96>
     50a:	26 2b       	or	r18, r22
     50c:	2b bb       	out	0x1b, r18	; 27
				break;
     50e:	8f c0       	rjmp	.+286    	; 0x62e <Dio_init+0x1c2>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     510:	27 b3       	in	r18, 0x17	; 23
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	db 01       	movw	r26, r22
     518:	02 c0       	rjmp	.+4      	; 0x51e <Dio_init+0xb2>
     51a:	aa 0f       	add	r26, r26
     51c:	bb 1f       	adc	r27, r27
     51e:	3a 95       	dec	r19
     520:	e2 f7       	brpl	.-8      	; 0x51a <Dio_init+0xae>
     522:	8a 2f       	mov	r24, r26
     524:	80 95       	com	r24
     526:	82 23       	and	r24, r18
     528:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     52a:	a7 b3       	in	r26, 0x17	; 23
     52c:	82 81       	ldd	r24, Z+2	; 0x02
     52e:	28 2f       	mov	r18, r24
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	01 80       	ldd	r0, Z+1	; 0x01
     534:	02 c0       	rjmp	.+4      	; 0x53a <Dio_init+0xce>
     536:	22 0f       	add	r18, r18
     538:	33 1f       	adc	r19, r19
     53a:	0a 94       	dec	r0
     53c:	e2 f7       	brpl	.-8      	; 0x536 <Dio_init+0xca>
     53e:	2a 2b       	or	r18, r26
     540:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     542:	88 b3       	in	r24, 0x18	; 24
     544:	01 80       	ldd	r0, Z+1	; 0x01
     546:	02 c0       	rjmp	.+4      	; 0x54c <Dio_init+0xe0>
     548:	66 0f       	add	r22, r22
     54a:	77 1f       	adc	r23, r23
     54c:	0a 94       	dec	r0
     54e:	e2 f7       	brpl	.-8      	; 0x548 <Dio_init+0xdc>
     550:	60 95       	com	r22
     552:	68 23       	and	r22, r24
     554:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     556:	68 b3       	in	r22, 0x18	; 24
     558:	83 81       	ldd	r24, Z+3	; 0x03
     55a:	28 2f       	mov	r18, r24
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	01 80       	ldd	r0, Z+1	; 0x01
     560:	02 c0       	rjmp	.+4      	; 0x566 <Dio_init+0xfa>
     562:	22 0f       	add	r18, r18
     564:	33 1f       	adc	r19, r19
     566:	0a 94       	dec	r0
     568:	e2 f7       	brpl	.-8      	; 0x562 <Dio_init+0xf6>
     56a:	26 2b       	or	r18, r22
     56c:	28 bb       	out	0x18, r18	; 24
				break;
     56e:	5f c0       	rjmp	.+190    	; 0x62e <Dio_init+0x1c2>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     570:	24 b3       	in	r18, 0x14	; 20
     572:	61 e0       	ldi	r22, 0x01	; 1
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	db 01       	movw	r26, r22
     578:	02 c0       	rjmp	.+4      	; 0x57e <Dio_init+0x112>
     57a:	aa 0f       	add	r26, r26
     57c:	bb 1f       	adc	r27, r27
     57e:	3a 95       	dec	r19
     580:	e2 f7       	brpl	.-8      	; 0x57a <Dio_init+0x10e>
     582:	8a 2f       	mov	r24, r26
     584:	80 95       	com	r24
     586:	82 23       	and	r24, r18
     588:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     58a:	a4 b3       	in	r26, 0x14	; 20
     58c:	82 81       	ldd	r24, Z+2	; 0x02
     58e:	28 2f       	mov	r18, r24
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	01 80       	ldd	r0, Z+1	; 0x01
     594:	02 c0       	rjmp	.+4      	; 0x59a <Dio_init+0x12e>
     596:	22 0f       	add	r18, r18
     598:	33 1f       	adc	r19, r19
     59a:	0a 94       	dec	r0
     59c:	e2 f7       	brpl	.-8      	; 0x596 <Dio_init+0x12a>
     59e:	2a 2b       	or	r18, r26
     5a0:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     5a2:	85 b3       	in	r24, 0x15	; 21
     5a4:	01 80       	ldd	r0, Z+1	; 0x01
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <Dio_init+0x140>
     5a8:	66 0f       	add	r22, r22
     5aa:	77 1f       	adc	r23, r23
     5ac:	0a 94       	dec	r0
     5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <Dio_init+0x13c>
     5b0:	60 95       	com	r22
     5b2:	68 23       	and	r22, r24
     5b4:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     5b6:	65 b3       	in	r22, 0x15	; 21
     5b8:	83 81       	ldd	r24, Z+3	; 0x03
     5ba:	28 2f       	mov	r18, r24
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	01 80       	ldd	r0, Z+1	; 0x01
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <Dio_init+0x15a>
     5c2:	22 0f       	add	r18, r18
     5c4:	33 1f       	adc	r19, r19
     5c6:	0a 94       	dec	r0
     5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <Dio_init+0x156>
     5ca:	26 2b       	or	r18, r22
     5cc:	25 bb       	out	0x15, r18	; 21
				break;
     5ce:	2f c0       	rjmp	.+94     	; 0x62e <Dio_init+0x1c2>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     5d0:	21 b3       	in	r18, 0x11	; 17
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	db 01       	movw	r26, r22
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <Dio_init+0x172>
     5da:	aa 0f       	add	r26, r26
     5dc:	bb 1f       	adc	r27, r27
     5de:	3a 95       	dec	r19
     5e0:	e2 f7       	brpl	.-8      	; 0x5da <Dio_init+0x16e>
     5e2:	8a 2f       	mov	r24, r26
     5e4:	80 95       	com	r24
     5e6:	82 23       	and	r24, r18
     5e8:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     5ea:	a1 b3       	in	r26, 0x11	; 17
     5ec:	82 81       	ldd	r24, Z+2	; 0x02
     5ee:	28 2f       	mov	r18, r24
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	01 80       	ldd	r0, Z+1	; 0x01
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <Dio_init+0x18e>
     5f6:	22 0f       	add	r18, r18
     5f8:	33 1f       	adc	r19, r19
     5fa:	0a 94       	dec	r0
     5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <Dio_init+0x18a>
     5fe:	2a 2b       	or	r18, r26
     600:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     602:	82 b3       	in	r24, 0x12	; 18
     604:	01 80       	ldd	r0, Z+1	; 0x01
     606:	02 c0       	rjmp	.+4      	; 0x60c <Dio_init+0x1a0>
     608:	66 0f       	add	r22, r22
     60a:	77 1f       	adc	r23, r23
     60c:	0a 94       	dec	r0
     60e:	e2 f7       	brpl	.-8      	; 0x608 <Dio_init+0x19c>
     610:	60 95       	com	r22
     612:	68 23       	and	r22, r24
     614:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     616:	62 b3       	in	r22, 0x12	; 18
     618:	83 81       	ldd	r24, Z+3	; 0x03
     61a:	28 2f       	mov	r18, r24
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	01 80       	ldd	r0, Z+1	; 0x01
     620:	02 c0       	rjmp	.+4      	; 0x626 <Dio_init+0x1ba>
     622:	22 0f       	add	r18, r18
     624:	33 1f       	adc	r19, r19
     626:	0a 94       	dec	r0
     628:	e2 f7       	brpl	.-8      	; 0x622 <Dio_init+0x1b6>
     62a:	26 2b       	or	r18, r22
     62c:	22 bb       	out	0x12, r18	; 18
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
     62e:	9f 5f       	subi	r25, 0xFF	; 255
     630:	9a 30       	cpi	r25, 0x0A	; 10
     632:	08 f4       	brcc	.+2      	; 0x636 <Dio_init+0x1ca>
     634:	26 cf       	rjmp	.-436    	; 0x482 <Dio_init+0x16>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
     636:	50 93 ae 00 	sts	0x00AE, r21	; 0x8000ae <pstrDio_pinsConfig+0x1>
     63a:	40 93 ad 00 	sts	0x00AD, r20	; 0x8000ad <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
     644:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
     646:	85 e0       	ldi	r24, 0x05	; 5
     648:	08 95       	ret
	}
	/*-* check if the Dio is already initialized *-*/
	if (DIO_INITIALIZED == u8_Dio_Status)
	{
		return DIO_STATUS_ALREADY_INIT;
     64a:	87 e0       	ldi	r24, 0x07	; 7
     64c:	08 95       	ret
/**************************************************************************************/
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
     64e:	83 e0       	ldi	r24, 0x03	; 3
     650:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
     652:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
     654:	08 95       	ret

00000656 <Dio_writePin>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     656:	8b 30       	cpi	r24, 0x0B	; 11
     658:	08 f0       	brcs	.+2      	; 0x65c <Dio_writePin+0x6>
     65a:	90 c0       	rjmp	.+288    	; 0x77c <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     65c:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u8_Dio_Status>
     660:	99 23       	and	r25, r25
     662:	09 f4       	brne	.+2      	; 0x666 <Dio_writePin+0x10>
     664:	8d c0       	rjmp	.+282    	; 0x780 <Dio_writePin+0x12a>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     666:	e8 2f       	mov	r30, r24
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	cf 01       	movw	r24, r30
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <pstrDio_pinsConfig>
     678:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <pstrDio_pinsConfig+0x1>
     67c:	e8 0f       	add	r30, r24
     67e:	f9 1f       	adc	r31, r25
     680:	80 81       	ld	r24, Z
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	21 f1       	breq	.+72     	; 0x6ce <Dio_writePin+0x78>
     686:	30 f0       	brcs	.+12     	; 0x694 <Dio_writePin+0x3e>
     688:	82 30       	cpi	r24, 0x02	; 2
     68a:	f1 f1       	breq	.+124    	; 0x708 <Dio_writePin+0xb2>
     68c:	83 30       	cpi	r24, 0x03	; 3
     68e:	09 f4       	brne	.+2      	; 0x692 <Dio_writePin+0x3c>
     690:	58 c0       	rjmp	.+176    	; 0x742 <Dio_writePin+0xec>
     692:	78 c0       	rjmp	.+240    	; 0x784 <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
     694:	61 30       	cpi	r22, 0x01	; 1
     696:	69 f4       	brne	.+26     	; 0x6b2 <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     698:	2b b3       	in	r18, 0x1b	; 27
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	01 80       	ldd	r0, Z+1	; 0x01
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <Dio_writePin+0x50>
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	0a 94       	dec	r0
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <Dio_writePin+0x4c>
     6aa:	82 2b       	or	r24, r18
     6ac:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     6b2:	2b b3       	in	r18, 0x1b	; 27
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	01 80       	ldd	r0, Z+1	; 0x01
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <Dio_writePin+0x6a>
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	0a 94       	dec	r0
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <Dio_writePin+0x66>
     6c4:	80 95       	com	r24
     6c6:	82 23       	and	r24, r18
     6c8:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
     6ce:	61 30       	cpi	r22, 0x01	; 1
     6d0:	69 f4       	brne	.+26     	; 0x6ec <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     6d2:	28 b3       	in	r18, 0x18	; 24
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	01 80       	ldd	r0, Z+1	; 0x01
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <Dio_writePin+0x8a>
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	0a 94       	dec	r0
     6e2:	e2 f7       	brpl	.-8      	; 0x6dc <Dio_writePin+0x86>
     6e4:	82 2b       	or	r24, r18
     6e6:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     6ec:	28 b3       	in	r18, 0x18	; 24
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	01 80       	ldd	r0, Z+1	; 0x01
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <Dio_writePin+0xa4>
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	0a 94       	dec	r0
     6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <Dio_writePin+0xa0>
     6fe:	80 95       	com	r24
     700:	82 23       	and	r24, r18
     702:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
     708:	61 30       	cpi	r22, 0x01	; 1
     70a:	69 f4       	brne	.+26     	; 0x726 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     70c:	25 b3       	in	r18, 0x15	; 21
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	01 80       	ldd	r0, Z+1	; 0x01
     714:	02 c0       	rjmp	.+4      	; 0x71a <Dio_writePin+0xc4>
     716:	88 0f       	add	r24, r24
     718:	99 1f       	adc	r25, r25
     71a:	0a 94       	dec	r0
     71c:	e2 f7       	brpl	.-8      	; 0x716 <Dio_writePin+0xc0>
     71e:	82 2b       	or	r24, r18
     720:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     726:	25 b3       	in	r18, 0x15	; 21
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	01 80       	ldd	r0, Z+1	; 0x01
     72e:	02 c0       	rjmp	.+4      	; 0x734 <Dio_writePin+0xde>
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	0a 94       	dec	r0
     736:	e2 f7       	brpl	.-8      	; 0x730 <Dio_writePin+0xda>
     738:	80 95       	com	r24
     73a:	82 23       	and	r24, r18
     73c:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
     742:	61 30       	cpi	r22, 0x01	; 1
     744:	69 f4       	brne	.+26     	; 0x760 <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     746:	22 b3       	in	r18, 0x12	; 18
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	01 80       	ldd	r0, Z+1	; 0x01
     74e:	02 c0       	rjmp	.+4      	; 0x754 <Dio_writePin+0xfe>
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	0a 94       	dec	r0
     756:	e2 f7       	brpl	.-8      	; 0x750 <Dio_writePin+0xfa>
     758:	82 2b       	or	r24, r18
     75a:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     760:	22 b3       	in	r18, 0x12	; 18
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	01 80       	ldd	r0, Z+1	; 0x01
     768:	02 c0       	rjmp	.+4      	; 0x76e <Dio_writePin+0x118>
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	0a 94       	dec	r0
     770:	e2 f7       	brpl	.-8      	; 0x76a <Dio_writePin+0x114>
     772:	80 95       	com	r24
     774:	82 23       	and	r24, r18
     776:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     780:	86 e0       	ldi	r24, 0x06	; 6
     782:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     784:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
     786:	08 95       	ret

00000788 <Dio_togglePin>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     788:	8b 30       	cpi	r24, 0x0B	; 11
     78a:	08 f0       	brcs	.+2      	; 0x78e <Dio_togglePin+0x6>
     78c:	4f c0       	rjmp	.+158    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     78e:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u8_Dio_Status>
     792:	99 23       	and	r25, r25
     794:	09 f4       	brne	.+2      	; 0x798 <Dio_togglePin+0x10>
     796:	4c c0       	rjmp	.+152    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     798:	e8 2f       	mov	r30, r24
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	cf 01       	movw	r24, r30
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	88 0f       	add	r24, r24
     7a4:	99 1f       	adc	r25, r25
     7a6:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <pstrDio_pinsConfig>
     7aa:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <pstrDio_pinsConfig+0x1>
     7ae:	e8 0f       	add	r30, r24
     7b0:	f9 1f       	adc	r31, r25
     7b2:	80 81       	ld	r24, Z
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	99 f0       	breq	.+38     	; 0x7de <Dio_togglePin+0x56>
     7b8:	28 f0       	brcs	.+10     	; 0x7c4 <Dio_togglePin+0x3c>
     7ba:	82 30       	cpi	r24, 0x02	; 2
     7bc:	e9 f0       	breq	.+58     	; 0x7f8 <Dio_togglePin+0x70>
     7be:	83 30       	cpi	r24, 0x03	; 3
     7c0:	41 f1       	breq	.+80     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     7c2:	38 c0       	rjmp	.+112    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     7c4:	2b b3       	in	r18, 0x1b	; 27
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	01 80       	ldd	r0, Z+1	; 0x01
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <Dio_togglePin+0x4a>
     7ce:	88 0f       	add	r24, r24
     7d0:	99 1f       	adc	r25, r25
     7d2:	0a 94       	dec	r0
     7d4:	e2 f7       	brpl	.-8      	; 0x7ce <Dio_togglePin+0x46>
     7d6:	82 27       	eor	r24, r18
     7d8:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     7da:	81 e0       	ldi	r24, 0x01	; 1
/**************************************************************************************/
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     7dc:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     7de:	28 b3       	in	r18, 0x18	; 24
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	01 80       	ldd	r0, Z+1	; 0x01
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <Dio_togglePin+0x64>
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	0a 94       	dec	r0
     7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <Dio_togglePin+0x60>
     7f0:	82 27       	eor	r24, r18
     7f2:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     7f6:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     7f8:	25 b3       	in	r18, 0x15	; 21
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	01 80       	ldd	r0, Z+1	; 0x01
     800:	02 c0       	rjmp	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	0a 94       	dec	r0
     808:	e2 f7       	brpl	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     80a:	82 27       	eor	r24, r18
     80c:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     80e:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     810:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     812:	22 b3       	in	r18, 0x12	; 18
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	01 80       	ldd	r0, Z+1	; 0x01
     81a:	02 c0       	rjmp	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	0a 94       	dec	r0
     822:	e2 f7       	brpl	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     824:	82 27       	eor	r24, r18
     826:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     828:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     82a:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     830:	86 e0       	ldi	r24, 0x06	; 6
     832:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     834:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
     836:	08 95       	ret

00000838 <Dio_readPin>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     838:	8b 30       	cpi	r24, 0x0B	; 11
     83a:	08 f0       	brcs	.+2      	; 0x83e <Dio_readPin+0x6>
     83c:	7c c0       	rjmp	.+248    	; 0x936 <__stack+0xd7>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     83e:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u8_Dio_Status>
     842:	99 23       	and	r25, r25
     844:	09 f4       	brne	.+2      	; 0x848 <Dio_readPin+0x10>
     846:	79 c0       	rjmp	.+242    	; 0x93a <__stack+0xdb>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     848:	e8 2f       	mov	r30, r24
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	cf 01       	movw	r24, r30
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <pstrDio_pinsConfig>
     85a:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <pstrDio_pinsConfig+0x1>
     85e:	e8 0f       	add	r30, r24
     860:	f9 1f       	adc	r31, r25
     862:	80 81       	ld	r24, Z
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	f9 f0       	breq	.+62     	; 0x8a6 <__stack+0x47>
     868:	30 f0       	brcs	.+12     	; 0x876 <__stack+0x17>
     86a:	82 30       	cpi	r24, 0x02	; 2
     86c:	a1 f1       	breq	.+104    	; 0x8d6 <__stack+0x77>
     86e:	83 30       	cpi	r24, 0x03	; 3
     870:	09 f4       	brne	.+2      	; 0x874 <__stack+0x15>
     872:	49 c0       	rjmp	.+146    	; 0x906 <__stack+0xa7>
     874:	64 c0       	rjmp	.+200    	; 0x93e <__stack+0xdf>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     876:	49 b3       	in	r20, 0x19	; 25
     878:	51 81       	ldd	r21, Z+1	; 0x01
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	9c 01       	movw	r18, r24
     880:	05 2e       	mov	r0, r21
     882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
     884:	22 0f       	add	r18, r18
     886:	33 1f       	adc	r19, r19
     888:	0a 94       	dec	r0
     88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
     88c:	84 2f       	mov	r24, r20
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	82 23       	and	r24, r18
     892:	93 23       	and	r25, r19
     894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
     896:	95 95       	asr	r25
     898:	87 95       	ror	r24
     89a:	5a 95       	dec	r21
     89c:	e2 f7       	brpl	.-8      	; 0x896 <__stack+0x37>
     89e:	fb 01       	movw	r30, r22
     8a0:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     8a2:	81 e0       	ldi	r24, 0x01	; 1
/**************************************************************************************/
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     8a4:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     8a6:	46 b3       	in	r20, 0x16	; 22
     8a8:	51 81       	ldd	r21, Z+1	; 0x01
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	9c 01       	movw	r18, r24
     8b0:	05 2e       	mov	r0, r21
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__stack+0x59>
     8b4:	22 0f       	add	r18, r18
     8b6:	33 1f       	adc	r19, r19
     8b8:	0a 94       	dec	r0
     8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <__stack+0x55>
     8bc:	84 2f       	mov	r24, r20
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 23       	and	r24, r18
     8c2:	93 23       	and	r25, r19
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__stack+0x6b>
     8c6:	95 95       	asr	r25
     8c8:	87 95       	ror	r24
     8ca:	5a 95       	dec	r21
     8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <__stack+0x67>
     8ce:	fb 01       	movw	r30, r22
     8d0:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     8d4:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     8d6:	43 b3       	in	r20, 0x13	; 19
     8d8:	51 81       	ldd	r21, Z+1	; 0x01
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	9c 01       	movw	r18, r24
     8e0:	05 2e       	mov	r0, r21
     8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <__stack+0x89>
     8e4:	22 0f       	add	r18, r18
     8e6:	33 1f       	adc	r19, r19
     8e8:	0a 94       	dec	r0
     8ea:	e2 f7       	brpl	.-8      	; 0x8e4 <__stack+0x85>
     8ec:	84 2f       	mov	r24, r20
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	82 23       	and	r24, r18
     8f2:	93 23       	and	r25, r19
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__stack+0x9b>
     8f6:	95 95       	asr	r25
     8f8:	87 95       	ror	r24
     8fa:	5a 95       	dec	r21
     8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <__stack+0x97>
     8fe:	fb 01       	movw	r30, r22
     900:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     902:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     904:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     906:	40 b3       	in	r20, 0x10	; 16
     908:	51 81       	ldd	r21, Z+1	; 0x01
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	9c 01       	movw	r18, r24
     910:	05 2e       	mov	r0, r21
     912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0xb9>
     914:	22 0f       	add	r18, r18
     916:	33 1f       	adc	r19, r19
     918:	0a 94       	dec	r0
     91a:	e2 f7       	brpl	.-8      	; 0x914 <__stack+0xb5>
     91c:	84 2f       	mov	r24, r20
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	82 23       	and	r24, r18
     922:	93 23       	and	r25, r19
     924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0xcb>
     926:	95 95       	asr	r25
     928:	87 95       	ror	r24
     92a:	5a 95       	dec	r21
     92c:	e2 f7       	brpl	.-8      	; 0x926 <__stack+0xc7>
     92e:	fb 01       	movw	r30, r22
     930:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     932:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     934:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     93a:	86 e0       	ldi	r24, 0x06	; 6
     93c:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     93e:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
     940:	08 95       	ret

00000942 <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e c0       	rjmp	.+28     	; 0x962 <Gpt_ISRHandler+0x20>
     946:	29 2f       	mov	r18, r25
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	f9 01       	movw	r30, r18
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	2e 0f       	add	r18, r30
     952:	3f 1f       	adc	r19, r31
     954:	f9 01       	movw	r30, r18
     956:	e2 56       	subi	r30, 0x62	; 98
     958:	ff 4f       	sbci	r31, 0xFF	; 255
     95a:	20 81       	ld	r18, Z
     95c:	28 17       	cp	r18, r24
     95e:	19 f0       	breq	.+6      	; 0x966 <Gpt_ISRHandler+0x24>
     960:	9f 5f       	subi	r25, 0xFF	; 255
     962:	99 23       	and	r25, r25
     964:	81 f3       	breq	.-32     	; 0x946 <Gpt_ISRHandler+0x4>
     966:	89 2f       	mov	r24, r25
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	fc 01       	movw	r30, r24
     96c:	ee 0f       	add	r30, r30
     96e:	ff 1f       	adc	r31, r31
     970:	ee 0f       	add	r30, r30
     972:	ff 1f       	adc	r31, r31
     974:	e1 55       	subi	r30, 0x51	; 81
     976:	ff 4f       	sbci	r31, 0xFF	; 255
     978:	40 81       	ld	r20, Z
     97a:	51 81       	ldd	r21, Z+1	; 0x01
     97c:	62 81       	ldd	r22, Z+2	; 0x02
     97e:	73 81       	ldd	r23, Z+3	; 0x03
     980:	41 15       	cp	r20, r1
     982:	51 05       	cpc	r21, r1
     984:	61 05       	cpc	r22, r1
     986:	71 05       	cpc	r23, r1
     988:	81 f0       	breq	.+32     	; 0x9aa <Gpt_ISRHandler+0x68>
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	fc 01       	movw	r30, r24
     994:	e1 55       	subi	r30, 0x51	; 81
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	41 50       	subi	r20, 0x01	; 1
     99a:	51 09       	sbc	r21, r1
     99c:	61 09       	sbc	r22, r1
     99e:	71 09       	sbc	r23, r1
     9a0:	40 83       	st	Z, r20
     9a2:	51 83       	std	Z+1, r21	; 0x01
     9a4:	62 83       	std	Z+2, r22	; 0x02
     9a6:	73 83       	std	Z+3, r23	; 0x03
     9a8:	08 95       	ret
     9aa:	23 b7       	in	r18, 0x33	; 51
     9ac:	2e 7f       	andi	r18, 0xFE	; 254
     9ae:	23 bf       	out	0x33, r18	; 51
     9b0:	23 b7       	in	r18, 0x33	; 51
     9b2:	2d 7f       	andi	r18, 0xFD	; 253
     9b4:	23 bf       	out	0x33, r18	; 51
     9b6:	23 b7       	in	r18, 0x33	; 51
     9b8:	2b 7f       	andi	r18, 0xFB	; 251
     9ba:	23 bf       	out	0x33, r18	; 51
     9bc:	29 b7       	in	r18, 0x39	; 57
     9be:	2e 7f       	andi	r18, 0xFE	; 254
     9c0:	29 bf       	out	0x39, r18	; 57
     9c2:	fc 01       	movw	r30, r24
     9c4:	ed 54       	subi	r30, 0x4D	; 77
     9c6:	ff 4f       	sbci	r31, 0xFF	; 255
     9c8:	24 e0       	ldi	r18, 0x04	; 4
     9ca:	20 83       	st	Z, r18
     9cc:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <Gpt_Timer0_CallBackPtr>
     9d0:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <Gpt_Timer0_CallBackPtr+0x1>
     9d4:	09 95       	icall
     9d6:	08 95       	ret

000009d8 <GptInit>:
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	24 c0       	rjmp	.+72     	; 0xa24 <GptInit+0x4c>
     9dc:	82 2f       	mov	r24, r18
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	fc 01       	movw	r30, r24
     9e2:	ee 0f       	add	r30, r30
     9e4:	ff 1f       	adc	r31, r31
     9e6:	e8 0f       	add	r30, r24
     9e8:	f9 1f       	adc	r31, r25
     9ea:	e2 56       	subi	r30, 0x62	; 98
     9ec:	ff 4f       	sbci	r31, 0xFF	; 255
     9ee:	30 81       	ld	r19, Z
     9f0:	33 23       	and	r19, r19
     9f2:	19 f0       	breq	.+6      	; 0x9fa <GptInit+0x22>
     9f4:	33 30       	cpi	r19, 0x03	; 3
     9f6:	d0 f4       	brcc	.+52     	; 0xa2c <GptInit+0x54>
     9f8:	0f c0       	rjmp	.+30     	; 0xa18 <GptInit+0x40>
     9fa:	fc 01       	movw	r30, r24
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	e8 0f       	add	r30, r24
     a02:	f9 1f       	adc	r31, r25
     a04:	e2 56       	subi	r30, 0x62	; 98
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	32 81       	ldd	r19, Z+2	; 0x02
     a0a:	31 11       	cpse	r19, r1
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <GptInit+0x40>
     a0e:	13 be       	out	0x33, r1	; 51
     a10:	39 b7       	in	r19, 0x39	; 57
     a12:	3c 7f       	andi	r19, 0xFC	; 252
     a14:	39 bf       	out	0x39, r19	; 57
     a16:	12 be       	out	0x32, r1	; 50
     a18:	fc 01       	movw	r30, r24
     a1a:	ed 54       	subi	r30, 0x4D	; 77
     a1c:	ff 4f       	sbci	r31, 0xFF	; 255
     a1e:	31 e0       	ldi	r19, 0x01	; 1
     a20:	30 83       	st	Z, r19
     a22:	2f 5f       	subi	r18, 0xFF	; 255
     a24:	22 23       	and	r18, r18
     a26:	d1 f2       	breq	.-76     	; 0x9dc <GptInit+0x4>
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	08 95       	ret
     a2c:	84 e0       	ldi	r24, 0x04	; 4
     a2e:	08 95       	ret

00000a30 <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
     a3a:	81 11       	cpse	r24, r1
     a3c:	4a c0       	rjmp	.+148    	; 0xad2 <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
     a3e:	c8 2f       	mov	r28, r24
     a40:	d0 e0       	ldi	r29, 0x00	; 0
     a42:	fe 01       	movw	r30, r28
     a44:	ed 54       	subi	r30, 0x4D	; 77
     a46:	ff 4f       	sbci	r31, 0xFF	; 255
     a48:	80 81       	ld	r24, Z
     a4a:	88 23       	and	r24, r24
     a4c:	09 f4       	brne	.+2      	; 0xa50 <GptStart_aSync+0x20>
     a4e:	43 c0       	rjmp	.+134    	; 0xad6 <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
     a50:	82 30       	cpi	r24, 0x02	; 2
     a52:	09 f4       	brne	.+2      	; 0xa56 <GptStart_aSync+0x26>
     a54:	42 c0       	rjmp	.+132    	; 0xada <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	fe 01       	movw	r30, r28
     a5a:	ed 54       	subi	r30, 0x4D	; 77
     a5c:	ff 4f       	sbci	r31, 0xFF	; 255
     a5e:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
     a60:	fe 01       	movw	r30, r28
     a62:	ee 0f       	add	r30, r30
     a64:	ff 1f       	adc	r31, r31
     a66:	ec 0f       	add	r30, r28
     a68:	fd 1f       	adc	r31, r29
     a6a:	e2 56       	subi	r30, 0x62	; 98
     a6c:	ff 4f       	sbci	r31, 0xFF	; 255
     a6e:	80 81       	ld	r24, Z
     a70:	88 23       	and	r24, r24
     a72:	21 f0       	breq	.+8      	; 0xa7c <GptStart_aSync+0x4c>
     a74:	83 30       	cpi	r24, 0x03	; 3
     a76:	98 f1       	brcs	.+102    	; 0xade <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
     a78:	84 e0       	ldi	r24, 0x04	; 4
     a7a:	34 c0       	rjmp	.+104    	; 0xae4 <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
     a7c:	cb 01       	movw	r24, r22
     a7e:	ba 01       	movw	r22, r20
     a80:	2f ef       	ldi	r18, 0xFF	; 255
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	0e 94 48 0b 	call	0x1690	; 0x1690 <__udivmodsi4>
     a8c:	fe 01       	movw	r30, r28
     a8e:	ee 0f       	add	r30, r30
     a90:	ff 1f       	adc	r31, r31
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	e1 55       	subi	r30, 0x51	; 81
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	20 83       	st	Z, r18
     a9c:	31 83       	std	Z+1, r19	; 0x01
     a9e:	42 83       	std	Z+2, r20	; 0x02
     aa0:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
     aa2:	26 2f       	mov	r18, r22
     aa4:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
     aa6:	89 b7       	in	r24, 0x39	; 57
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
     aac:	10 93 b5 00 	sts	0x00B5, r17	; 0x8000b5 <Gpt_Timer0_CallBackPtr+0x1>
     ab0:	00 93 b4 00 	sts	0x00B4, r16	; 0x8000b4 <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
     ab4:	ce 01       	movw	r24, r28
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	c8 0f       	add	r28, r24
     abc:	d9 1f       	adc	r29, r25
     abe:	c2 56       	subi	r28, 0x62	; 98
     ac0:	df 4f       	sbci	r29, 0xFF	; 255
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
     ac6:	23 2b       	or	r18, r19
     ac8:	61 f0       	breq	.+24     	; 0xae2 <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
     aca:	61 95       	neg	r22
     acc:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	09 c0       	rjmp	.+18     	; 0xae4 <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
     ad2:	85 e0       	ldi	r24, 0x05	; 5
     ad4:	07 c0       	rjmp	.+14     	; 0xae4 <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	05 c0       	rjmp	.+10     	; 0xae4 <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
     ada:	86 e0       	ldi	r24, 0x06	; 6
     adc:	03 c0       	rjmp	.+6      	; 0xae4 <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <GptStart_aSync+0xb4>
     ae2:	81 e0       	ldi	r24, 0x01	; 1
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	08 95       	ret

00000aee <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
     aee:	81 11       	cpse	r24, r1
     af0:	23 c0       	rjmp	.+70     	; 0xb38 <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	fc 01       	movw	r30, r24
     af6:	ed 54       	subi	r30, 0x4D	; 77
     af8:	ff 4f       	sbci	r31, 0xFF	; 255
     afa:	20 81       	ld	r18, Z
     afc:	22 23       	and	r18, r18
     afe:	f1 f0       	breq	.+60     	; 0xb3c <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
     b00:	22 30       	cpi	r18, 0x02	; 2
     b02:	f1 f4       	brne	.+60     	; 0xb40 <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
     b04:	fc 01       	movw	r30, r24
     b06:	ee 0f       	add	r30, r30
     b08:	ff 1f       	adc	r31, r31
     b0a:	e8 0f       	add	r30, r24
     b0c:	f9 1f       	adc	r31, r25
     b0e:	e2 56       	subi	r30, 0x62	; 98
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	20 81       	ld	r18, Z
     b14:	22 23       	and	r18, r18
     b16:	19 f0       	breq	.+6      	; 0xb1e <GptStop+0x30>
     b18:	23 30       	cpi	r18, 0x03	; 3
     b1a:	a0 f4       	brcc	.+40     	; 0xb44 <GptStop+0x56>
     b1c:	06 c0       	rjmp	.+12     	; 0xb2a <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
     b1e:	23 b7       	in	r18, 0x33	; 51
     b20:	28 7f       	andi	r18, 0xF8	; 248
     b22:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
     b24:	29 b7       	in	r18, 0x39	; 57
     b26:	2c 7f       	andi	r18, 0xFC	; 252
     b28:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_STOPPED;
     b2a:	fc 01       	movw	r30, r24
     b2c:	ed 54       	subi	r30, 0x4D	; 77
     b2e:	ff 4f       	sbci	r31, 0xFF	; 255
     b30:	23 e0       	ldi	r18, 0x03	; 3
     b32:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
     b38:	85 e0       	ldi	r24, 0x05	; 5
     b3a:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
     b40:	87 e0       	ldi	r24, 0x07	; 7
     b42:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
     b44:	84 e0       	ldi	r24, 0x04	; 4
	}
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
     b46:	08 95       	ret

00000b48 <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
     b48:	1f 92       	push	r1
     b4a:	0f 92       	push	r0
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	0f 92       	push	r0
     b50:	11 24       	eor	r1, r1
     b52:	2f 93       	push	r18
     b54:	3f 93       	push	r19
     b56:	4f 93       	push	r20
     b58:	5f 93       	push	r21
     b5a:	6f 93       	push	r22
     b5c:	7f 93       	push	r23
     b5e:	8f 93       	push	r24
     b60:	9f 93       	push	r25
     b62:	af 93       	push	r26
     b64:	bf 93       	push	r27
     b66:	ef 93       	push	r30
     b68:	ff 93       	push	r31
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	0e 94 a1 04 	call	0x942	; 0x942 <Gpt_ISRHandler>
     b70:	ff 91       	pop	r31
     b72:	ef 91       	pop	r30
     b74:	bf 91       	pop	r27
     b76:	af 91       	pop	r26
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	7f 91       	pop	r23
     b7e:	6f 91       	pop	r22
     b80:	5f 91       	pop	r21
     b82:	4f 91       	pop	r20
     b84:	3f 91       	pop	r19
     b86:	2f 91       	pop	r18
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	0f 90       	pop	r0
     b8e:	1f 90       	pop	r1
     b90:	18 95       	reti

00000b92 <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
     b92:	1f 92       	push	r1
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	0f 92       	push	r0
     b9a:	11 24       	eor	r1, r1
     b9c:	2f 93       	push	r18
     b9e:	3f 93       	push	r19
     ba0:	4f 93       	push	r20
     ba2:	5f 93       	push	r21
     ba4:	6f 93       	push	r22
     ba6:	7f 93       	push	r23
     ba8:	8f 93       	push	r24
     baa:	9f 93       	push	r25
     bac:	af 93       	push	r26
     bae:	bf 93       	push	r27
     bb0:	ef 93       	push	r30
     bb2:	ff 93       	push	r31
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0e 94 a1 04 	call	0x942	; 0x942 <Gpt_ISRHandler>
     bba:	ff 91       	pop	r31
     bbc:	ef 91       	pop	r30
     bbe:	bf 91       	pop	r27
     bc0:	af 91       	pop	r26
     bc2:	9f 91       	pop	r25
     bc4:	8f 91       	pop	r24
     bc6:	7f 91       	pop	r23
     bc8:	6f 91       	pop	r22
     bca:	5f 91       	pop	r21
     bcc:	4f 91       	pop	r20
     bce:	3f 91       	pop	r19
     bd0:	2f 91       	pop	r18
     bd2:	0f 90       	pop	r0
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	0f 90       	pop	r0
     bd8:	1f 90       	pop	r1
     bda:	18 95       	reti

00000bdc <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	4f 93       	push	r20
     bec:	5f 93       	push	r21
     bee:	6f 93       	push	r22
     bf0:	7f 93       	push	r23
     bf2:	8f 93       	push	r24
     bf4:	9f 93       	push	r25
     bf6:	af 93       	push	r26
     bf8:	bf 93       	push	r27
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	0e 94 a1 04 	call	0x942	; 0x942 <Gpt_ISRHandler>
     c04:	ff 91       	pop	r31
     c06:	ef 91       	pop	r30
     c08:	bf 91       	pop	r27
     c0a:	af 91       	pop	r26
     c0c:	9f 91       	pop	r25
     c0e:	8f 91       	pop	r24
     c10:	7f 91       	pop	r23
     c12:	6f 91       	pop	r22
     c14:	5f 91       	pop	r21
     c16:	4f 91       	pop	r20
     c18:	3f 91       	pop	r19
     c1a:	2f 91       	pop	r18
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	0f 90       	pop	r0
     c22:	1f 90       	pop	r1
     c24:	18 95       	reti

00000c26 <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     c26:	1f 92       	push	r1
     c28:	0f 92       	push	r0
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	0f 92       	push	r0
     c2e:	11 24       	eor	r1, r1
     c30:	2f 93       	push	r18
     c32:	3f 93       	push	r19
     c34:	4f 93       	push	r20
     c36:	5f 93       	push	r21
     c38:	6f 93       	push	r22
     c3a:	7f 93       	push	r23
     c3c:	8f 93       	push	r24
     c3e:	9f 93       	push	r25
     c40:	af 93       	push	r26
     c42:	bf 93       	push	r27
     c44:	ef 93       	push	r30
     c46:	ff 93       	push	r31
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	0e 94 a1 04 	call	0x942	; 0x942 <Gpt_ISRHandler>
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	bf 91       	pop	r27
     c54:	af 91       	pop	r26
     c56:	9f 91       	pop	r25
     c58:	8f 91       	pop	r24
     c5a:	7f 91       	pop	r23
     c5c:	6f 91       	pop	r22
     c5e:	5f 91       	pop	r21
     c60:	4f 91       	pop	r20
     c62:	3f 91       	pop	r19
     c64:	2f 91       	pop	r18
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     c70:	1f 92       	push	r1
     c72:	0f 92       	push	r0
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	0f 92       	push	r0
     c78:	11 24       	eor	r1, r1
     c7a:	2f 93       	push	r18
     c7c:	3f 93       	push	r19
     c7e:	4f 93       	push	r20
     c80:	5f 93       	push	r21
     c82:	6f 93       	push	r22
     c84:	7f 93       	push	r23
     c86:	8f 93       	push	r24
     c88:	9f 93       	push	r25
     c8a:	af 93       	push	r26
     c8c:	bf 93       	push	r27
     c8e:	ef 93       	push	r30
     c90:	ff 93       	push	r31
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	0e 94 a1 04 	call	0x942	; 0x942 <Gpt_ISRHandler>
     c98:	ff 91       	pop	r31
     c9a:	ef 91       	pop	r30
     c9c:	bf 91       	pop	r27
     c9e:	af 91       	pop	r26
     ca0:	9f 91       	pop	r25
     ca2:	8f 91       	pop	r24
     ca4:	7f 91       	pop	r23
     ca6:	6f 91       	pop	r22
     ca8:	5f 91       	pop	r21
     caa:	4f 91       	pop	r20
     cac:	3f 91       	pop	r19
     cae:	2f 91       	pop	r18
     cb0:	0f 90       	pop	r0
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	0f 90       	pop	r0
     cb6:	1f 90       	pop	r1
     cb8:	18 95       	reti

00000cba <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     cba:	1f 92       	push	r1
     cbc:	0f 92       	push	r0
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	0f 92       	push	r0
     cc2:	11 24       	eor	r1, r1
     cc4:	2f 93       	push	r18
     cc6:	3f 93       	push	r19
     cc8:	4f 93       	push	r20
     cca:	5f 93       	push	r21
     ccc:	6f 93       	push	r22
     cce:	7f 93       	push	r23
     cd0:	8f 93       	push	r24
     cd2:	9f 93       	push	r25
     cd4:	af 93       	push	r26
     cd6:	bf 93       	push	r27
     cd8:	ef 93       	push	r30
     cda:	ff 93       	push	r31
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	0e 94 a1 04 	call	0x942	; 0x942 <Gpt_ISRHandler>
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	bf 91       	pop	r27
     ce8:	af 91       	pop	r26
     cea:	9f 91       	pop	r25
     cec:	8f 91       	pop	r24
     cee:	7f 91       	pop	r23
     cf0:	6f 91       	pop	r22
     cf2:	5f 91       	pop	r21
     cf4:	4f 91       	pop	r20
     cf6:	3f 91       	pop	r19
     cf8:	2f 91       	pop	r18
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
     d04:	1f 92       	push	r1
     d06:	0f 92       	push	r0
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	0f 92       	push	r0
     d0c:	11 24       	eor	r1, r1
     d0e:	2f 93       	push	r18
     d10:	3f 93       	push	r19
     d12:	4f 93       	push	r20
     d14:	5f 93       	push	r21
     d16:	6f 93       	push	r22
     d18:	7f 93       	push	r23
     d1a:	8f 93       	push	r24
     d1c:	9f 93       	push	r25
     d1e:	af 93       	push	r26
     d20:	bf 93       	push	r27
     d22:	ef 93       	push	r30
     d24:	ff 93       	push	r31
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	0e 94 a1 04 	call	0x942	; 0x942 <Gpt_ISRHandler>
     d2c:	ff 91       	pop	r31
     d2e:	ef 91       	pop	r30
     d30:	bf 91       	pop	r27
     d32:	af 91       	pop	r26
     d34:	9f 91       	pop	r25
     d36:	8f 91       	pop	r24
     d38:	7f 91       	pop	r23
     d3a:	6f 91       	pop	r22
     d3c:	5f 91       	pop	r21
     d3e:	4f 91       	pop	r20
     d40:	3f 91       	pop	r19
     d42:	2f 91       	pop	r18
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	0e 94 a1 04 	call	0x942	; 0x942 <Gpt_ISRHandler>
     d76:	ff 91       	pop	r31
     d78:	ef 91       	pop	r30
     d7a:	bf 91       	pop	r27
     d7c:	af 91       	pop	r26
     d7e:	9f 91       	pop	r25
     d80:	8f 91       	pop	r24
     d82:	7f 91       	pop	r23
     d84:	6f 91       	pop	r22
     d86:	5f 91       	pop	r21
     d88:	4f 91       	pop	r20
     d8a:	3f 91       	pop	r19
     d8c:	2f 91       	pop	r18
     d8e:	0f 90       	pop	r0
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	0f 90       	pop	r0
     d94:	1f 90       	pop	r1
     d96:	18 95       	reti

00000d98 <waveFunction>:
* Parameters (out): None
* Return value: None
* Description: Function to be called inside the timer's ISR.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
void waveFunction(void)
{
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
	Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID);
     d9c:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <gu8_currentPwmChannel>
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	ef 55       	subi	r30, 0x5F	; 95
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	80 81       	ld	r24, Z
     dac:	0e 94 c4 03 	call	0x788	; 0x788 <Dio_togglePin>
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
     db0:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <gu8_currentPwmChannel>
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	9c 01       	movw	r18, r24
     db8:	22 0f       	add	r18, r18
     dba:	33 1f       	adc	r19, r19
     dbc:	f9 01       	movw	r30, r18
     dbe:	ee 0f       	add	r30, r30
     dc0:	ff 1f       	adc	r31, r31
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	ee 0f       	add	r30, r30
     dc8:	ff 1f       	adc	r31, r31
     dca:	e2 1b       	sub	r30, r18
     dcc:	f3 0b       	sbc	r31, r19
     dce:	e9 54       	subi	r30, 0x49	; 73
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	25 85       	ldd	r18, Z+13	; 0x0d
     dd4:	22 30       	cpi	r18, 0x02	; 2
     dd6:	09 f0       	breq	.+2      	; 0xdda <waveFunction+0x42>
     dd8:	5e c0       	rjmp	.+188    	; 0xe96 <waveFunction+0xfe>
	{
		GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID, gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks, waveFunction);
     dda:	88 0f       	add	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	fc 01       	movw	r30, r24
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	ee 0f       	add	r30, r30
     de6:	ff 1f       	adc	r31, r31
     de8:	ee 0f       	add	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	e8 1b       	sub	r30, r24
     dee:	f9 0b       	sbc	r31, r25
     df0:	e9 54       	subi	r30, 0x49	; 73
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	41 85       	ldd	r20, Z+9	; 0x09
     df6:	52 85       	ldd	r21, Z+10	; 0x0a
     df8:	63 85       	ldd	r22, Z+11	; 0x0b
     dfa:	74 85       	ldd	r23, Z+12	; 0x0c
     dfc:	fc 01       	movw	r30, r24
     dfe:	ef 55       	subi	r30, 0x5F	; 95
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	2c ec       	ldi	r18, 0xCC	; 204
     e04:	36 e0       	ldi	r19, 0x06	; 6
     e06:	81 81       	ldd	r24, Z+1	; 0x01
     e08:	0e 94 18 05 	call	0xa30	; 0xa30 <GptStart_aSync>
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
     e0c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <gu8_currentPwmChannel>
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9c 01       	movw	r18, r24
     e14:	22 0f       	add	r18, r18
     e16:	33 1f       	adc	r19, r19
     e18:	f9 01       	movw	r30, r18
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	e2 1b       	sub	r30, r18
     e28:	f3 0b       	sbc	r31, r19
     e2a:	e9 54       	subi	r30, 0x49	; 73
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	01 85       	ldd	r16, Z+9	; 0x09
     e30:	12 85       	ldd	r17, Z+10	; 0x0a
     e32:	23 85       	ldd	r18, Z+11	; 0x0b
     e34:	34 85       	ldd	r19, Z+12	; 0x0c
     e36:	45 81       	ldd	r20, Z+5	; 0x05
     e38:	56 81       	ldd	r21, Z+6	; 0x06
     e3a:	67 81       	ldd	r22, Z+7	; 0x07
     e3c:	70 85       	ldd	r23, Z+8	; 0x08
     e3e:	04 17       	cp	r16, r20
     e40:	15 07       	cpc	r17, r21
     e42:	26 07       	cpc	r18, r22
     e44:	37 07       	cpc	r19, r23
     e46:	b1 f4       	brne	.+44     	; 0xe74 <waveFunction+0xdc>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	fc 01       	movw	r30, r24
     e4e:	ee 0f       	add	r30, r30
     e50:	ff 1f       	adc	r31, r31
     e52:	ee 0f       	add	r30, r30
     e54:	ff 1f       	adc	r31, r31
     e56:	ee 0f       	add	r30, r30
     e58:	ff 1f       	adc	r31, r31
     e5a:	e8 1b       	sub	r30, r24
     e5c:	f9 0b       	sbc	r31, r25
     e5e:	e9 54       	subi	r30, 0x49	; 73
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	92 81       	ldd	r25, Z+2	; 0x02
     e66:	a3 81       	ldd	r26, Z+3	; 0x03
     e68:	b4 81       	ldd	r27, Z+4	; 0x04
     e6a:	81 87       	std	Z+9, r24	; 0x09
     e6c:	92 87       	std	Z+10, r25	; 0x0a
     e6e:	a3 87       	std	Z+11, r26	; 0x0b
     e70:	b4 87       	std	Z+12, r27	; 0x0c
     e72:	11 c0       	rjmp	.+34     	; 0xe96 <waveFunction+0xfe>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	fc 01       	movw	r30, r24
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	ee 0f       	add	r30, r30
     e80:	ff 1f       	adc	r31, r31
     e82:	ee 0f       	add	r30, r30
     e84:	ff 1f       	adc	r31, r31
     e86:	e8 1b       	sub	r30, r24
     e88:	f9 0b       	sbc	r31, r25
     e8a:	e9 54       	subi	r30, 0x49	; 73
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	41 87       	std	Z+9, r20	; 0x09
     e90:	52 87       	std	Z+10, r21	; 0x0a
     e92:	63 87       	std	Z+11, r22	; 0x0b
     e94:	74 87       	std	Z+12, r23	; 0x0c
	}
}
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	08 95       	ret

00000e9c <SWPwm_Init>:
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	GptInit();
     e9c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <GptInit>
	Dio_init(strDio_pins);
     ea0:	87 e6       	ldi	r24, 0x67	; 103
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 36 02 	call	0x46c	; 0x46c <Dio_init>
	return SWPWM_STATUS_ERROR_OK;
}
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	08 95       	ret

00000eac <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
     eac:	4f 92       	push	r4
     eae:	5f 92       	push	r5
     eb0:	6f 92       	push	r6
     eb2:	7f 92       	push	r7
     eb4:	8f 92       	push	r8
     eb6:	9f 92       	push	r9
     eb8:	af 92       	push	r10
     eba:	bf 92       	push	r11
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	00 d0       	rcall	.+0      	; 0xeca <SWPwm_Start+0x1e>
     eca:	00 d0       	rcall	.+0      	; 0xecc <SWPwm_Start+0x20>
     ecc:	00 d0       	rcall	.+0      	; 0xece <SWPwm_Start+0x22>
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
	/**************************************************************************************/
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
     ed2:	81 11       	cpse	r24, r1
     ed4:	dd c0       	rjmp	.+442    	; 0x1090 <SWPwm_Start+0x1e4>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
     ed6:	25 36       	cpi	r18, 0x65	; 101
     ed8:	08 f0       	brcs	.+2      	; 0xedc <SWPwm_Start+0x30>
     eda:	dc c0       	rjmp	.+440    	; 0x1094 <SWPwm_Start+0x1e8>
	{
		return SWPWM_STATUS_DC_OUTRANGE;
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
     edc:	e8 2f       	mov	r30, r24
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	fe 83       	std	Y+6, r31	; 0x06
     ee2:	ed 83       	std	Y+5, r30	; 0x05
     ee4:	df 01       	movw	r26, r30
     ee6:	aa 0f       	add	r26, r26
     ee8:	bb 1f       	adc	r27, r27
     eea:	fd 01       	movw	r30, r26
     eec:	ee 0f       	add	r30, r30
     eee:	ff 1f       	adc	r31, r31
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	ee 0f       	add	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	ea 1b       	sub	r30, r26
     efa:	fb 0b       	sbc	r31, r27
     efc:	e9 54       	subi	r30, 0x49	; 73
     efe:	ff 4f       	sbci	r31, 0xFF	; 255
     f00:	95 85       	ldd	r25, Z+13	; 0x0d
     f02:	92 30       	cpi	r25, 0x02	; 2
     f04:	09 f4       	brne	.+2      	; 0xf08 <SWPwm_Start+0x5c>
     f06:	c8 c0       	rjmp	.+400    	; 0x1098 <SWPwm_Start+0x1ec>
	/**************************************************************************************/

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	if(u8_DutyCycle == 0)
     f08:	22 23       	and	r18, r18
     f0a:	09 f4       	brne	.+2      	; 0xf0e <SWPwm_Start+0x62>
     f0c:	c7 c0       	rjmp	.+398    	; 0x109c <SWPwm_Start+0x1f0>
     f0e:	12 2f       	mov	r17, r18
     f10:	e8 2e       	mov	r14, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
     f12:	24 36       	cpi	r18, 0x64	; 100
     f14:	51 f4       	brne	.+20     	; 0xf2a <SWPwm_Start+0x7e>
	{
		Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH);
     f16:	9d 01       	movw	r18, r26
     f18:	2f 55       	subi	r18, 0x5F	; 95
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	f9 01       	movw	r30, r18
     f20:	80 81       	ld	r24, Z
     f22:	0e 94 2b 03 	call	0x656	; 0x656 <Dio_writePin>
		return SWPWM_STATUS_ERROR_OK;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	bc c0       	rjmp	.+376    	; 0x10a2 <SWPwm_Start+0x1f6>
	}
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;
     f2a:	cb 01       	movw	r24, r22
     f2c:	ba 01       	movw	r22, r20
     f2e:	0e 94 4d 0a 	call	0x149a	; 0x149a <__floatunsisf>
     f32:	9b 01       	movw	r18, r22
     f34:	ac 01       	movw	r20, r24
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	80 e8       	ldi	r24, 0x80	; 128
     f3c:	9f e3       	ldi	r25, 0x3F	; 63
     f3e:	0e 94 ac 09 	call	0x1358	; 0x1358 <__divsf3>
     f42:	4b 01       	movw	r8, r22
     f44:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;
     f46:	61 2f       	mov	r22, r17
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 4f 0a 	call	0x149e	; 0x149e <__floatsisf>
     f52:	a5 01       	movw	r20, r10
     f54:	94 01       	movw	r18, r8
     f56:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	48 ec       	ldi	r20, 0xC8	; 200
     f60:	52 e4       	ldi	r21, 0x42	; 66
     f62:	0e 94 ac 09 	call	0x1358	; 0x1358 <__divsf3>
     f66:	2b 01       	movw	r4, r22
     f68:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;
     f6a:	9b 01       	movw	r18, r22
     f6c:	ac 01       	movw	r20, r24
     f6e:	c5 01       	movw	r24, r10
     f70:	b4 01       	movw	r22, r8
     f72:	0e 94 3f 09 	call	0x127e	; 0x127e <__subsf3>
     f76:	69 83       	std	Y+1, r22	; 0x01
     f78:	7a 83       	std	Y+2, r23	; 0x02
     f7a:	8b 83       	std	Y+3, r24	; 0x03
     f7c:	9c 83       	std	Y+4, r25	; 0x04
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
     f7e:	ed 81       	ldd	r30, Y+5	; 0x05
     f80:	fe 81       	ldd	r31, Y+6	; 0x06
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ef 55       	subi	r30, 0x5F	; 95
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	f1 80       	ldd	r15, Z+1	; 0x01
     f8c:	8f 2d       	mov	r24, r15
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	fc 01       	movw	r30, r24
     f92:	ee 0f       	add	r30, r30
     f94:	ff 1f       	adc	r31, r31
     f96:	8e 0f       	add	r24, r30
     f98:	9f 1f       	adc	r25, r31
     f9a:	fc 01       	movw	r30, r24
     f9c:	e2 56       	subi	r30, 0x62	; 98
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	e1 81       	ldd	r30, Z+1	; 0x01
     fa2:	8e 2f       	mov	r24, r30
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	fc 01       	movw	r30, r24
     fa8:	31 97       	sbiw	r30, 0x01	; 1
     faa:	e7 30       	cpi	r30, 0x07	; 7
     fac:	f1 05       	cpc	r31, r1
     fae:	08 f0       	brcs	.+2      	; 0xfb2 <SWPwm_Start+0x106>
     fb0:	77 c0       	rjmp	.+238    	; 0x10a0 <SWPwm_Start+0x1f4>
     fb2:	e6 5d       	subi	r30, 0xD6	; 214
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	0b c0       	rjmp	.+22     	; 0xfd6 <SWPwm_Start+0x12a>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
     fc0:	60 e4       	ldi	r22, 0x40	; 64
     fc2:	70 e0       	ldi	r23, 0x00	; 0
			break;
     fc4:	08 c0       	rjmp	.+16     	; 0xfd6 <SWPwm_Start+0x12a>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	71 e0       	ldi	r23, 0x01	; 1
			break;
     fca:	05 c0       	rjmp	.+10     	; 0xfd6 <SWPwm_Start+0x12a>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	74 e0       	ldi	r23, 0x04	; 4
			break;
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <SWPwm_Start+0x12a>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
     fd2:	68 e0       	ldi	r22, 0x08	; 8
     fd4:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}

	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 4d 0a 	call	0x149a	; 0x149a <__floatunsisf>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	34 e2       	ldi	r19, 0x24	; 36
     fe2:	44 e7       	ldi	r20, 0x74	; 116
     fe4:	59 e4       	ldi	r21, 0x49	; 73
     fe6:	0e 94 ac 09 	call	0x1358	; 0x1358 <__divsf3>
     fea:	4b 01       	movw	r8, r22
     fec:	5c 01       	movw	r10, r24
	gu8_currentPwmChannel = u8_ChannelID;
     fee:	e0 92 b6 00 	sts	0x00B6, r14	; 0x8000b6 <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;
     ff2:	9b 01       	movw	r18, r22
     ff4:	ac 01       	movw	r20, r24
     ff6:	c3 01       	movw	r24, r6
     ff8:	b2 01       	movw	r22, r4
     ffa:	0e 94 ac 09 	call	0x1358	; 0x1358 <__divsf3>
     ffe:	0d 81       	ldd	r16, Y+5	; 0x05
    1000:	1e 81       	ldd	r17, Y+6	; 0x06
    1002:	00 0f       	add	r16, r16
    1004:	11 1f       	adc	r17, r17
    1006:	98 01       	movw	r18, r16
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	22 0f       	add	r18, r18
    100e:	33 1f       	adc	r19, r19
    1010:	22 0f       	add	r18, r18
    1012:	33 1f       	adc	r19, r19
    1014:	20 1b       	sub	r18, r16
    1016:	31 0b       	sbc	r19, r17
    1018:	29 54       	subi	r18, 0x49	; 73
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	3e 83       	std	Y+6, r19	; 0x06
    101e:	2d 83       	std	Y+5, r18	; 0x05
    1020:	0e 94 1e 0a 	call	0x143c	; 0x143c <__fixunssfsi>
    1024:	ed 81       	ldd	r30, Y+5	; 0x05
    1026:	fe 81       	ldd	r31, Y+6	; 0x06
    1028:	61 83       	std	Z+1, r22	; 0x01
    102a:	72 83       	std	Z+2, r23	; 0x02
    102c:	83 83       	std	Z+3, r24	; 0x03
    102e:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;
    1030:	a5 01       	movw	r20, r10
    1032:	94 01       	movw	r18, r8
    1034:	69 81       	ldd	r22, Y+1	; 0x01
    1036:	7a 81       	ldd	r23, Y+2	; 0x02
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	0e 94 ac 09 	call	0x1358	; 0x1358 <__divsf3>
    1040:	0e 94 1e 0a 	call	0x143c	; 0x143c <__fixunssfsi>
    1044:	ed 81       	ldd	r30, Y+5	; 0x05
    1046:	fe 81       	ldd	r31, Y+6	; 0x06
    1048:	65 83       	std	Z+5, r22	; 0x05
    104a:	76 83       	std	Z+6, r23	; 0x06
    104c:	87 83       	std	Z+7, r24	; 0x07
    104e:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    1050:	e0 82       	st	Z, r14

	Dio_togglePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID);
    1052:	f8 01       	movw	r30, r16
    1054:	ef 55       	subi	r30, 0x5F	; 95
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	80 81       	ld	r24, Z
    105a:	0e 94 c4 03 	call	0x788	; 0x788 <Dio_togglePin>
	GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID, gstr_ChannelsData[u8_ChannelID].u32_ONTicks, waveFunction);
    105e:	ed 81       	ldd	r30, Y+5	; 0x05
    1060:	fe 81       	ldd	r31, Y+6	; 0x06
    1062:	41 81       	ldd	r20, Z+1	; 0x01
    1064:	52 81       	ldd	r21, Z+2	; 0x02
    1066:	63 81       	ldd	r22, Z+3	; 0x03
    1068:	74 81       	ldd	r23, Z+4	; 0x04
    106a:	2c ec       	ldi	r18, 0xCC	; 204
    106c:	36 e0       	ldi	r19, 0x06	; 6
    106e:	8f 2d       	mov	r24, r15
    1070:	0e 94 18 05 	call	0xa30	; 0xa30 <GptStart_aSync>
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    1074:	ed 81       	ldd	r30, Y+5	; 0x05
    1076:	fe 81       	ldd	r31, Y+6	; 0x06
    1078:	85 81       	ldd	r24, Z+5	; 0x05
    107a:	96 81       	ldd	r25, Z+6	; 0x06
    107c:	a7 81       	ldd	r26, Z+7	; 0x07
    107e:	b0 85       	ldd	r27, Z+8	; 0x08
    1080:	81 87       	std	Z+9, r24	; 0x09
    1082:	92 87       	std	Z+10, r25	; 0x0a
    1084:	a3 87       	std	Z+11, r26	; 0x0b
    1086:	b4 87       	std	Z+12, r27	; 0x0c
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	85 87       	std	Z+13, r24	; 0x0d

	return SWPWM_STATUS_ERROR_OK;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <SWPwm_Start+0x1f6>
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    1090:	83 e0       	ldi	r24, 0x03	; 3
    1092:	07 c0       	rjmp	.+14     	; 0x10a2 <SWPwm_Start+0x1f6>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    1094:	84 e0       	ldi	r24, 0x04	; 4
    1096:	05 c0       	rjmp	.+10     	; 0x10a2 <SWPwm_Start+0x1f6>
	}
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState == SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    1098:	85 e0       	ldi	r24, 0x05	; 5
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <SWPwm_Start+0x1f6>
	/*								Function Implementation								  */
	/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <SWPwm_Start+0x1f6>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    10a0:	80 e0       	ldi	r24, 0x00	; 0
	GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID, gstr_ChannelsData[u8_ChannelID].u32_ONTicks, waveFunction);
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;

	return SWPWM_STATUS_ERROR_OK;
}
    10a2:	26 96       	adiw	r28, 0x06	; 6
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	bf 90       	pop	r11
    10bc:	af 90       	pop	r10
    10be:	9f 90       	pop	r9
    10c0:	8f 90       	pop	r8
    10c2:	7f 90       	pop	r7
    10c4:	6f 90       	pop	r6
    10c6:	5f 90       	pop	r5
    10c8:	4f 90       	pop	r4
    10ca:	08 95       	ret

000010cc <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
	/**************************************************************************************/
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    10d4:	81 11       	cpse	r24, r1
    10d6:	30 c0       	rjmp	.+96     	; 0x1138 <SWPwm_Stop+0x6c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	9c 01       	movw	r18, r24
    10dc:	22 0f       	add	r18, r18
    10de:	33 1f       	adc	r19, r19
    10e0:	f9 01       	movw	r30, r18
    10e2:	ee 0f       	add	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	ee 0f       	add	r30, r30
    10e8:	ff 1f       	adc	r31, r31
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	e2 1b       	sub	r30, r18
    10f0:	f3 0b       	sbc	r31, r19
    10f2:	e9 54       	subi	r30, 0x49	; 73
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	25 85       	ldd	r18, Z+13	; 0x0d
    10f8:	22 30       	cpi	r18, 0x02	; 2
    10fa:	01 f5       	brne	.+64     	; 0x113c <SWPwm_Stop+0x70>
	/**************************************************************************************/
	
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW);
    10fc:	ec 01       	movw	r28, r24
    10fe:	cc 0f       	add	r28, r28
    1100:	dd 1f       	adc	r29, r29
    1102:	8e 01       	movw	r16, r28
    1104:	0f 55       	subi	r16, 0x5F	; 95
    1106:	1f 4f       	sbci	r17, 0xFF	; 255
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	f8 01       	movw	r30, r16
    110c:	80 81       	ld	r24, Z
    110e:	0e 94 2b 03 	call	0x656	; 0x656 <Dio_writePin>
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    1112:	fe 01       	movw	r30, r28
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	ec 1b       	sub	r30, r28
    1122:	fd 0b       	sbc	r31, r29
    1124:	e9 54       	subi	r30, 0x49	; 73
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	85 87       	std	Z+13, r24	; 0x0d
	GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID);
    112c:	f8 01       	movw	r30, r16
    112e:	81 81       	ldd	r24, Z+1	; 0x01
    1130:	0e 94 77 05 	call	0xaee	; 0xaee <GptStop>
	
	return SWPWM_STATUS_ERROR_OK;
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	03 c0       	rjmp	.+6      	; 0x113e <SWPwm_Stop+0x72>
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    1138:	83 e0       	ldi	r24, 0x03	; 3
    113a:	01 c0       	rjmp	.+2      	; 0x113e <SWPwm_Stop+0x72>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    113c:	85 e0       	ldi	r24, 0x05	; 5
	Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW);
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
	GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID);
	
	return SWPWM_STATUS_ERROR_OK;
}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <Service_init>:
* Description: Function to Initialize the Service layer -- Initialize all the below layers.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_init(void)
{
	/* Check if the Service Layer has been already initialized */
	if(genu_SrvcStatus == SRVC_STATUS_INITIALIZED)
    1148:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <genu_SrvcStatus>
    114c:	84 30       	cpi	r24, 0x04	; 4
    114e:	81 f0       	breq	.+32     	; 0x1170 <Service_init+0x28>
		return SRVC_STATUS_INITIALIZED;
		
		
	/* Call the initializer in Button and Motor*/
	if(BTTN_STATUS_ERROR_OK != Button_init())
    1150:	0e 94 cc 00 	call	0x198	; 0x198 <Button_init>
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	49 f4       	brne	.+18     	; 0x116a <Service_init+0x22>
		return SRVC_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
    1158:	0e 94 55 01 	call	0x2aa	; 0x2aa <Motor_init>
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	39 f4       	brne	.+14     	; 0x116e <Service_init+0x26>
		return SRVC_STATUS_ERROR_NOK;
	
	genu_SrvcStatus = SRVC_STATUS_INITIALIZED;
    1160:	84 e0       	ldi	r24, 0x04	; 4
    1162:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <genu_SrvcStatus>
	return SRVC_STATUS_ERROR_OK;
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	08 95       	ret
		return SRVC_STATUS_INITIALIZED;
		
		
	/* Call the initializer in Button and Motor*/
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return SRVC_STATUS_ERROR_NOK;
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return SRVC_STATUS_ERROR_NOK;
    116e:	80 e0       	ldi	r24, 0x00	; 0
	
	genu_SrvcStatus = SRVC_STATUS_INITIALIZED;
	return SRVC_STATUS_ERROR_OK;
}
    1170:	08 95       	ret

00001172 <Service_ReportButton>:
* Parameters (out): pu8_button - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_ReportButton(uint8_t* pu8_button)
{
    1172:	af 92       	push	r10
    1174:	bf 92       	push	r11
    1176:	cf 92       	push	r12
    1178:	df 92       	push	r13
    117a:	ef 92       	push	r14
    117c:	ff 92       	push	r15
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	1f 92       	push	r1
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	5c 01       	movw	r10, r24
	uint8_t u8_ButtonsIndex=0;
	uint8_t u8_ButtonCurrState=0;
    118c:	19 82       	std	Y+1, r1	; 0x01
	for (u8_ButtonsIndex=0 ; u8_ButtonsIndex<BUTTONS_USED_NUM; u8_ButtonsIndex++)
    118e:	10 e0       	ldi	r17, 0x00	; 0
    1190:	1a c0       	rjmp	.+52     	; 0x11c6 <Service_ReportButton+0x54>
	{
		Button_updateState(gau8_buttons[u8_ButtonsIndex]);
    1192:	c1 2e       	mov	r12, r17
    1194:	d1 2c       	mov	r13, r1
    1196:	c6 01       	movw	r24, r12
    1198:	80 57       	subi	r24, 0x70	; 112
    119a:	9f 4f       	sbci	r25, 0xFF	; 255
    119c:	7c 01       	movw	r14, r24
    119e:	fc 01       	movw	r30, r24
    11a0:	80 81       	ld	r24, Z
    11a2:	0e 94 ef 00 	call	0x1de	; 0x1de <Button_updateState>
		Button_getState(gau8_buttons[u8_ButtonsIndex], &u8_ButtonCurrState);
    11a6:	be 01       	movw	r22, r28
    11a8:	6f 5f       	subi	r22, 0xFF	; 255
    11aa:	7f 4f       	sbci	r23, 0xFF	; 255
    11ac:	f7 01       	movw	r30, r14
    11ae:	80 81       	ld	r24, Z
    11b0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Button_getState>
		if(u8_ButtonCurrState == BUTTON_STATE_PRESSED)
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	29 f4       	brne	.+10     	; 0x11c4 <Service_ReportButton+0x52>
		{
			*pu8_button = gau8_buttons[u8_ButtonsIndex];
    11ba:	f7 01       	movw	r30, r14
    11bc:	80 81       	ld	r24, Z
    11be:	f5 01       	movw	r30, r10
    11c0:	80 83       	st	Z, r24
			return SRVC_STATUS_ERROR_OK;
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <Service_ReportButton+0x5e>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_ReportButton(uint8_t* pu8_button)
{
	uint8_t u8_ButtonsIndex=0;
	uint8_t u8_ButtonCurrState=0;
	for (u8_ButtonsIndex=0 ; u8_ButtonsIndex<BUTTONS_USED_NUM; u8_ButtonsIndex++)
    11c4:	1f 5f       	subi	r17, 0xFF	; 255
    11c6:	14 30       	cpi	r17, 0x04	; 4
    11c8:	20 f3       	brcs	.-56     	; 0x1192 <Service_ReportButton+0x20>
		{
			*pu8_button = gau8_buttons[u8_ButtonsIndex];
			return SRVC_STATUS_ERROR_OK;
		}
	}
	*pu8_button = BUTTON_NULL;
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	f5 01       	movw	r30, r10
    11ce:	80 83       	st	Z, r24
	return SRVC_STATUS_ERROR_OK;
}
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	0f 90       	pop	r0
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	ff 90       	pop	r15
    11dc:	ef 90       	pop	r14
    11de:	df 90       	pop	r13
    11e0:	cf 90       	pop	r12
    11e2:	bf 90       	pop	r11
    11e4:	af 90       	pop	r10
    11e6:	08 95       	ret

000011e8 <Service_UpdateMotors>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the motor (Run the motor with the specific action
*				,direction and speed)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_UpdateMotors(uint8_t u8_motorAction, uint8_t u8_motorSpeed)
{
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	c8 2f       	mov	r28, r24
	if(u8_motorAction == ACTION_STOP)
    11ee:	81 11       	cpse	r24, r1
    11f0:	08 c0       	rjmp	.+16     	; 0x1202 <Service_UpdateMotors+0x1a>
	{
		Motor_stop(MOTOR_LEFT);
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	0e 94 c4 01 	call	0x388	; 0x388 <Motor_stop>
		Motor_stop(MOTOR_RIGHT);
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	0e 94 c4 01 	call	0x388	; 0x388 <Motor_stop>
		return SRVC_STATUS_ERROR_OK;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	3b c0       	rjmp	.+118    	; 0x1278 <Service_UpdateMotors+0x90>
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
	uint8_t u8_rightMotorDir=MOTOR_FRWRD;
	
	switch (u8_motorSpeed)
    1202:	62 30       	cpi	r22, 0x02	; 2
    1204:	59 f0       	breq	.+22     	; 0x121c <Service_UpdateMotors+0x34>
    1206:	18 f4       	brcc	.+6      	; 0x120e <Service_UpdateMotors+0x26>
    1208:	61 30       	cpi	r22, 0x01	; 1
    120a:	a9 f0       	breq	.+42     	; 0x1236 <Service_UpdateMotors+0x4e>
    120c:	04 c0       	rjmp	.+8      	; 0x1216 <Service_UpdateMotors+0x2e>
    120e:	63 30       	cpi	r22, 0x03	; 3
    1210:	41 f0       	breq	.+16     	; 0x1222 <Service_UpdateMotors+0x3a>
    1212:	64 30       	cpi	r22, 0x04	; 4
    1214:	69 f0       	breq	.+26     	; 0x1230 <Service_UpdateMotors+0x48>
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    1216:	40 e0       	ldi	r20, 0x00	; 0
	{
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
    1218:	d0 e0       	ldi	r29, 0x00	; 0
    121a:	0f c0       	rjmp	.+30     	; 0x123a <Service_UpdateMotors+0x52>
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    121c:	40 e0       	ldi	r20, 0x00	; 0
	{
	case SPEED_30F:
		u8_speed = 30;
		break;
	case SPEED_60F:
		u8_speed = 60;
    121e:	dc e3       	ldi	r29, 0x3C	; 60
		break;
    1220:	0c c0       	rjmp	.+24     	; 0x123a <Service_UpdateMotors+0x52>
	case SPEED_90F:
		u8_speed = 90;
		Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_LOW);
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	0e 94 2b 03 	call	0x656	; 0x656 <Dio_writePin>
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    122a:	40 e0       	ldi	r20, 0x00	; 0
		break;
	case SPEED_60F:
		u8_speed = 60;
		break;
	case SPEED_90F:
		u8_speed = 90;
    122c:	da e5       	ldi	r29, 0x5A	; 90
		Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_LOW);
		break;
    122e:	05 c0       	rjmp	.+10     	; 0x123a <Service_UpdateMotors+0x52>
	case SPEED_30B:
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
    1230:	41 e0       	ldi	r20, 0x01	; 1
	case SPEED_90F:
		u8_speed = 90;
		Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_LOW);
		break;
	case SPEED_30B:
		u8_speed = 30;
    1232:	de e1       	ldi	r29, 0x1E	; 30
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
		break;
    1234:	02 c0       	rjmp	.+4      	; 0x123a <Service_UpdateMotors+0x52>
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    1236:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t u8_rightMotorDir=MOTOR_FRWRD;
	
	switch (u8_motorSpeed)
	{
	case SPEED_30F:
		u8_speed = 30;
    1238:	de e1       	ldi	r29, 0x1E	; 30
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
		break;
	}
	
	if (u8_motorAction == ACTION_LEFT)
    123a:	c2 30       	cpi	r28, 0x02	; 2
    123c:	21 f0       	breq	.+8      	; 0x1246 <Service_UpdateMotors+0x5e>
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
    123e:	c3 30       	cpi	r28, 0x03	; 3
    1240:	31 f0       	breq	.+12     	; 0x124e <Service_UpdateMotors+0x66>
    1242:	c4 2f       	mov	r28, r20
    1244:	07 c0       	rjmp	.+14     	; 0x1254 <Service_UpdateMotors+0x6c>
	
	if (u8_motorAction == ACTION_LEFT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
    1246:	c1 e0       	ldi	r28, 0x01	; 1
	}
	
	if (u8_motorAction == ACTION_LEFT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
    1248:	40 e0       	ldi	r20, 0x00	; 0
		break;
	}
	
	if (u8_motorAction == ACTION_LEFT)
	{
		u8_speed = 30;
    124a:	de e1       	ldi	r29, 0x1E	; 30
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <Service_UpdateMotors+0x6c>
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_FRWRD;
    124e:	c0 e0       	ldi	r28, 0x00	; 0
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
    1250:	41 e0       	ldi	r20, 0x01	; 1
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
	{
		u8_speed = 30;
    1252:	de e1       	ldi	r29, 0x1E	; 30
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_FRWRD;
	}
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_LEFT, u8_speed, u8_leftMotorDir))
    1254:	6d 2f       	mov	r22, r29
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Motor_run>
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	49 f4       	brne	.+18     	; 0x1272 <Service_UpdateMotors+0x8a>
		return SRVC_STATUS_ERROR_NOK;
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_RIGHT, u8_speed, u8_rightMotorDir))
    1260:	4c 2f       	mov	r20, r28
    1262:	6d 2f       	mov	r22, r29
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	0e 94 59 01 	call	0x2b2	; 0x2b2 <Motor_run>
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	21 f0       	breq	.+8      	; 0x1276 <Service_UpdateMotors+0x8e>
		return SRVC_STATUS_ERROR_NOK;
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <Service_UpdateMotors+0x90>
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_FRWRD;
	}
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_LEFT, u8_speed, u8_leftMotorDir))
		return SRVC_STATUS_ERROR_NOK;
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <Service_UpdateMotors+0x90>
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_RIGHT, u8_speed, u8_rightMotorDir))
		return SRVC_STATUS_ERROR_NOK;
	return  SRVC_STATUS_ERROR_OK;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	08 95       	ret

0000127e <__subsf3>:
    127e:	50 58       	subi	r21, 0x80	; 128

00001280 <__addsf3>:
    1280:	bb 27       	eor	r27, r27
    1282:	aa 27       	eor	r26, r26
    1284:	0e 94 57 09 	call	0x12ae	; 0x12ae <__addsf3x>
    1288:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_round>
    128c:	0e 94 93 0a 	call	0x1526	; 0x1526 <__fp_pscA>
    1290:	38 f0       	brcs	.+14     	; 0x12a0 <__addsf3+0x20>
    1292:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__fp_pscB>
    1296:	20 f0       	brcs	.+8      	; 0x12a0 <__addsf3+0x20>
    1298:	39 f4       	brne	.+14     	; 0x12a8 <__addsf3+0x28>
    129a:	9f 3f       	cpi	r25, 0xFF	; 255
    129c:	19 f4       	brne	.+6      	; 0x12a4 <__addsf3+0x24>
    129e:	26 f4       	brtc	.+8      	; 0x12a8 <__addsf3+0x28>
    12a0:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <__fp_nan>
    12a4:	0e f4       	brtc	.+2      	; 0x12a8 <__addsf3+0x28>
    12a6:	e0 95       	com	r30
    12a8:	e7 fb       	bst	r30, 7
    12aa:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__fp_inf>

000012ae <__addsf3x>:
    12ae:	e9 2f       	mov	r30, r25
    12b0:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fp_split3>
    12b4:	58 f3       	brcs	.-42     	; 0x128c <__addsf3+0xc>
    12b6:	ba 17       	cp	r27, r26
    12b8:	62 07       	cpc	r22, r18
    12ba:	73 07       	cpc	r23, r19
    12bc:	84 07       	cpc	r24, r20
    12be:	95 07       	cpc	r25, r21
    12c0:	20 f0       	brcs	.+8      	; 0x12ca <__addsf3x+0x1c>
    12c2:	79 f4       	brne	.+30     	; 0x12e2 <__addsf3x+0x34>
    12c4:	a6 f5       	brtc	.+104    	; 0x132e <__addsf3x+0x80>
    12c6:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__fp_zero>
    12ca:	0e f4       	brtc	.+2      	; 0x12ce <__addsf3x+0x20>
    12cc:	e0 95       	com	r30
    12ce:	0b 2e       	mov	r0, r27
    12d0:	ba 2f       	mov	r27, r26
    12d2:	a0 2d       	mov	r26, r0
    12d4:	0b 01       	movw	r0, r22
    12d6:	b9 01       	movw	r22, r18
    12d8:	90 01       	movw	r18, r0
    12da:	0c 01       	movw	r0, r24
    12dc:	ca 01       	movw	r24, r20
    12de:	a0 01       	movw	r20, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	ff 27       	eor	r31, r31
    12e4:	59 1b       	sub	r21, r25
    12e6:	99 f0       	breq	.+38     	; 0x130e <__addsf3x+0x60>
    12e8:	59 3f       	cpi	r21, 0xF9	; 249
    12ea:	50 f4       	brcc	.+20     	; 0x1300 <__addsf3x+0x52>
    12ec:	50 3e       	cpi	r21, 0xE0	; 224
    12ee:	68 f1       	brcs	.+90     	; 0x134a <__addsf3x+0x9c>
    12f0:	1a 16       	cp	r1, r26
    12f2:	f0 40       	sbci	r31, 0x00	; 0
    12f4:	a2 2f       	mov	r26, r18
    12f6:	23 2f       	mov	r18, r19
    12f8:	34 2f       	mov	r19, r20
    12fa:	44 27       	eor	r20, r20
    12fc:	58 5f       	subi	r21, 0xF8	; 248
    12fe:	f3 cf       	rjmp	.-26     	; 0x12e6 <__addsf3x+0x38>
    1300:	46 95       	lsr	r20
    1302:	37 95       	ror	r19
    1304:	27 95       	ror	r18
    1306:	a7 95       	ror	r26
    1308:	f0 40       	sbci	r31, 0x00	; 0
    130a:	53 95       	inc	r21
    130c:	c9 f7       	brne	.-14     	; 0x1300 <__addsf3x+0x52>
    130e:	7e f4       	brtc	.+30     	; 0x132e <__addsf3x+0x80>
    1310:	1f 16       	cp	r1, r31
    1312:	ba 0b       	sbc	r27, r26
    1314:	62 0b       	sbc	r22, r18
    1316:	73 0b       	sbc	r23, r19
    1318:	84 0b       	sbc	r24, r20
    131a:	ba f0       	brmi	.+46     	; 0x134a <__addsf3x+0x9c>
    131c:	91 50       	subi	r25, 0x01	; 1
    131e:	a1 f0       	breq	.+40     	; 0x1348 <__addsf3x+0x9a>
    1320:	ff 0f       	add	r31, r31
    1322:	bb 1f       	adc	r27, r27
    1324:	66 1f       	adc	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	88 1f       	adc	r24, r24
    132a:	c2 f7       	brpl	.-16     	; 0x131c <__addsf3x+0x6e>
    132c:	0e c0       	rjmp	.+28     	; 0x134a <__addsf3x+0x9c>
    132e:	ba 0f       	add	r27, r26
    1330:	62 1f       	adc	r22, r18
    1332:	73 1f       	adc	r23, r19
    1334:	84 1f       	adc	r24, r20
    1336:	48 f4       	brcc	.+18     	; 0x134a <__addsf3x+0x9c>
    1338:	87 95       	ror	r24
    133a:	77 95       	ror	r23
    133c:	67 95       	ror	r22
    133e:	b7 95       	ror	r27
    1340:	f7 95       	ror	r31
    1342:	9e 3f       	cpi	r25, 0xFE	; 254
    1344:	08 f0       	brcs	.+2      	; 0x1348 <__addsf3x+0x9a>
    1346:	b0 cf       	rjmp	.-160    	; 0x12a8 <__addsf3+0x28>
    1348:	93 95       	inc	r25
    134a:	88 0f       	add	r24, r24
    134c:	08 f0       	brcs	.+2      	; 0x1350 <__addsf3x+0xa2>
    134e:	99 27       	eor	r25, r25
    1350:	ee 0f       	add	r30, r30
    1352:	97 95       	ror	r25
    1354:	87 95       	ror	r24
    1356:	08 95       	ret

00001358 <__divsf3>:
    1358:	0e 94 c0 09 	call	0x1380	; 0x1380 <__divsf3x>
    135c:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_round>
    1360:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__fp_pscB>
    1364:	58 f0       	brcs	.+22     	; 0x137c <__divsf3+0x24>
    1366:	0e 94 93 0a 	call	0x1526	; 0x1526 <__fp_pscA>
    136a:	40 f0       	brcs	.+16     	; 0x137c <__divsf3+0x24>
    136c:	29 f4       	brne	.+10     	; 0x1378 <__divsf3+0x20>
    136e:	5f 3f       	cpi	r21, 0xFF	; 255
    1370:	29 f0       	breq	.+10     	; 0x137c <__divsf3+0x24>
    1372:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__fp_inf>
    1376:	51 11       	cpse	r21, r1
    1378:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__fp_szero>
    137c:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <__fp_nan>

00001380 <__divsf3x>:
    1380:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fp_split3>
    1384:	68 f3       	brcs	.-38     	; 0x1360 <__divsf3+0x8>

00001386 <__divsf3_pse>:
    1386:	99 23       	and	r25, r25
    1388:	b1 f3       	breq	.-20     	; 0x1376 <__divsf3+0x1e>
    138a:	55 23       	and	r21, r21
    138c:	91 f3       	breq	.-28     	; 0x1372 <__divsf3+0x1a>
    138e:	95 1b       	sub	r25, r21
    1390:	55 0b       	sbc	r21, r21
    1392:	bb 27       	eor	r27, r27
    1394:	aa 27       	eor	r26, r26
    1396:	62 17       	cp	r22, r18
    1398:	73 07       	cpc	r23, r19
    139a:	84 07       	cpc	r24, r20
    139c:	38 f0       	brcs	.+14     	; 0x13ac <__divsf3_pse+0x26>
    139e:	9f 5f       	subi	r25, 0xFF	; 255
    13a0:	5f 4f       	sbci	r21, 0xFF	; 255
    13a2:	22 0f       	add	r18, r18
    13a4:	33 1f       	adc	r19, r19
    13a6:	44 1f       	adc	r20, r20
    13a8:	aa 1f       	adc	r26, r26
    13aa:	a9 f3       	breq	.-22     	; 0x1396 <__divsf3_pse+0x10>
    13ac:	35 d0       	rcall	.+106    	; 0x1418 <__divsf3_pse+0x92>
    13ae:	0e 2e       	mov	r0, r30
    13b0:	3a f0       	brmi	.+14     	; 0x13c0 <__divsf3_pse+0x3a>
    13b2:	e0 e8       	ldi	r30, 0x80	; 128
    13b4:	32 d0       	rcall	.+100    	; 0x141a <__divsf3_pse+0x94>
    13b6:	91 50       	subi	r25, 0x01	; 1
    13b8:	50 40       	sbci	r21, 0x00	; 0
    13ba:	e6 95       	lsr	r30
    13bc:	00 1c       	adc	r0, r0
    13be:	ca f7       	brpl	.-14     	; 0x13b2 <__divsf3_pse+0x2c>
    13c0:	2b d0       	rcall	.+86     	; 0x1418 <__divsf3_pse+0x92>
    13c2:	fe 2f       	mov	r31, r30
    13c4:	29 d0       	rcall	.+82     	; 0x1418 <__divsf3_pse+0x92>
    13c6:	66 0f       	add	r22, r22
    13c8:	77 1f       	adc	r23, r23
    13ca:	88 1f       	adc	r24, r24
    13cc:	bb 1f       	adc	r27, r27
    13ce:	26 17       	cp	r18, r22
    13d0:	37 07       	cpc	r19, r23
    13d2:	48 07       	cpc	r20, r24
    13d4:	ab 07       	cpc	r26, r27
    13d6:	b0 e8       	ldi	r27, 0x80	; 128
    13d8:	09 f0       	breq	.+2      	; 0x13dc <__divsf3_pse+0x56>
    13da:	bb 0b       	sbc	r27, r27
    13dc:	80 2d       	mov	r24, r0
    13de:	bf 01       	movw	r22, r30
    13e0:	ff 27       	eor	r31, r31
    13e2:	93 58       	subi	r25, 0x83	; 131
    13e4:	5f 4f       	sbci	r21, 0xFF	; 255
    13e6:	3a f0       	brmi	.+14     	; 0x13f6 <__divsf3_pse+0x70>
    13e8:	9e 3f       	cpi	r25, 0xFE	; 254
    13ea:	51 05       	cpc	r21, r1
    13ec:	78 f0       	brcs	.+30     	; 0x140c <__divsf3_pse+0x86>
    13ee:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__fp_inf>
    13f2:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__fp_szero>
    13f6:	5f 3f       	cpi	r21, 0xFF	; 255
    13f8:	e4 f3       	brlt	.-8      	; 0x13f2 <__divsf3_pse+0x6c>
    13fa:	98 3e       	cpi	r25, 0xE8	; 232
    13fc:	d4 f3       	brlt	.-12     	; 0x13f2 <__divsf3_pse+0x6c>
    13fe:	86 95       	lsr	r24
    1400:	77 95       	ror	r23
    1402:	67 95       	ror	r22
    1404:	b7 95       	ror	r27
    1406:	f7 95       	ror	r31
    1408:	9f 5f       	subi	r25, 0xFF	; 255
    140a:	c9 f7       	brne	.-14     	; 0x13fe <__divsf3_pse+0x78>
    140c:	88 0f       	add	r24, r24
    140e:	91 1d       	adc	r25, r1
    1410:	96 95       	lsr	r25
    1412:	87 95       	ror	r24
    1414:	97 f9       	bld	r25, 7
    1416:	08 95       	ret
    1418:	e1 e0       	ldi	r30, 0x01	; 1
    141a:	66 0f       	add	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	88 1f       	adc	r24, r24
    1420:	bb 1f       	adc	r27, r27
    1422:	62 17       	cp	r22, r18
    1424:	73 07       	cpc	r23, r19
    1426:	84 07       	cpc	r24, r20
    1428:	ba 07       	cpc	r27, r26
    142a:	20 f0       	brcs	.+8      	; 0x1434 <__divsf3_pse+0xae>
    142c:	62 1b       	sub	r22, r18
    142e:	73 0b       	sbc	r23, r19
    1430:	84 0b       	sbc	r24, r20
    1432:	ba 0b       	sbc	r27, r26
    1434:	ee 1f       	adc	r30, r30
    1436:	88 f7       	brcc	.-30     	; 0x141a <__divsf3_pse+0x94>
    1438:	e0 95       	com	r30
    143a:	08 95       	ret

0000143c <__fixunssfsi>:
    143c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__fp_splitA>
    1440:	88 f0       	brcs	.+34     	; 0x1464 <__fixunssfsi+0x28>
    1442:	9f 57       	subi	r25, 0x7F	; 127
    1444:	98 f0       	brcs	.+38     	; 0x146c <__fixunssfsi+0x30>
    1446:	b9 2f       	mov	r27, r25
    1448:	99 27       	eor	r25, r25
    144a:	b7 51       	subi	r27, 0x17	; 23
    144c:	b0 f0       	brcs	.+44     	; 0x147a <__fixunssfsi+0x3e>
    144e:	e1 f0       	breq	.+56     	; 0x1488 <__fixunssfsi+0x4c>
    1450:	66 0f       	add	r22, r22
    1452:	77 1f       	adc	r23, r23
    1454:	88 1f       	adc	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	1a f0       	brmi	.+6      	; 0x1460 <__fixunssfsi+0x24>
    145a:	ba 95       	dec	r27
    145c:	c9 f7       	brne	.-14     	; 0x1450 <__fixunssfsi+0x14>
    145e:	14 c0       	rjmp	.+40     	; 0x1488 <__fixunssfsi+0x4c>
    1460:	b1 30       	cpi	r27, 0x01	; 1
    1462:	91 f0       	breq	.+36     	; 0x1488 <__fixunssfsi+0x4c>
    1464:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__fp_zero>
    1468:	b1 e0       	ldi	r27, 0x01	; 1
    146a:	08 95       	ret
    146c:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__fp_zero>
    1470:	67 2f       	mov	r22, r23
    1472:	78 2f       	mov	r23, r24
    1474:	88 27       	eor	r24, r24
    1476:	b8 5f       	subi	r27, 0xF8	; 248
    1478:	39 f0       	breq	.+14     	; 0x1488 <__fixunssfsi+0x4c>
    147a:	b9 3f       	cpi	r27, 0xF9	; 249
    147c:	cc f3       	brlt	.-14     	; 0x1470 <__fixunssfsi+0x34>
    147e:	86 95       	lsr	r24
    1480:	77 95       	ror	r23
    1482:	67 95       	ror	r22
    1484:	b3 95       	inc	r27
    1486:	d9 f7       	brne	.-10     	; 0x147e <__fixunssfsi+0x42>
    1488:	3e f4       	brtc	.+14     	; 0x1498 <__fixunssfsi+0x5c>
    148a:	90 95       	com	r25
    148c:	80 95       	com	r24
    148e:	70 95       	com	r23
    1490:	61 95       	neg	r22
    1492:	7f 4f       	sbci	r23, 0xFF	; 255
    1494:	8f 4f       	sbci	r24, 0xFF	; 255
    1496:	9f 4f       	sbci	r25, 0xFF	; 255
    1498:	08 95       	ret

0000149a <__floatunsisf>:
    149a:	e8 94       	clt
    149c:	09 c0       	rjmp	.+18     	; 0x14b0 <__floatsisf+0x12>

0000149e <__floatsisf>:
    149e:	97 fb       	bst	r25, 7
    14a0:	3e f4       	brtc	.+14     	; 0x14b0 <__floatsisf+0x12>
    14a2:	90 95       	com	r25
    14a4:	80 95       	com	r24
    14a6:	70 95       	com	r23
    14a8:	61 95       	neg	r22
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	8f 4f       	sbci	r24, 0xFF	; 255
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	99 23       	and	r25, r25
    14b2:	a9 f0       	breq	.+42     	; 0x14de <__floatsisf+0x40>
    14b4:	f9 2f       	mov	r31, r25
    14b6:	96 e9       	ldi	r25, 0x96	; 150
    14b8:	bb 27       	eor	r27, r27
    14ba:	93 95       	inc	r25
    14bc:	f6 95       	lsr	r31
    14be:	87 95       	ror	r24
    14c0:	77 95       	ror	r23
    14c2:	67 95       	ror	r22
    14c4:	b7 95       	ror	r27
    14c6:	f1 11       	cpse	r31, r1
    14c8:	f8 cf       	rjmp	.-16     	; 0x14ba <__floatsisf+0x1c>
    14ca:	fa f4       	brpl	.+62     	; 0x150a <__floatsisf+0x6c>
    14cc:	bb 0f       	add	r27, r27
    14ce:	11 f4       	brne	.+4      	; 0x14d4 <__floatsisf+0x36>
    14d0:	60 ff       	sbrs	r22, 0
    14d2:	1b c0       	rjmp	.+54     	; 0x150a <__floatsisf+0x6c>
    14d4:	6f 5f       	subi	r22, 0xFF	; 255
    14d6:	7f 4f       	sbci	r23, 0xFF	; 255
    14d8:	8f 4f       	sbci	r24, 0xFF	; 255
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	16 c0       	rjmp	.+44     	; 0x150a <__floatsisf+0x6c>
    14de:	88 23       	and	r24, r24
    14e0:	11 f0       	breq	.+4      	; 0x14e6 <__floatsisf+0x48>
    14e2:	96 e9       	ldi	r25, 0x96	; 150
    14e4:	11 c0       	rjmp	.+34     	; 0x1508 <__floatsisf+0x6a>
    14e6:	77 23       	and	r23, r23
    14e8:	21 f0       	breq	.+8      	; 0x14f2 <__floatsisf+0x54>
    14ea:	9e e8       	ldi	r25, 0x8E	; 142
    14ec:	87 2f       	mov	r24, r23
    14ee:	76 2f       	mov	r23, r22
    14f0:	05 c0       	rjmp	.+10     	; 0x14fc <__floatsisf+0x5e>
    14f2:	66 23       	and	r22, r22
    14f4:	71 f0       	breq	.+28     	; 0x1512 <__floatsisf+0x74>
    14f6:	96 e8       	ldi	r25, 0x86	; 134
    14f8:	86 2f       	mov	r24, r22
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	2a f0       	brmi	.+10     	; 0x150a <__floatsisf+0x6c>
    1500:	9a 95       	dec	r25
    1502:	66 0f       	add	r22, r22
    1504:	77 1f       	adc	r23, r23
    1506:	88 1f       	adc	r24, r24
    1508:	da f7       	brpl	.-10     	; 0x1500 <__floatsisf+0x62>
    150a:	88 0f       	add	r24, r24
    150c:	96 95       	lsr	r25
    150e:	87 95       	ror	r24
    1510:	97 f9       	bld	r25, 7
    1512:	08 95       	ret

00001514 <__fp_inf>:
    1514:	97 f9       	bld	r25, 7
    1516:	9f 67       	ori	r25, 0x7F	; 127
    1518:	80 e8       	ldi	r24, 0x80	; 128
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	60 e0       	ldi	r22, 0x00	; 0
    151e:	08 95       	ret

00001520 <__fp_nan>:
    1520:	9f ef       	ldi	r25, 0xFF	; 255
    1522:	80 ec       	ldi	r24, 0xC0	; 192
    1524:	08 95       	ret

00001526 <__fp_pscA>:
    1526:	00 24       	eor	r0, r0
    1528:	0a 94       	dec	r0
    152a:	16 16       	cp	r1, r22
    152c:	17 06       	cpc	r1, r23
    152e:	18 06       	cpc	r1, r24
    1530:	09 06       	cpc	r0, r25
    1532:	08 95       	ret

00001534 <__fp_pscB>:
    1534:	00 24       	eor	r0, r0
    1536:	0a 94       	dec	r0
    1538:	12 16       	cp	r1, r18
    153a:	13 06       	cpc	r1, r19
    153c:	14 06       	cpc	r1, r20
    153e:	05 06       	cpc	r0, r21
    1540:	08 95       	ret

00001542 <__fp_round>:
    1542:	09 2e       	mov	r0, r25
    1544:	03 94       	inc	r0
    1546:	00 0c       	add	r0, r0
    1548:	11 f4       	brne	.+4      	; 0x154e <__fp_round+0xc>
    154a:	88 23       	and	r24, r24
    154c:	52 f0       	brmi	.+20     	; 0x1562 <__fp_round+0x20>
    154e:	bb 0f       	add	r27, r27
    1550:	40 f4       	brcc	.+16     	; 0x1562 <__fp_round+0x20>
    1552:	bf 2b       	or	r27, r31
    1554:	11 f4       	brne	.+4      	; 0x155a <__fp_round+0x18>
    1556:	60 ff       	sbrs	r22, 0
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <__fp_round+0x20>
    155a:	6f 5f       	subi	r22, 0xFF	; 255
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	8f 4f       	sbci	r24, 0xFF	; 255
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	08 95       	ret

00001564 <__fp_split3>:
    1564:	57 fd       	sbrc	r21, 7
    1566:	90 58       	subi	r25, 0x80	; 128
    1568:	44 0f       	add	r20, r20
    156a:	55 1f       	adc	r21, r21
    156c:	59 f0       	breq	.+22     	; 0x1584 <__fp_splitA+0x10>
    156e:	5f 3f       	cpi	r21, 0xFF	; 255
    1570:	71 f0       	breq	.+28     	; 0x158e <__fp_splitA+0x1a>
    1572:	47 95       	ror	r20

00001574 <__fp_splitA>:
    1574:	88 0f       	add	r24, r24
    1576:	97 fb       	bst	r25, 7
    1578:	99 1f       	adc	r25, r25
    157a:	61 f0       	breq	.+24     	; 0x1594 <__fp_splitA+0x20>
    157c:	9f 3f       	cpi	r25, 0xFF	; 255
    157e:	79 f0       	breq	.+30     	; 0x159e <__fp_splitA+0x2a>
    1580:	87 95       	ror	r24
    1582:	08 95       	ret
    1584:	12 16       	cp	r1, r18
    1586:	13 06       	cpc	r1, r19
    1588:	14 06       	cpc	r1, r20
    158a:	55 1f       	adc	r21, r21
    158c:	f2 cf       	rjmp	.-28     	; 0x1572 <__fp_split3+0xe>
    158e:	46 95       	lsr	r20
    1590:	f1 df       	rcall	.-30     	; 0x1574 <__fp_splitA>
    1592:	08 c0       	rjmp	.+16     	; 0x15a4 <__fp_splitA+0x30>
    1594:	16 16       	cp	r1, r22
    1596:	17 06       	cpc	r1, r23
    1598:	18 06       	cpc	r1, r24
    159a:	99 1f       	adc	r25, r25
    159c:	f1 cf       	rjmp	.-30     	; 0x1580 <__fp_splitA+0xc>
    159e:	86 95       	lsr	r24
    15a0:	71 05       	cpc	r23, r1
    15a2:	61 05       	cpc	r22, r1
    15a4:	08 94       	sec
    15a6:	08 95       	ret

000015a8 <__fp_zero>:
    15a8:	e8 94       	clt

000015aa <__fp_szero>:
    15aa:	bb 27       	eor	r27, r27
    15ac:	66 27       	eor	r22, r22
    15ae:	77 27       	eor	r23, r23
    15b0:	cb 01       	movw	r24, r22
    15b2:	97 f9       	bld	r25, 7
    15b4:	08 95       	ret

000015b6 <__mulsf3>:
    15b6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__mulsf3x>
    15ba:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__fp_round>
    15be:	0e 94 93 0a 	call	0x1526	; 0x1526 <__fp_pscA>
    15c2:	38 f0       	brcs	.+14     	; 0x15d2 <__mulsf3+0x1c>
    15c4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <__fp_pscB>
    15c8:	20 f0       	brcs	.+8      	; 0x15d2 <__mulsf3+0x1c>
    15ca:	95 23       	and	r25, r21
    15cc:	11 f0       	breq	.+4      	; 0x15d2 <__mulsf3+0x1c>
    15ce:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__fp_inf>
    15d2:	0c 94 90 0a 	jmp	0x1520	; 0x1520 <__fp_nan>
    15d6:	11 24       	eor	r1, r1
    15d8:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__fp_szero>

000015dc <__mulsf3x>:
    15dc:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fp_split3>
    15e0:	70 f3       	brcs	.-36     	; 0x15be <__mulsf3+0x8>

000015e2 <__mulsf3_pse>:
    15e2:	95 9f       	mul	r25, r21
    15e4:	c1 f3       	breq	.-16     	; 0x15d6 <__mulsf3+0x20>
    15e6:	95 0f       	add	r25, r21
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	55 1f       	adc	r21, r21
    15ec:	62 9f       	mul	r22, r18
    15ee:	f0 01       	movw	r30, r0
    15f0:	72 9f       	mul	r23, r18
    15f2:	bb 27       	eor	r27, r27
    15f4:	f0 0d       	add	r31, r0
    15f6:	b1 1d       	adc	r27, r1
    15f8:	63 9f       	mul	r22, r19
    15fa:	aa 27       	eor	r26, r26
    15fc:	f0 0d       	add	r31, r0
    15fe:	b1 1d       	adc	r27, r1
    1600:	aa 1f       	adc	r26, r26
    1602:	64 9f       	mul	r22, r20
    1604:	66 27       	eor	r22, r22
    1606:	b0 0d       	add	r27, r0
    1608:	a1 1d       	adc	r26, r1
    160a:	66 1f       	adc	r22, r22
    160c:	82 9f       	mul	r24, r18
    160e:	22 27       	eor	r18, r18
    1610:	b0 0d       	add	r27, r0
    1612:	a1 1d       	adc	r26, r1
    1614:	62 1f       	adc	r22, r18
    1616:	73 9f       	mul	r23, r19
    1618:	b0 0d       	add	r27, r0
    161a:	a1 1d       	adc	r26, r1
    161c:	62 1f       	adc	r22, r18
    161e:	83 9f       	mul	r24, r19
    1620:	a0 0d       	add	r26, r0
    1622:	61 1d       	adc	r22, r1
    1624:	22 1f       	adc	r18, r18
    1626:	74 9f       	mul	r23, r20
    1628:	33 27       	eor	r19, r19
    162a:	a0 0d       	add	r26, r0
    162c:	61 1d       	adc	r22, r1
    162e:	23 1f       	adc	r18, r19
    1630:	84 9f       	mul	r24, r20
    1632:	60 0d       	add	r22, r0
    1634:	21 1d       	adc	r18, r1
    1636:	82 2f       	mov	r24, r18
    1638:	76 2f       	mov	r23, r22
    163a:	6a 2f       	mov	r22, r26
    163c:	11 24       	eor	r1, r1
    163e:	9f 57       	subi	r25, 0x7F	; 127
    1640:	50 40       	sbci	r21, 0x00	; 0
    1642:	9a f0       	brmi	.+38     	; 0x166a <__mulsf3_pse+0x88>
    1644:	f1 f0       	breq	.+60     	; 0x1682 <__mulsf3_pse+0xa0>
    1646:	88 23       	and	r24, r24
    1648:	4a f0       	brmi	.+18     	; 0x165c <__mulsf3_pse+0x7a>
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	bb 1f       	adc	r27, r27
    1650:	66 1f       	adc	r22, r22
    1652:	77 1f       	adc	r23, r23
    1654:	88 1f       	adc	r24, r24
    1656:	91 50       	subi	r25, 0x01	; 1
    1658:	50 40       	sbci	r21, 0x00	; 0
    165a:	a9 f7       	brne	.-22     	; 0x1646 <__mulsf3_pse+0x64>
    165c:	9e 3f       	cpi	r25, 0xFE	; 254
    165e:	51 05       	cpc	r21, r1
    1660:	80 f0       	brcs	.+32     	; 0x1682 <__mulsf3_pse+0xa0>
    1662:	0c 94 8a 0a 	jmp	0x1514	; 0x1514 <__fp_inf>
    1666:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__fp_szero>
    166a:	5f 3f       	cpi	r21, 0xFF	; 255
    166c:	e4 f3       	brlt	.-8      	; 0x1666 <__mulsf3_pse+0x84>
    166e:	98 3e       	cpi	r25, 0xE8	; 232
    1670:	d4 f3       	brlt	.-12     	; 0x1666 <__mulsf3_pse+0x84>
    1672:	86 95       	lsr	r24
    1674:	77 95       	ror	r23
    1676:	67 95       	ror	r22
    1678:	b7 95       	ror	r27
    167a:	f7 95       	ror	r31
    167c:	e7 95       	ror	r30
    167e:	9f 5f       	subi	r25, 0xFF	; 255
    1680:	c1 f7       	brne	.-16     	; 0x1672 <__mulsf3_pse+0x90>
    1682:	fe 2b       	or	r31, r30
    1684:	88 0f       	add	r24, r24
    1686:	91 1d       	adc	r25, r1
    1688:	96 95       	lsr	r25
    168a:	87 95       	ror	r24
    168c:	97 f9       	bld	r25, 7
    168e:	08 95       	ret

00001690 <__udivmodsi4>:
    1690:	a1 e2       	ldi	r26, 0x21	; 33
    1692:	1a 2e       	mov	r1, r26
    1694:	aa 1b       	sub	r26, r26
    1696:	bb 1b       	sub	r27, r27
    1698:	fd 01       	movw	r30, r26
    169a:	0d c0       	rjmp	.+26     	; 0x16b6 <__udivmodsi4_ep>

0000169c <__udivmodsi4_loop>:
    169c:	aa 1f       	adc	r26, r26
    169e:	bb 1f       	adc	r27, r27
    16a0:	ee 1f       	adc	r30, r30
    16a2:	ff 1f       	adc	r31, r31
    16a4:	a2 17       	cp	r26, r18
    16a6:	b3 07       	cpc	r27, r19
    16a8:	e4 07       	cpc	r30, r20
    16aa:	f5 07       	cpc	r31, r21
    16ac:	20 f0       	brcs	.+8      	; 0x16b6 <__udivmodsi4_ep>
    16ae:	a2 1b       	sub	r26, r18
    16b0:	b3 0b       	sbc	r27, r19
    16b2:	e4 0b       	sbc	r30, r20
    16b4:	f5 0b       	sbc	r31, r21

000016b6 <__udivmodsi4_ep>:
    16b6:	66 1f       	adc	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	88 1f       	adc	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	1a 94       	dec	r1
    16c0:	69 f7       	brne	.-38     	; 0x169c <__udivmodsi4_loop>
    16c2:	60 95       	com	r22
    16c4:	70 95       	com	r23
    16c6:	80 95       	com	r24
    16c8:	90 95       	com	r25
    16ca:	9b 01       	movw	r18, r22
    16cc:	ac 01       	movw	r20, r24
    16ce:	bd 01       	movw	r22, r26
    16d0:	cf 01       	movw	r24, r30
    16d2:	08 95       	ret

000016d4 <__tablejump2__>:
    16d4:	ee 0f       	add	r30, r30
    16d6:	ff 1f       	adc	r31, r31
    16d8:	05 90       	lpm	r0, Z+
    16da:	f4 91       	lpm	r31, Z
    16dc:	e0 2d       	mov	r30, r0
    16de:	09 94       	ijmp

000016e0 <_exit>:
    16e0:	f8 94       	cli

000016e2 <__stop_program>:
    16e2:	ff cf       	rjmp	.-2      	; 0x16e2 <__stop_program>
