
CarControlSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000166a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  0000166a  000016fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080009a  0080009a  00001738  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022b0  00000000  00000000  000019d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f29  00000000  00000000  00003c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a4  00000000  00000000  00004bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000608  00000000  00000000  00006054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012d4  00000000  00000000  0000665c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015e4  00000000  00000000  00007930  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00008f14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
       4:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       8:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
       c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      10:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__vector_4>
      14:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__vector_5>
      18:	0c 94 00 06 	jmp	0xc00	; 0xc00 <__vector_6>
      1c:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__vector_7>
      20:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__vector_8>
      24:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__vector_9>
      28:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__vector_10>
      2c:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__vector_11>
      30:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      34:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      38:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      3c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      44:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      48:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      4c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      50:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__bad_interrupt>
      54:	b8 07       	cpc	r27, r24
      56:	c4 07       	cpc	r28, r20
      58:	bb 07       	cpc	r27, r27
      5a:	be 07       	cpc	r27, r30
      5c:	c1 07       	cpc	r28, r17
      5e:	b8 07       	cpc	r27, r24
      60:	b8 07       	cpc	r27, r24

00000062 <__ctors_end>:
      62:	11 24       	eor	r1, r1
      64:	1f be       	out	0x3f, r1	; 63
      66:	cf e5       	ldi	r28, 0x5F	; 95
      68:	d8 e0       	ldi	r29, 0x08	; 8
      6a:	de bf       	out	0x3e, r29	; 62
      6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
      6e:	10 e0       	ldi	r17, 0x00	; 0
      70:	a0 e6       	ldi	r26, 0x60	; 96
      72:	b0 e0       	ldi	r27, 0x00	; 0
      74:	ea e6       	ldi	r30, 0x6A	; 106
      76:	f6 e1       	ldi	r31, 0x16	; 22
      78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
      7a:	05 90       	lpm	r0, Z+
      7c:	0d 92       	st	X+, r0
      7e:	aa 39       	cpi	r26, 0x9A	; 154
      80:	b1 07       	cpc	r27, r17
      82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
      84:	20 e0       	ldi	r18, 0x00	; 0
      86:	aa e9       	ldi	r26, 0x9A	; 154
      88:	b0 e0       	ldi	r27, 0x00	; 0
      8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
      8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
      8e:	ac 3b       	cpi	r26, 0xBC	; 188
      90:	b2 07       	cpc	r27, r18
      92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
      94:	0e 94 20 02 	call	0x440	; 0x440 <main>
      98:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <_exit>

0000009c <__bad_interrupt>:
      9c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a0 <CarApp_init>:
* Return value: enuApp_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t CarApp_init(void)
{
	if (enuCurrentAppStatus == APP_STATUS_INITIALIZED)
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      a4:	84 30       	cpi	r24, 0x04	; 4
      a6:	51 f0       	breq	.+20     	; 0xbc <CarApp_init+0x1c>
	{
		return APP_STATUS_INITIALIZED;
	}
	/* Call the initializer in service layer*/
	if(SRVC_STATUS_ERROR_OK != Service_init())
      a8:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <Service_init>
      ac:	81 30       	cpi	r24, 0x01	; 1
      ae:	29 f4       	brne	.+10     	; 0xba <CarApp_init+0x1a>
	{
		return APP_STATUS_ERROR_NOK;
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
      b0:	84 e0       	ldi	r24, 0x04	; 4
      b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return APP_STATUS_ERROR_OK;
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	08 95       	ret
		return APP_STATUS_INITIALIZED;
	}
	/* Call the initializer in service layer*/
	if(SRVC_STATUS_ERROR_OK != Service_init())
	{
		return APP_STATUS_ERROR_NOK;
      ba:	80 e0       	ldi	r24, 0x00	; 0
	}
	/* Update enuCurrentAppStatus to initialized */
	enuCurrentAppStatus = APP_STATUS_INITIALIZED;
	return APP_STATUS_ERROR_OK;
}
      bc:	08 95       	ret

000000be <CarApp_update>:
* Description: Function to Update the state of the application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t CarApp_update(void)
{
	/* Get Button Pressed */
	Service_ReportButton(&gu8_buttonPressed);
      be:	8a e9       	ldi	r24, 0x9A	; 154
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 90 08 	call	0x1120	; 0x1120 <Service_ReportButton>
	
	/* Fill the enuCurrentButton according to the button pressed */
	switch (gu8_buttonPressed)
      c6:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <__data_end>
      ca:	82 30       	cpi	r24, 0x02	; 2
      cc:	01 f1       	breq	.+64     	; 0x10e <CarApp_update+0x50>
      ce:	30 f4       	brcc	.+12     	; 0xdc <CarApp_update+0x1e>
      d0:	88 23       	and	r24, r24
      d2:	09 f4       	brne	.+2      	; 0xd6 <CarApp_update+0x18>
      d4:	49 c0       	rjmp	.+146    	; 0x168 <CarApp_update+0xaa>
      d6:	81 30       	cpi	r24, 0x01	; 1
      d8:	31 f0       	breq	.+12     	; 0xe6 <CarApp_update+0x28>
      da:	55 c0       	rjmp	.+170    	; 0x186 <CarApp_update+0xc8>
      dc:	83 30       	cpi	r24, 0x03	; 3
      de:	31 f1       	breq	.+76     	; 0x12c <CarApp_update+0x6e>
      e0:	84 30       	cpi	r24, 0x04	; 4
      e2:	79 f1       	breq	.+94     	; 0x142 <CarApp_update+0x84>
      e4:	50 c0       	rjmp	.+160    	; 0x186 <CarApp_update+0xc8>
	{
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_MOVE_HOLD:
		/* Check if it's already Moving */
		if(enuCurrentButton == CAR_MOVE_HOLD)
      e6:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <enuCurrentButton>
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	29 f4       	brne	.+10     	; 0xf8 <CarApp_update+0x3a>
		{
			Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_LOW);
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 18 03 	call	0x630	; 0x630 <Dio_writePin>
			break;
      f6:	47 c0       	rjmp	.+142    	; 0x186 <CarApp_update+0xc8>
		}
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_MOVE_HOLD;
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <enuCurrentButton>
		enuCurrentAction = CAR_ACTION_MOVE;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		if (enuCurrentGear == CAR_STATE_IDLE)
      fe:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <enuCurrentGear>
     102:	66 23       	and	r22, r22
     104:	09 f4       	brne	.+2      	; 0x108 <CarApp_update+0x4a>
     106:	3f c0       	rjmp	.+126    	; 0x186 <CarApp_update+0xc8>
		{
			break;
		}
		Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)enuCurrentGear);
     108:	0e 94 b8 08 	call	0x1170	; 0x1170 <Service_UpdateMotors>
		break;
     10c:	3c c0       	rjmp	.+120    	; 0x186 <CarApp_update+0xc8>
		
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_LEFT_HOLD:
		Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_HIGH);
     10e:	61 e0       	ldi	r22, 0x01	; 1
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	0e 94 18 03 	call	0x630	; 0x630 <Dio_writePin>
		/* Check if it's already Moving Left */
		if(enuCurrentButton == CAR_LEFT_HOLD)
     116:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <enuCurrentButton>
     11a:	82 30       	cpi	r24, 0x02	; 2
     11c:	a1 f1       	breq	.+104    	; 0x186 <CarApp_update+0xc8>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_LEFT_HOLD;
     11e:	82 e0       	ldi	r24, 0x02	; 2
     120:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <enuCurrentButton>
		enuCurrentAction = CAR_ACTION_LEFT;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)CAR_STATE_30F);
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	0e 94 b8 08 	call	0x1170	; 0x1170 <Service_UpdateMotors>
		break;
     12a:	2d c0       	rjmp	.+90     	; 0x186 <CarApp_update+0xc8>
		
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_RIGHT_HOLD:
		/* Check if it's already Moving Right */
		if(enuCurrentButton == CAR_RIGHT_HOLD)
     12c:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <enuCurrentButton>
     130:	83 30       	cpi	r24, 0x03	; 3
     132:	49 f1       	breq	.+82     	; 0x186 <CarApp_update+0xc8>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_RIGHT_HOLD;
     134:	83 e0       	ldi	r24, 0x03	; 3
     136:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <enuCurrentButton>
		enuCurrentAction = CAR_ACTION_RIGHT;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)CAR_STATE_30F);
     13a:	61 e0       	ldi	r22, 0x01	; 1
     13c:	0e 94 b8 08 	call	0x1170	; 0x1170 <Service_UpdateMotors>
		break;
     140:	22 c0       	rjmp	.+68     	; 0x186 <CarApp_update+0xc8>
		
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_GEAR_PRESSED:
		/* Check if it's already Moving Right */
		if(enuCurrentButton == CAR_GEAR_PRESSED)
     142:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <enuCurrentButton>
     146:	84 30       	cpi	r24, 0x04	; 4
     148:	f1 f0       	breq	.+60     	; 0x186 <CarApp_update+0xc8>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_GEAR_PRESSED;
     14a:	84 e0       	ldi	r24, 0x04	; 4
     14c:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <enuCurrentButton>
		/* Update flag indicate the hold state and ignore it */
		
		/* Update the enuCurrentGear */
		if(enuCurrentGear != CAR_STATE_30B)
     150:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <enuCurrentGear>
     154:	84 30       	cpi	r24, 0x04	; 4
     156:	21 f0       	breq	.+8      	; 0x160 <CarApp_update+0xa2>
			enuCurrentGear++;
     158:	8f 5f       	subi	r24, 0xFF	; 255
     15a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <enuCurrentGear>
     15e:	13 c0       	rjmp	.+38     	; 0x186 <CarApp_update+0xc8>
		else
			enuCurrentGear = CAR_STATE_30F;
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <enuCurrentGear>
     166:	0f c0       	rjmp	.+30     	; 0x186 <CarApp_update+0xc8>
		break;
	
	/*******************************************************************************/
	/*******************************************************************************/
	case CAR_BUTTONS_IDLE:
		Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_LOW);
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	0e 94 18 03 	call	0x630	; 0x630 <Dio_writePin>
		/* Check if it's already Moving Right */
		if(enuCurrentButton == CAR_BUTTONS_IDLE)
     170:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <enuCurrentButton>
     174:	88 23       	and	r24, r24
     176:	39 f0       	breq	.+14     	; 0x186 <CarApp_update+0xc8>
			break;
		/* Fill the enuCurrentButton according to the button pressed */
		enuCurrentButton = CAR_BUTTONS_IDLE;
     178:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <enuCurrentButton>
		enuCurrentAction = CAR_ACTION_STOP;
		/* 
		* Update the Motor according to the enuCurrentAction and enuCurrentGear
		* Sent to service layer
		*/
		Service_UpdateMotors((uint8_t)enuCurrentAction, (uint8_t)enuCurrentGear);
     17c:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <enuCurrentGear>
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	0e 94 b8 08 	call	0x1170	; 0x1170 <Service_UpdateMotors>
	}
	/*******************************************************************************/
	/*******************************************************************************/

	return APP_STATUS_ERROR_OK;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	08 95       	ret

0000018a <CarApp_start>:
* Description: Function to Start the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuApp_Status_t CarApp_start(void)
{
	/* Initialize the Car application */
	CarApp_init();
     18a:	0e 94 50 00 	call	0xa0	; 0xa0 <CarApp_init>
	EnableGlbl_Interrupt();
     18e:	8f b7       	in	r24, 0x3f	; 63
     190:	80 68       	ori	r24, 0x80	; 128
     192:	8f bf       	out	0x3f, r24	; 63
	/* Application Super Loop */
	while (1)
	{
		/* Update the car status */
		CarApp_update();
     194:	0e 94 5f 00 	call	0xbe	; 0xbe <CarApp_update>
     198:	fd cf       	rjmp	.-6      	; 0x194 <CarApp_start+0xa>

0000019a <Button_init>:
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Button module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_init(void)
{
	Dio_init(strDio_pins);
     19a:	81 e6       	ldi	r24, 0x61	; 97
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 23 02 	call	0x446	; 0x446 <Dio_init>
	return BTTN_STATUS_ERROR_OK;
}
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	08 95       	ret

000001a6 <Button_getState>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if ((BUTTONS_USED_NUM+BUTTON_1_M) <= u8_bttnID)
     1a6:	85 30       	cpi	r24, 0x05	; 5
     1a8:	60 f4       	brcc	.+24     	; 0x1c2 <Button_getState+0x1c>
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
		}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
     1aa:	61 15       	cp	r22, r1
     1ac:	71 05       	cpc	r23, r1
     1ae:	59 f0       	breq	.+22     	; 0x1c6 <Button_getState+0x20>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
     1b0:	e8 2f       	mov	r30, r24
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	e3 56       	subi	r30, 0x63	; 99
     1b6:	ff 4f       	sbci	r31, 0xFF	; 255
     1b8:	80 81       	ld	r24, Z
     1ba:	fb 01       	movw	r30, r22
     1bc:	80 83       	st	Z, r24
	return BTTN_STATUS_ERROR_OK;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if ((BUTTONS_USED_NUM+BUTTON_1_M) <= u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	08 95       	ret
		}else{/*Nothing to here*/}
		
	/* Check if the input parameter is NULL */
	if (NULL_PTR == pu8_state)
	{
		return BTTN_STATUS_ERROR_NULL;
     1c6:	83 e0       	ldi	r24, 0x03	; 3
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	*pu8_state = gu8_ButtonsState[u8_bttnID];
	return BTTN_STATUS_ERROR_OK;
}
     1c8:	08 95       	ret

000001ca <Button_updateState>:
* Parameters (out): None
* Return value: enuBttn_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to update the state of the button (Pressed or Released) by reading the Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuBttn_Status_t Button_updateState(uint8_t u8_bttnID)
{
     1ca:	1f 93       	push	r17
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	1f 92       	push	r1
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if ((BUTTONS_USED_NUM+BUTTON_1_M) <= u8_bttnID)
     1d6:	85 30       	cpi	r24, 0x05	; 5
     1d8:	08 f0       	brcs	.+2      	; 0x1dc <Button_updateState+0x12>
     1da:	4a c0       	rjmp	.+148    	; 0x270 <Button_updateState+0xa6>
     1dc:	18 2f       	mov	r17, r24
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_valueTemp=0;
     1de:	19 82       	std	Y+1, r1	; 0x01
	uint32_t u32_loopIndex = 0;
	
	/* Read the Pin and put its state in the global variable */
	Dio_readPin(u8_bttnID,&u8_valueTemp);
     1e0:	be 01       	movw	r22, r28
     1e2:	6f 5f       	subi	r22, 0xFF	; 255
     1e4:	7f 4f       	sbci	r23, 0xFF	; 255
     1e6:	0e 94 09 04 	call	0x812	; 0x812 <Dio_readPin>
	if(u8_valueTemp == PIN_HIGH)
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	81 30       	cpi	r24, 0x01	; 1
     1ee:	f1 f4       	brne	.+60     	; 0x22c <Button_updateState+0x62>
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <Button_updateState+0x32>
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
     1f2:	4f 5f       	subi	r20, 0xFF	; 255
     1f4:	5f 4f       	sbci	r21, 0xFF	; 255
     1f6:	6f 4f       	sbci	r22, 0xFF	; 255
     1f8:	7f 4f       	sbci	r23, 0xFF	; 255
     1fa:	03 c0       	rjmp	.+6      	; 0x202 <Button_updateState+0x38>
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	ba 01       	movw	r22, r20
     202:	48 3b       	cpi	r20, 0xB8	; 184
     204:	8b e0       	ldi	r24, 0x0B	; 11
     206:	58 07       	cpc	r21, r24
     208:	61 05       	cpc	r22, r1
     20a:	71 05       	cpc	r23, r1
     20c:	90 f3       	brcs	.-28     	; 0x1f2 <Button_updateState+0x28>
		/* De bouncing Check */
		Dio_readPin(u8_bttnID,&u8_valueTemp);
     20e:	be 01       	movw	r22, r28
     210:	6f 5f       	subi	r22, 0xFF	; 255
     212:	7f 4f       	sbci	r23, 0xFF	; 255
     214:	81 2f       	mov	r24, r17
     216:	0e 94 09 04 	call	0x812	; 0x812 <Dio_readPin>
		if(u8_valueTemp == PIN_HIGH)
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	81 30       	cpi	r24, 0x01	; 1
     21e:	51 f5       	brne	.+84     	; 0x274 <Button_updateState+0xaa>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
     220:	e1 2f       	mov	r30, r17
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	e3 56       	subi	r30, 0x63	; 99
     226:	ff 4f       	sbci	r31, 0xFF	; 255
     228:	80 83       	st	Z, r24
     22a:	27 c0       	rjmp	.+78     	; 0x27a <Button_updateState+0xb0>
	}else if (u8_valueTemp == PIN_LOW)
     22c:	88 23       	and	r24, r24
     22e:	39 f0       	breq	.+14     	; 0x23e <Button_updateState+0x74>
		/* De bouncing Check */
		Dio_readPin(u8_bttnID,&u8_valueTemp);
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	23 c0       	rjmp	.+70     	; 0x27a <Button_updateState+0xb0>
		if(u8_valueTemp == PIN_HIGH)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_PRESSED;
	}else if (u8_valueTemp == PIN_LOW)
	{
		/* De bouncing Delay */
		for(u32_loopIndex=0; u32_loopIndex<3000; u32_loopIndex++);
     234:	4f 5f       	subi	r20, 0xFF	; 255
     236:	5f 4f       	sbci	r21, 0xFF	; 255
     238:	6f 4f       	sbci	r22, 0xFF	; 255
     23a:	7f 4f       	sbci	r23, 0xFF	; 255
     23c:	03 c0       	rjmp	.+6      	; 0x244 <Button_updateState+0x7a>
     23e:	40 e0       	ldi	r20, 0x00	; 0
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	ba 01       	movw	r22, r20
     244:	48 3b       	cpi	r20, 0xB8	; 184
     246:	8b e0       	ldi	r24, 0x0B	; 11
     248:	58 07       	cpc	r21, r24
     24a:	61 05       	cpc	r22, r1
     24c:	71 05       	cpc	r23, r1
     24e:	90 f3       	brcs	.-28     	; 0x234 <Button_updateState+0x6a>
		/* De bouncing Check */
		Dio_readPin(u8_bttnID,&u8_valueTemp);
     250:	be 01       	movw	r22, r28
     252:	6f 5f       	subi	r22, 0xFF	; 255
     254:	7f 4f       	sbci	r23, 0xFF	; 255
     256:	81 2f       	mov	r24, r17
     258:	0e 94 09 04 	call	0x812	; 0x812 <Dio_readPin>
		if(u8_valueTemp == PIN_LOW)
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	81 11       	cpse	r24, r1
     260:	0b c0       	rjmp	.+22     	; 0x278 <Button_updateState+0xae>
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
     262:	e1 2f       	mov	r30, r17
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	e3 56       	subi	r30, 0x63	; 99
     268:	ff 4f       	sbci	r31, 0xFF	; 255
     26a:	10 82       	st	Z, r1
	}
	return BTTN_STATUS_ERROR_OK;
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	05 c0       	rjmp	.+10     	; 0x27a <Button_updateState+0xb0>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the button index is invalid */
	if ((BUTTONS_USED_NUM+BUTTON_1_M) <= u8_bttnID)
	{
		return BTTN_STATUS_ERROR_ID_INVALID;
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	03 c0       	rjmp	.+6      	; 0x27a <Button_updateState+0xb0>
		/* De bouncing Check */
		Dio_readPin(u8_bttnID,&u8_valueTemp);
		if(u8_valueTemp == PIN_LOW)
			gu8_ButtonsState[u8_bttnID] = BUTTON_STATE_RELEASED;
	}
	return BTTN_STATUS_ERROR_OK;
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	01 c0       	rjmp	.+2      	; 0x27a <Button_updateState+0xb0>
     278:	81 e0       	ldi	r24, 0x01	; 1
}
     27a:	0f 90       	pop	r0
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	1f 91       	pop	r17
     282:	08 95       	ret

00000284 <Motor_init>:
// 	}else{/*Nothing to here*/}
		
/**************************************************************************************/
/*								End of Error Checking								  */
/**************************************************************************************/
	SWPwm_Init();
     284:	0e 94 3b 07 	call	0xe76	; 0xe76 <SWPwm_Init>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	return MOTOR_STATUS_ERROR_OK;
}
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	08 95       	ret

0000028c <Motor_run>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Move the motor in the given direction.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to move the motor forward with given speed in % */
enuMotor_Status_t Motor_run(uint8_t u8_motorID, uint8_t u8_speed, uint8_t u8_direction)
{
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	1f 93       	push	r17
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
	/**************************************************************************************/
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
     296:	82 30       	cpi	r24, 0x02	; 2
     298:	08 f0       	brcs	.+2      	; 0x29c <Motor_run+0x10>
     29a:	56 c0       	rjmp	.+172    	; 0x348 <Motor_run+0xbc>
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
     29c:	65 36       	cpi	r22, 0x65	; 101
     29e:	08 f0       	brcs	.+2      	; 0x2a2 <Motor_run+0x16>
     2a0:	55 c0       	rjmp	.+170    	; 0x34c <Motor_run+0xc0>
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
     2a2:	42 30       	cpi	r20, 0x02	; 2
     2a4:	08 f0       	brcs	.+2      	; 0x2a8 <Motor_run+0x1c>
     2a6:	54 c0       	rjmp	.+168    	; 0x350 <Motor_run+0xc4>
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
     2a8:	c8 2f       	mov	r28, r24
     2aa:	d0 e0       	ldi	r29, 0x00	; 0
     2ac:	fe 01       	movw	r30, r28
     2ae:	ef 55       	subi	r30, 0x5F	; 95
     2b0:	ff 4f       	sbci	r31, 0xFF	; 255
     2b2:	80 81       	ld	r24, Z
     2b4:	81 30       	cpi	r24, 0x01	; 1
     2b6:	09 f4       	brne	.+2      	; 0x2ba <Motor_run+0x2e>
     2b8:	4d c0       	rjmp	.+154    	; 0x354 <Motor_run+0xc8>
     2ba:	16 2f       	mov	r17, r22
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	if(u8_direction == MOTOR_DIR_CLK_WISE)
     2bc:	41 11       	cpse	r20, r1
     2be:	16 c0       	rjmp	.+44     	; 0x2ec <Motor_run+0x60>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_HIGH);
     2c0:	ce 01       	movw	r24, r28
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	8c 0f       	add	r24, r28
     2cc:	9d 1f       	adc	r25, r29
     2ce:	9c 01       	movw	r18, r24
     2d0:	26 57       	subi	r18, 0x76	; 118
     2d2:	3f 4f       	sbci	r19, 0xFF	; 255
     2d4:	79 01       	movw	r14, r18
     2d6:	61 e0       	ldi	r22, 0x01	; 1
     2d8:	f9 01       	movw	r30, r18
     2da:	81 81       	ldd	r24, Z+1	; 0x01
     2dc:	0e 94 18 03 	call	0x630	; 0x630 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
     2e0:	60 e0       	ldi	r22, 0x00	; 0
     2e2:	f7 01       	movw	r30, r14
     2e4:	82 81       	ldd	r24, Z+2	; 0x02
     2e6:	0e 94 18 03 	call	0x630	; 0x630 <Dio_writePin>
     2ea:	16 c0       	rjmp	.+44     	; 0x318 <Motor_run+0x8c>
	}else if(u8_direction == MOTOR_DIR_ANTI_CLK_WISE)
     2ec:	41 30       	cpi	r20, 0x01	; 1
     2ee:	a1 f4       	brne	.+40     	; 0x318 <Motor_run+0x8c>
	{
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
     2f0:	25 e0       	ldi	r18, 0x05	; 5
     2f2:	2c 9f       	mul	r18, r28
     2f4:	c0 01       	movw	r24, r0
     2f6:	2d 9f       	mul	r18, r29
     2f8:	90 0d       	add	r25, r0
     2fa:	11 24       	eor	r1, r1
     2fc:	9c 01       	movw	r18, r24
     2fe:	26 57       	subi	r18, 0x76	; 118
     300:	3f 4f       	sbci	r19, 0xFF	; 255
     302:	79 01       	movw	r14, r18
     304:	60 e0       	ldi	r22, 0x00	; 0
     306:	f9 01       	movw	r30, r18
     308:	81 81       	ldd	r24, Z+1	; 0x01
     30a:	0e 94 18 03 	call	0x630	; 0x630 <Dio_writePin>
		Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_HIGH);
     30e:	61 e0       	ldi	r22, 0x01	; 1
     310:	f7 01       	movw	r30, r14
     312:	82 81       	ldd	r24, Z+2	; 0x02
     314:	0e 94 18 03 	call	0x630	; 0x630 <Dio_writePin>
	}
	
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
     318:	fe 01       	movw	r30, r28
     31a:	ef 55       	subi	r30, 0x5F	; 95
     31c:	ff 4f       	sbci	r31, 0xFF	; 255
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	80 83       	st	Z, r24
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
     322:	ce 01       	movw	r24, r28
     324:	88 0f       	add	r24, r24
     326:	99 1f       	adc	r25, r25
     328:	88 0f       	add	r24, r24
     32a:	99 1f       	adc	r25, r25
     32c:	c8 0f       	add	r28, r24
     32e:	d9 1f       	adc	r29, r25
     330:	c6 57       	subi	r28, 0x76	; 118
     332:	df 4f       	sbci	r29, 0xFF	; 255
     334:	4b 81       	ldd	r20, Y+3	; 0x03
     336:	5c 81       	ldd	r21, Y+4	; 0x04
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	21 2f       	mov	r18, r17
     33e:	88 81       	ld	r24, Y
     340:	0e 94 43 07 	call	0xe86	; 0xe86 <SWPwm_Start>
	
	return MOTOR_STATUS_ERROR_OK;
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	07 c0       	rjmp	.+14     	; 0x356 <Motor_run+0xca>
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	05 c0       	rjmp	.+10     	; 0x356 <Motor_run+0xca>
	}else{/*Nothing to here*/}
		
	/* Check if the speed is out of range */
	if (100 < u8_speed)
	{
		return MOTOR_STATUS_ERROR_SPD_INVALID;
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	03 c0       	rjmp	.+6      	; 0x356 <Motor_run+0xca>
	}else{/*Nothing to here*/}
		
	/* Check if the motor index is invalid */
	if (MOTOR_DIR_ANTI_CLK_WISE < u8_direction)
	{
		return MOTOR_STATUS_ERROR_DIR_INVALID;
     350:	84 e0       	ldi	r24, 0x04	; 4
     352:	01 c0       	rjmp	.+2      	; 0x356 <Motor_run+0xca>
	}else{/*Nothing to here*/}
	
	/* Check if the motor is already running */
	if(gau8_MotorsState[u8_motorID] == MOTOR_RUNNING)		
	{
		return MOTOR_STATUS_ERROR_RUNNING;
     354:	85 e0       	ldi	r24, 0x05	; 5
	
	gau8_MotorsState[u8_motorID] = MOTOR_RUNNING;
	SWPwm_Start(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel, str_MotorsConfig[u8_motorID].u16_Frequency, u8_speed);
	
	return MOTOR_STATUS_ERROR_OK;
}
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	1f 91       	pop	r17
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	08 95       	ret

00000362 <Motor_stop>:
* Return value: enuMotor_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the motor.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/* Function to stop motor */
enuMotor_Status_t Motor_stop(uint8_t u8_motorID)
{
     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
	/**************************************************************************************/
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	08 f0       	brcs	.+2      	; 0x372 <Motor_stop+0x10>
     370:	60 c0       	rjmp	.+192    	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     372:	c8 2f       	mov	r28, r24
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
     374:	08 2f       	mov	r16, r24
     376:	10 e0       	ldi	r17, 0x00	; 0
     378:	78 01       	movw	r14, r16
     37a:	ee 0c       	add	r14, r14
     37c:	ff 1c       	adc	r15, r15
     37e:	ee 0c       	add	r14, r14
     380:	ff 1c       	adc	r15, r15
     382:	c7 01       	movw	r24, r14
     384:	80 0f       	add	r24, r16
     386:	91 1f       	adc	r25, r17
     388:	9c 01       	movw	r18, r24
     38a:	26 57       	subi	r18, 0x76	; 118
     38c:	3f 4f       	sbci	r19, 0xFF	; 255
     38e:	79 01       	movw	r14, r18
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	f9 01       	movw	r30, r18
     394:	81 81       	ldd	r24, Z+1	; 0x01
     396:	0e 94 18 03 	call	0x630	; 0x630 <Dio_writePin>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
     39a:	60 e0       	ldi	r22, 0x00	; 0
     39c:	f7 01       	movw	r30, r14
     39e:	82 81       	ldd	r24, Z+2	; 0x02
     3a0:	0e 94 18 03 	call	0x630	; 0x630 <Dio_writePin>
	
	uint8_t u8_loopIndex = 0;
	
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
     3a4:	e0 e0       	ldi	r30, 0x00	; 0
     3a6:	1c c0       	rjmp	.+56     	; 0x3e0 <Motor_stop+0x7e>
	{
		if(u8_loopIndex == u8_motorID)
     3a8:	ec 17       	cp	r30, r28
     3aa:	c9 f0       	breq	.+50     	; 0x3de <Motor_stop+0x7c>
		{
			continue;
		}
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
     3ac:	d8 01       	movw	r26, r16
     3ae:	aa 0f       	add	r26, r26
     3b0:	bb 1f       	adc	r27, r27
     3b2:	aa 0f       	add	r26, r26
     3b4:	bb 1f       	adc	r27, r27
     3b6:	a0 0f       	add	r26, r16
     3b8:	b1 1f       	adc	r27, r17
     3ba:	a6 57       	subi	r26, 0x76	; 118
     3bc:	bf 4f       	sbci	r27, 0xFF	; 255
     3be:	2c 91       	ld	r18, X
     3c0:	8e 2f       	mov	r24, r30
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	dc 01       	movw	r26, r24
     3c6:	aa 0f       	add	r26, r26
     3c8:	bb 1f       	adc	r27, r27
     3ca:	aa 0f       	add	r26, r26
     3cc:	bb 1f       	adc	r27, r27
     3ce:	8a 0f       	add	r24, r26
     3d0:	9b 1f       	adc	r25, r27
     3d2:	dc 01       	movw	r26, r24
     3d4:	a6 57       	subi	r26, 0x76	; 118
     3d6:	bf 4f       	sbci	r27, 0xFF	; 255
     3d8:	8c 91       	ld	r24, X
     3da:	28 17       	cp	r18, r24
     3dc:	19 f0       	breq	.+6      	; 0x3e4 <Motor_stop+0x82>
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin1, PIN_LOW);
	Dio_writePin(str_MotorsConfig[u8_motorID].u8_MotorDirPin2, PIN_LOW);
	
	uint8_t u8_loopIndex = 0;
	
	for(u8_loopIndex = 0; u8_loopIndex<MOTORS_USED_NUM; u8_loopIndex++)
     3de:	ef 5f       	subi	r30, 0xFF	; 255
     3e0:	e2 30       	cpi	r30, 0x02	; 2
     3e2:	10 f3       	brcs	.-60     	; 0x3a8 <Motor_stop+0x46>
		if(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel == str_MotorsConfig[u8_loopIndex].u8_MotorPwmChannel)
		{
			break;
		}
	}
	if(u8_loopIndex == MOTORS_USED_NUM)
     3e4:	e2 30       	cpi	r30, 0x02	; 2
     3e6:	69 f4       	brne	.+26     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
	{
		SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
     3e8:	f8 01       	movw	r30, r16
     3ea:	ee 0f       	add	r30, r30
     3ec:	ff 1f       	adc	r31, r31
     3ee:	ee 0f       	add	r30, r30
     3f0:	ff 1f       	adc	r31, r31
     3f2:	e0 0f       	add	r30, r16
     3f4:	f1 1f       	adc	r31, r17
     3f6:	e6 57       	subi	r30, 0x76	; 118
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	80 81       	ld	r24, Z
     3fc:	0e 94 3d 08 	call	0x107a	; 0x107a <SWPwm_Stop>
     400:	12 c0       	rjmp	.+36     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	}else
	{
		if (gau8_MotorsState[u8_loopIndex] == MOTOR_STOPPED)
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	ef 55       	subi	r30, 0x5F	; 95
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	80 81       	ld	r24, Z
     40a:	81 11       	cpse	r24, r1
     40c:	0c c0       	rjmp	.+24     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		{
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
     40e:	f8 01       	movw	r30, r16
     410:	ee 0f       	add	r30, r30
     412:	ff 1f       	adc	r31, r31
     414:	ee 0f       	add	r30, r30
     416:	ff 1f       	adc	r31, r31
     418:	e0 0f       	add	r30, r16
     41a:	f1 1f       	adc	r31, r17
     41c:	e6 57       	subi	r30, 0x76	; 118
     41e:	ff 4f       	sbci	r31, 0xFF	; 255
     420:	80 81       	ld	r24, Z
     422:	0e 94 3d 08 	call	0x107a	; 0x107a <SWPwm_Stop>
		} 
	}
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
     426:	f8 01       	movw	r30, r16
     428:	ef 55       	subi	r30, 0x5F	; 95
     42a:	ff 4f       	sbci	r31, 0xFF	; 255
     42c:	10 82       	st	Z, r1
	return MOTOR_STATUS_ERROR_OK;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	01 c0       	rjmp	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the motor index is invalid */
	if (MOTORS_USED_NUM <= u8_motorID)
	{
		return MOTOR_STATUS_ERROR_ID_INVALID;
     432:	82 e0       	ldi	r24, 0x02	; 2
			SWPwm_Stop(str_MotorsConfig[u8_motorID].u8_MotorPwmChannel);
		} 
	}
	gau8_MotorsState[u8_motorID] = MOTOR_STOPPED;
	return MOTOR_STATUS_ERROR_OK;
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	ef 90       	pop	r14
     43e:	08 95       	ret

00000440 <main>:

#include "App Layer/App.h"

int main(void)
{
	CarApp_start();
     440:	0e 94 c5 00 	call	0x18a	; 0x18a <CarApp_start>
     444:	ff cf       	rjmp	.-2      	; 0x444 <main+0x4>

00000446 <Dio_init>:
* Parameters (out): None
* Return value: enuDio_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the Dio module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_init(strDio_Config_t* pstrDio_pins)
{
     446:	ac 01       	movw	r20, r24
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
     448:	89 2b       	or	r24, r25
     44a:	09 f4       	brne	.+2      	; 0x44e <Dio_init+0x8>
     44c:	e9 c0       	rjmp	.+466    	; 0x620 <Dio_init+0x1da>
	{
		return DIO_STATUS_NULL_ARGUMENT;
	}
	/*-* check if the Dio is already initialized *-*/
	if (DIO_INITIALIZED == u8_Dio_Status)
     44e:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <u8_Dio_Status>
     452:	81 30       	cpi	r24, 0x01	; 1
     454:	09 f4       	brne	.+2      	; 0x458 <Dio_init+0x12>
     456:	e6 c0       	rjmp	.+460    	; 0x624 <Dio_init+0x1de>
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	d7 c0       	rjmp	.+430    	; 0x60a <Dio_init+0x1c4>
	{
		return DIO_STATUS_ALREADY_INIT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
     45c:	e9 2f       	mov	r30, r25
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	ee 0f       	add	r30, r30
     462:	ff 1f       	adc	r31, r31
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	e4 0f       	add	r30, r20
     46a:	f5 1f       	adc	r31, r21
     46c:	31 81       	ldd	r19, Z+1	; 0x01
     46e:	38 30       	cpi	r19, 0x08	; 8
     470:	08 f0       	brcs	.+2      	; 0x474 <Dio_init+0x2e>
     472:	da c0       	rjmp	.+436    	; 0x628 <Dio_init+0x1e2>
		{
			return DIO_STATUS_PIN_NUM_INVALID;
		}
		switch (pstrDio_pins[u8_loopIndex].u8_PortNum)
     474:	20 81       	ld	r18, Z
     476:	21 30       	cpi	r18, 0x01	; 1
     478:	c1 f1       	breq	.+112    	; 0x4ea <Dio_init+0xa4>
     47a:	38 f0       	brcs	.+14     	; 0x48a <Dio_init+0x44>
     47c:	22 30       	cpi	r18, 0x02	; 2
     47e:	09 f4       	brne	.+2      	; 0x482 <Dio_init+0x3c>
     480:	64 c0       	rjmp	.+200    	; 0x54a <Dio_init+0x104>
     482:	23 30       	cpi	r18, 0x03	; 3
     484:	09 f4       	brne	.+2      	; 0x488 <Dio_init+0x42>
     486:	91 c0       	rjmp	.+290    	; 0x5aa <Dio_init+0x164>
     488:	d1 c0       	rjmp	.+418    	; 0x62c <Dio_init+0x1e6>
		{
			case PORT_A:
				DIO_PORTA_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     48a:	2a b3       	in	r18, 0x1a	; 26
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	db 01       	movw	r26, r22
     492:	02 c0       	rjmp	.+4      	; 0x498 <Dio_init+0x52>
     494:	aa 0f       	add	r26, r26
     496:	bb 1f       	adc	r27, r27
     498:	3a 95       	dec	r19
     49a:	e2 f7       	brpl	.-8      	; 0x494 <Dio_init+0x4e>
     49c:	8a 2f       	mov	r24, r26
     49e:	80 95       	com	r24
     4a0:	82 23       	and	r24, r18
     4a2:	8a bb       	out	0x1a, r24	; 26
				DIO_PORTA_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     4a4:	aa b3       	in	r26, 0x1a	; 26
     4a6:	82 81       	ldd	r24, Z+2	; 0x02
     4a8:	28 2f       	mov	r18, r24
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	01 80       	ldd	r0, Z+1	; 0x01
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <Dio_init+0x6e>
     4b0:	22 0f       	add	r18, r18
     4b2:	33 1f       	adc	r19, r19
     4b4:	0a 94       	dec	r0
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <Dio_init+0x6a>
     4b8:	2a 2b       	or	r18, r26
     4ba:	2a bb       	out	0x1a, r18	; 26
				DIO_PORTA_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     4bc:	8b b3       	in	r24, 0x1b	; 27
     4be:	01 80       	ldd	r0, Z+1	; 0x01
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <Dio_init+0x80>
     4c2:	66 0f       	add	r22, r22
     4c4:	77 1f       	adc	r23, r23
     4c6:	0a 94       	dec	r0
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <Dio_init+0x7c>
     4ca:	60 95       	com	r22
     4cc:	68 23       	and	r22, r24
     4ce:	6b bb       	out	0x1b, r22	; 27
				DIO_PORTA_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     4d0:	6b b3       	in	r22, 0x1b	; 27
     4d2:	83 81       	ldd	r24, Z+3	; 0x03
     4d4:	28 2f       	mov	r18, r24
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	01 80       	ldd	r0, Z+1	; 0x01
     4da:	02 c0       	rjmp	.+4      	; 0x4e0 <Dio_init+0x9a>
     4dc:	22 0f       	add	r18, r18
     4de:	33 1f       	adc	r19, r19
     4e0:	0a 94       	dec	r0
     4e2:	e2 f7       	brpl	.-8      	; 0x4dc <Dio_init+0x96>
     4e4:	26 2b       	or	r18, r22
     4e6:	2b bb       	out	0x1b, r18	; 27
				break;
     4e8:	8f c0       	rjmp	.+286    	; 0x608 <Dio_init+0x1c2>
			case PORT_B:
				DIO_PORTB_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     4ea:	27 b3       	in	r18, 0x17	; 23
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	db 01       	movw	r26, r22
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <Dio_init+0xb2>
     4f4:	aa 0f       	add	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	3a 95       	dec	r19
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <Dio_init+0xae>
     4fc:	8a 2f       	mov	r24, r26
     4fe:	80 95       	com	r24
     500:	82 23       	and	r24, r18
     502:	87 bb       	out	0x17, r24	; 23
				DIO_PORTB_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     504:	a7 b3       	in	r26, 0x17	; 23
     506:	82 81       	ldd	r24, Z+2	; 0x02
     508:	28 2f       	mov	r18, r24
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	01 80       	ldd	r0, Z+1	; 0x01
     50e:	02 c0       	rjmp	.+4      	; 0x514 <Dio_init+0xce>
     510:	22 0f       	add	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	0a 94       	dec	r0
     516:	e2 f7       	brpl	.-8      	; 0x510 <Dio_init+0xca>
     518:	2a 2b       	or	r18, r26
     51a:	27 bb       	out	0x17, r18	; 23
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     51c:	88 b3       	in	r24, 0x18	; 24
     51e:	01 80       	ldd	r0, Z+1	; 0x01
     520:	02 c0       	rjmp	.+4      	; 0x526 <Dio_init+0xe0>
     522:	66 0f       	add	r22, r22
     524:	77 1f       	adc	r23, r23
     526:	0a 94       	dec	r0
     528:	e2 f7       	brpl	.-8      	; 0x522 <Dio_init+0xdc>
     52a:	60 95       	com	r22
     52c:	68 23       	and	r22, r24
     52e:	68 bb       	out	0x18, r22	; 24
				DIO_PORTB_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     530:	68 b3       	in	r22, 0x18	; 24
     532:	83 81       	ldd	r24, Z+3	; 0x03
     534:	28 2f       	mov	r18, r24
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	01 80       	ldd	r0, Z+1	; 0x01
     53a:	02 c0       	rjmp	.+4      	; 0x540 <Dio_init+0xfa>
     53c:	22 0f       	add	r18, r18
     53e:	33 1f       	adc	r19, r19
     540:	0a 94       	dec	r0
     542:	e2 f7       	brpl	.-8      	; 0x53c <Dio_init+0xf6>
     544:	26 2b       	or	r18, r22
     546:	28 bb       	out	0x18, r18	; 24
				break;
     548:	5f c0       	rjmp	.+190    	; 0x608 <Dio_init+0x1c2>
			case PORT_C:
				DIO_PORTC_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     54a:	24 b3       	in	r18, 0x14	; 20
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	db 01       	movw	r26, r22
     552:	02 c0       	rjmp	.+4      	; 0x558 <Dio_init+0x112>
     554:	aa 0f       	add	r26, r26
     556:	bb 1f       	adc	r27, r27
     558:	3a 95       	dec	r19
     55a:	e2 f7       	brpl	.-8      	; 0x554 <Dio_init+0x10e>
     55c:	8a 2f       	mov	r24, r26
     55e:	80 95       	com	r24
     560:	82 23       	and	r24, r18
     562:	84 bb       	out	0x14, r24	; 20
				DIO_PORTC_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     564:	a4 b3       	in	r26, 0x14	; 20
     566:	82 81       	ldd	r24, Z+2	; 0x02
     568:	28 2f       	mov	r18, r24
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	01 80       	ldd	r0, Z+1	; 0x01
     56e:	02 c0       	rjmp	.+4      	; 0x574 <Dio_init+0x12e>
     570:	22 0f       	add	r18, r18
     572:	33 1f       	adc	r19, r19
     574:	0a 94       	dec	r0
     576:	e2 f7       	brpl	.-8      	; 0x570 <Dio_init+0x12a>
     578:	2a 2b       	or	r18, r26
     57a:	24 bb       	out	0x14, r18	; 20
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     57c:	85 b3       	in	r24, 0x15	; 21
     57e:	01 80       	ldd	r0, Z+1	; 0x01
     580:	02 c0       	rjmp	.+4      	; 0x586 <Dio_init+0x140>
     582:	66 0f       	add	r22, r22
     584:	77 1f       	adc	r23, r23
     586:	0a 94       	dec	r0
     588:	e2 f7       	brpl	.-8      	; 0x582 <Dio_init+0x13c>
     58a:	60 95       	com	r22
     58c:	68 23       	and	r22, r24
     58e:	65 bb       	out	0x15, r22	; 21
				DIO_PORTC_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     590:	65 b3       	in	r22, 0x15	; 21
     592:	83 81       	ldd	r24, Z+3	; 0x03
     594:	28 2f       	mov	r18, r24
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	01 80       	ldd	r0, Z+1	; 0x01
     59a:	02 c0       	rjmp	.+4      	; 0x5a0 <Dio_init+0x15a>
     59c:	22 0f       	add	r18, r18
     59e:	33 1f       	adc	r19, r19
     5a0:	0a 94       	dec	r0
     5a2:	e2 f7       	brpl	.-8      	; 0x59c <Dio_init+0x156>
     5a4:	26 2b       	or	r18, r22
     5a6:	25 bb       	out	0x15, r18	; 21
				break;
     5a8:	2f c0       	rjmp	.+94     	; 0x608 <Dio_init+0x1c2>
			case PORT_D:
				DIO_PORTD_DIR &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     5aa:	21 b3       	in	r18, 0x11	; 17
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	db 01       	movw	r26, r22
     5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <Dio_init+0x172>
     5b4:	aa 0f       	add	r26, r26
     5b6:	bb 1f       	adc	r27, r27
     5b8:	3a 95       	dec	r19
     5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <Dio_init+0x16e>
     5bc:	8a 2f       	mov	r24, r26
     5be:	80 95       	com	r24
     5c0:	82 23       	and	r24, r18
     5c2:	81 bb       	out	0x11, r24	; 17
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     5c4:	a1 b3       	in	r26, 0x11	; 17
     5c6:	82 81       	ldd	r24, Z+2	; 0x02
     5c8:	28 2f       	mov	r18, r24
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	01 80       	ldd	r0, Z+1	; 0x01
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <Dio_init+0x18e>
     5d0:	22 0f       	add	r18, r18
     5d2:	33 1f       	adc	r19, r19
     5d4:	0a 94       	dec	r0
     5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <Dio_init+0x18a>
     5d8:	2a 2b       	or	r18, r26
     5da:	21 bb       	out	0x11, r18	; 17
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
     5dc:	82 b3       	in	r24, 0x12	; 18
     5de:	01 80       	ldd	r0, Z+1	; 0x01
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <Dio_init+0x1a0>
     5e2:	66 0f       	add	r22, r22
     5e4:	77 1f       	adc	r23, r23
     5e6:	0a 94       	dec	r0
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <Dio_init+0x19c>
     5ea:	60 95       	com	r22
     5ec:	68 23       	and	r22, r24
     5ee:	62 bb       	out	0x12, r22	; 18
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
     5f0:	62 b3       	in	r22, 0x12	; 18
     5f2:	83 81       	ldd	r24, Z+3	; 0x03
     5f4:	28 2f       	mov	r18, r24
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	01 80       	ldd	r0, Z+1	; 0x01
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <Dio_init+0x1ba>
     5fc:	22 0f       	add	r18, r18
     5fe:	33 1f       	adc	r19, r19
     600:	0a 94       	dec	r0
     602:	e2 f7       	brpl	.-8      	; 0x5fc <Dio_init+0x1b6>
     604:	26 2b       	or	r18, r22
     606:	22 bb       	out	0x12, r18	; 18
	/*-* check if the Dio is already initialized *-*/
	if (DIO_INITIALIZED == u8_Dio_Status)
	{
		return DIO_STATUS_ALREADY_INIT;
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
     608:	9f 5f       	subi	r25, 0xFF	; 255
     60a:	9a 30       	cpi	r25, 0x0A	; 10
     60c:	08 f4       	brcc	.+2      	; 0x610 <Dio_init+0x1ca>
     60e:	26 cf       	rjmp	.-436    	; 0x45c <Dio_init+0x16>
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
     610:	50 93 a5 00 	sts	0x00A5, r21	; 0x8000a5 <pstrDio_pinsConfig+0x1>
     614:	40 93 a4 00 	sts	0x00A4, r20	; 0x8000a4 <pstrDio_pinsConfig>
	u8_Dio_Status = DIO_INITIALIZED;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <u8_Dio_Status>
	return DIO_STATUS_ERROR_OK;
     61e:	08 95       	ret
{
	uint8_t u8_loopIndex=0;
	/*-* check if the input configuration pointer is not a NULL_PTR *-*/
	if (NULL_PTR == pstrDio_pins)
	{
		return DIO_STATUS_NULL_ARGUMENT;
     620:	85 e0       	ldi	r24, 0x05	; 5
     622:	08 95       	ret
	}
	/*-* check if the Dio is already initialized *-*/
	if (DIO_INITIALIZED == u8_Dio_Status)
	{
		return DIO_STATUS_ALREADY_INIT;
     624:	87 e0       	ldi	r24, 0x07	; 7
     626:	08 95       	ret
	}
	for (u8_loopIndex=0; u8_loopIndex<DIO_USED_PINS_NUM; u8_loopIndex++)
	{
		if ((pstrDio_pins[u8_loopIndex].u8_PinNum) > PIN_7)
		{
			return DIO_STATUS_PIN_NUM_INVALID;
     628:	83 e0       	ldi	r24, 0x03	; 3
     62a:	08 95       	ret
				DIO_PORTD_DIR |= (pstrDio_pins[u8_loopIndex].u8_Direction)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pins[u8_loopIndex].u8_PinNum));
				DIO_PORTD_DATA |= (pstrDio_pins[u8_loopIndex].u8_InitState)<<(pstrDio_pins[u8_loopIndex].u8_PinNum);
				break;
			default:
				return DIO_STATUS_PORT_NUM_INVALID;
     62c:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
	pstrDio_pinsConfig = pstrDio_pins;
	u8_Dio_Status = DIO_INITIALIZED;
	return DIO_STATUS_ERROR_OK;
}
     62e:	08 95       	ret

00000630 <Dio_writePin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     630:	8b 30       	cpi	r24, 0x0B	; 11
     632:	08 f0       	brcs	.+2      	; 0x636 <Dio_writePin+0x6>
     634:	90 c0       	rjmp	.+288    	; 0x756 <Dio_writePin+0x126>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     636:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u8_Dio_Status>
     63a:	99 23       	and	r25, r25
     63c:	09 f4       	brne	.+2      	; 0x640 <Dio_writePin+0x10>
     63e:	8d c0       	rjmp	.+282    	; 0x75a <Dio_writePin+0x12a>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     640:	e8 2f       	mov	r30, r24
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	cf 01       	movw	r24, r30
     646:	88 0f       	add	r24, r24
     648:	99 1f       	adc	r25, r25
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <pstrDio_pinsConfig>
     652:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <pstrDio_pinsConfig+0x1>
     656:	e8 0f       	add	r30, r24
     658:	f9 1f       	adc	r31, r25
     65a:	80 81       	ld	r24, Z
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	21 f1       	breq	.+72     	; 0x6a8 <Dio_writePin+0x78>
     660:	30 f0       	brcs	.+12     	; 0x66e <Dio_writePin+0x3e>
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	f1 f1       	breq	.+124    	; 0x6e2 <Dio_writePin+0xb2>
     666:	83 30       	cpi	r24, 0x03	; 3
     668:	09 f4       	brne	.+2      	; 0x66c <Dio_writePin+0x3c>
     66a:	58 c0       	rjmp	.+176    	; 0x71c <Dio_writePin+0xec>
     66c:	78 c0       	rjmp	.+240    	; 0x75e <Dio_writePin+0x12e>
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
     66e:	61 30       	cpi	r22, 0x01	; 1
     670:	69 f4       	brne	.+26     	; 0x68c <Dio_writePin+0x5c>
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     672:	2b b3       	in	r18, 0x1b	; 27
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	01 80       	ldd	r0, Z+1	; 0x01
     67a:	02 c0       	rjmp	.+4      	; 0x680 <Dio_writePin+0x50>
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	0a 94       	dec	r0
     682:	e2 f7       	brpl	.-8      	; 0x67c <Dio_writePin+0x4c>
     684:	82 2b       	or	r24, r18
     686:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	08 95       	ret
	{
		case PORT_A:
		if(u8_pinValue == PIN_HIGH)
			DIO_PORTA_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     68c:	2b b3       	in	r18, 0x1b	; 27
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	01 80       	ldd	r0, Z+1	; 0x01
     694:	02 c0       	rjmp	.+4      	; 0x69a <Dio_writePin+0x6a>
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	0a 94       	dec	r0
     69c:	e2 f7       	brpl	.-8      	; 0x696 <Dio_writePin+0x66>
     69e:	80 95       	com	r24
     6a0:	82 23       	and	r24, r18
     6a2:	8b bb       	out	0x1b, r24	; 27
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	08 95       	ret
		else	
			DIO_PORTA_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
     6a8:	61 30       	cpi	r22, 0x01	; 1
     6aa:	69 f4       	brne	.+26     	; 0x6c6 <Dio_writePin+0x96>
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     6ac:	28 b3       	in	r18, 0x18	; 24
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	01 80       	ldd	r0, Z+1	; 0x01
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <Dio_writePin+0x8a>
     6b6:	88 0f       	add	r24, r24
     6b8:	99 1f       	adc	r25, r25
     6ba:	0a 94       	dec	r0
     6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <Dio_writePin+0x86>
     6be:	82 2b       	or	r24, r18
     6c0:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	08 95       	ret
		break;
		case PORT_B:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     6c6:	28 b3       	in	r18, 0x18	; 24
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	01 80       	ldd	r0, Z+1	; 0x01
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <Dio_writePin+0xa4>
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	0a 94       	dec	r0
     6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <Dio_writePin+0xa0>
     6d8:	80 95       	com	r24
     6da:	82 23       	and	r24, r18
     6dc:	88 bb       	out	0x18, r24	; 24
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	08 95       	ret
				DIO_PORTB_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTB_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
     6e2:	61 30       	cpi	r22, 0x01	; 1
     6e4:	69 f4       	brne	.+26     	; 0x700 <Dio_writePin+0xd0>
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     6e6:	25 b3       	in	r18, 0x15	; 21
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	01 80       	ldd	r0, Z+1	; 0x01
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <Dio_writePin+0xc4>
     6f0:	88 0f       	add	r24, r24
     6f2:	99 1f       	adc	r25, r25
     6f4:	0a 94       	dec	r0
     6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <Dio_writePin+0xc0>
     6f8:	82 2b       	or	r24, r18
     6fa:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	08 95       	ret
			break;
		case PORT_C:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     700:	25 b3       	in	r18, 0x15	; 21
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	01 80       	ldd	r0, Z+1	; 0x01
     708:	02 c0       	rjmp	.+4      	; 0x70e <Dio_writePin+0xde>
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	0a 94       	dec	r0
     710:	e2 f7       	brpl	.-8      	; 0x70a <Dio_writePin+0xda>
     712:	80 95       	com	r24
     714:	82 23       	and	r24, r18
     716:	85 bb       	out	0x15, r24	; 21
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	08 95       	ret
				DIO_PORTC_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTC_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
     71c:	61 30       	cpi	r22, 0x01	; 1
     71e:	69 f4       	brne	.+26     	; 0x73a <Dio_writePin+0x10a>
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     720:	22 b3       	in	r18, 0x12	; 18
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	01 80       	ldd	r0, Z+1	; 0x01
     728:	02 c0       	rjmp	.+4      	; 0x72e <Dio_writePin+0xfe>
     72a:	88 0f       	add	r24, r24
     72c:	99 1f       	adc	r25, r25
     72e:	0a 94       	dec	r0
     730:	e2 f7       	brpl	.-8      	; 0x72a <Dio_writePin+0xfa>
     732:	82 2b       	or	r24, r18
     734:	82 bb       	out	0x12, r24	; 18
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	08 95       	ret
			break;
		case PORT_D:
			if(u8_pinValue == PIN_HIGH)
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     73a:	22 b3       	in	r18, 0x12	; 18
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	01 80       	ldd	r0, Z+1	; 0x01
     742:	02 c0       	rjmp	.+4      	; 0x748 <Dio_writePin+0x118>
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	0a 94       	dec	r0
     74a:	e2 f7       	brpl	.-8      	; 0x744 <Dio_writePin+0x114>
     74c:	80 95       	com	r24
     74e:	82 23       	and	r24, r18
     750:	82 bb       	out	0x12, r24	; 18
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	08 95       	ret
enuDio_Status_t Dio_writePin(uint8_t u8_pinID, uint8_t u8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     75a:	86 e0       	ldi	r24, 0x06	; 6
     75c:	08 95       	ret
				DIO_PORTD_DATA |= 1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum);
			else
				DIO_PORTD_DATA &= ~(1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
			break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     75e:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
}
     760:	08 95       	ret

00000762 <Dio_togglePin>:
* Description: Function to Toggle data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     762:	8b 30       	cpi	r24, 0x0B	; 11
     764:	08 f0       	brcs	.+2      	; 0x768 <Dio_togglePin+0x6>
     766:	4f c0       	rjmp	.+158    	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     768:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u8_Dio_Status>
     76c:	99 23       	and	r25, r25
     76e:	09 f4       	brne	.+2      	; 0x772 <Dio_togglePin+0x10>
     770:	4c c0       	rjmp	.+152    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     772:	e8 2f       	mov	r30, r24
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	cf 01       	movw	r24, r30
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <pstrDio_pinsConfig>
     784:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <pstrDio_pinsConfig+0x1>
     788:	e8 0f       	add	r30, r24
     78a:	f9 1f       	adc	r31, r25
     78c:	80 81       	ld	r24, Z
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	99 f0       	breq	.+38     	; 0x7b8 <Dio_togglePin+0x56>
     792:	28 f0       	brcs	.+10     	; 0x79e <Dio_togglePin+0x3c>
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	e9 f0       	breq	.+58     	; 0x7d2 <Dio_togglePin+0x70>
     798:	83 30       	cpi	r24, 0x03	; 3
     79a:	41 f1       	breq	.+80     	; 0x7ec <Dio_togglePin+0x8a>
     79c:	38 c0       	rjmp	.+112    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     79e:	2b b3       	in	r18, 0x1b	; 27
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	01 80       	ldd	r0, Z+1	; 0x01
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <Dio_togglePin+0x4a>
     7a8:	88 0f       	add	r24, r24
     7aa:	99 1f       	adc	r25, r25
     7ac:	0a 94       	dec	r0
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <Dio_togglePin+0x46>
     7b0:	82 27       	eor	r24, r18
     7b2:	8b bb       	out	0x1b, r24	; 27
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     7b6:	08 95       	ret
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     7b8:	28 b3       	in	r18, 0x18	; 24
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	01 80       	ldd	r0, Z+1	; 0x01
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <Dio_togglePin+0x64>
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	0a 94       	dec	r0
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <Dio_togglePin+0x60>
     7ca:	82 27       	eor	r24, r18
     7cc:	88 bb       	out	0x18, r24	; 24
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		DIO_PORTA_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     7d0:	08 95       	ret
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     7d2:	25 b3       	in	r18, 0x15	; 21
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	01 80       	ldd	r0, Z+1	; 0x01
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <Dio_togglePin+0x7e>
     7dc:	88 0f       	add	r24, r24
     7de:	99 1f       	adc	r25, r25
     7e0:	0a 94       	dec	r0
     7e2:	e2 f7       	brpl	.-8      	; 0x7dc <Dio_togglePin+0x7a>
     7e4:	82 27       	eor	r24, r18
     7e6:	85 bb       	out	0x15, r24	; 21
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		DIO_PORTB_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     7ea:	08 95       	ret
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
     7ec:	22 b3       	in	r18, 0x12	; 18
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	01 80       	ldd	r0, Z+1	; 0x01
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <Dio_togglePin+0x98>
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	0a 94       	dec	r0
     7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <Dio_togglePin+0x94>
     7fe:	82 27       	eor	r24, r18
     800:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
     802:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		DIO_PORTC_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
     804:	08 95       	ret
enuDio_Status_t Dio_togglePin(uint8_t u8_pinID)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     80a:	86 e0       	ldi	r24, 0x06	; 6
     80c:	08 95       	ret
		break;
		case PORT_D:
		DIO_PORTD_DATA ^= (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum));
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     80e:	84 e0       	ldi	r24, 0x04	; 4
	}	
	return DIO_STATUS_ERROR_OK;
}
     810:	08 95       	ret

00000812 <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
     812:	8b 30       	cpi	r24, 0x0B	; 11
     814:	08 f0       	brcs	.+2      	; 0x818 <Dio_readPin+0x6>
     816:	7c c0       	rjmp	.+248    	; 0x910 <__stack+0xb1>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
     818:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u8_Dio_Status>
     81c:	99 23       	and	r25, r25
     81e:	09 f4       	brne	.+2      	; 0x822 <Dio_readPin+0x10>
     820:	79 c0       	rjmp	.+242    	; 0x914 <__stack+0xb5>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
     822:	e8 2f       	mov	r30, r24
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	cf 01       	movw	r24, r30
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	88 0f       	add	r24, r24
     82e:	99 1f       	adc	r25, r25
     830:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <pstrDio_pinsConfig>
     834:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <pstrDio_pinsConfig+0x1>
     838:	e8 0f       	add	r30, r24
     83a:	f9 1f       	adc	r31, r25
     83c:	80 81       	ld	r24, Z
     83e:	81 30       	cpi	r24, 0x01	; 1
     840:	f9 f0       	breq	.+62     	; 0x880 <__stack+0x21>
     842:	30 f0       	brcs	.+12     	; 0x850 <Dio_readPin+0x3e>
     844:	82 30       	cpi	r24, 0x02	; 2
     846:	a1 f1       	breq	.+104    	; 0x8b0 <__stack+0x51>
     848:	83 30       	cpi	r24, 0x03	; 3
     84a:	09 f4       	brne	.+2      	; 0x84e <Dio_readPin+0x3c>
     84c:	49 c0       	rjmp	.+146    	; 0x8e0 <__stack+0x81>
     84e:	64 c0       	rjmp	.+200    	; 0x918 <__stack+0xb9>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     850:	49 b3       	in	r20, 0x19	; 25
     852:	51 81       	ldd	r21, Z+1	; 0x01
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	9c 01       	movw	r18, r24
     85a:	05 2e       	mov	r0, r21
     85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
     85e:	22 0f       	add	r18, r18
     860:	33 1f       	adc	r19, r19
     862:	0a 94       	dec	r0
     864:	e2 f7       	brpl	.-8      	; 0x85e <Dio_readPin+0x4c>
     866:	84 2f       	mov	r24, r20
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	82 23       	and	r24, r18
     86c:	93 23       	and	r25, r19
     86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
     870:	95 95       	asr	r25
     872:	87 95       	ror	r24
     874:	5a 95       	dec	r21
     876:	e2 f7       	brpl	.-8      	; 0x870 <__stack+0x11>
     878:	fb 01       	movw	r30, r22
     87a:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     87c:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     87e:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     880:	46 b3       	in	r20, 0x16	; 22
     882:	51 81       	ldd	r21, Z+1	; 0x01
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	9c 01       	movw	r18, r24
     88a:	05 2e       	mov	r0, r21
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
     88e:	22 0f       	add	r18, r18
     890:	33 1f       	adc	r19, r19
     892:	0a 94       	dec	r0
     894:	e2 f7       	brpl	.-8      	; 0x88e <__stack+0x2f>
     896:	84 2f       	mov	r24, r20
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	82 23       	and	r24, r18
     89c:	93 23       	and	r25, r19
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
     8a0:	95 95       	asr	r25
     8a2:	87 95       	ror	r24
     8a4:	5a 95       	dec	r21
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
     8a8:	fb 01       	movw	r30, r22
     8aa:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     8ae:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     8b0:	43 b3       	in	r20, 0x13	; 19
     8b2:	51 81       	ldd	r21, Z+1	; 0x01
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	9c 01       	movw	r18, r24
     8ba:	05 2e       	mov	r0, r21
     8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <__stack+0x63>
     8be:	22 0f       	add	r18, r18
     8c0:	33 1f       	adc	r19, r19
     8c2:	0a 94       	dec	r0
     8c4:	e2 f7       	brpl	.-8      	; 0x8be <__stack+0x5f>
     8c6:	84 2f       	mov	r24, r20
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	82 23       	and	r24, r18
     8cc:	93 23       	and	r25, r19
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
     8d0:	95 95       	asr	r25
     8d2:	87 95       	ror	r24
     8d4:	5a 95       	dec	r21
     8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
     8d8:	fb 01       	movw	r30, r22
     8da:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     8dc:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     8de:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
     8e0:	40 b3       	in	r20, 0x10	; 16
     8e2:	51 81       	ldd	r21, Z+1	; 0x01
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	9c 01       	movw	r18, r24
     8ea:	05 2e       	mov	r0, r21
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
     8ee:	22 0f       	add	r18, r18
     8f0:	33 1f       	adc	r19, r19
     8f2:	0a 94       	dec	r0
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <__stack+0x8f>
     8f6:	84 2f       	mov	r24, r20
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	82 23       	and	r24, r18
     8fc:	93 23       	and	r25, r19
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0xa5>
     900:	95 95       	asr	r25
     902:	87 95       	ror	r24
     904:	5a 95       	dec	r21
     906:	e2 f7       	brpl	.-8      	; 0x900 <__stack+0xa1>
     908:	fb 01       	movw	r30, r22
     90a:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
     90c:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
     90e:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
     914:	86 e0       	ldi	r24, 0x06	; 6
     916:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
     918:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
     91a:	08 95       	ret

0000091c <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_EXPIRED;
	return GPT_STATUS_ERROR_OK;
}
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e c0       	rjmp	.+28     	; 0x93c <Gpt_ISRHandler+0x20>
     920:	29 2f       	mov	r18, r25
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	f9 01       	movw	r30, r18
     926:	ee 0f       	add	r30, r30
     928:	ff 1f       	adc	r31, r31
     92a:	2e 0f       	add	r18, r30
     92c:	3f 1f       	adc	r19, r31
     92e:	f9 01       	movw	r30, r18
     930:	ec 56       	subi	r30, 0x6C	; 108
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	20 81       	ld	r18, Z
     936:	28 17       	cp	r18, r24
     938:	19 f0       	breq	.+6      	; 0x940 <Gpt_ISRHandler+0x24>
     93a:	9f 5f       	subi	r25, 0xFF	; 255
     93c:	99 23       	and	r25, r25
     93e:	81 f3       	breq	.-32     	; 0x920 <Gpt_ISRHandler+0x4>
     940:	89 2f       	mov	r24, r25
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	fc 01       	movw	r30, r24
     946:	ee 0f       	add	r30, r30
     948:	ff 1f       	adc	r31, r31
     94a:	ee 0f       	add	r30, r30
     94c:	ff 1f       	adc	r31, r31
     94e:	ea 55       	subi	r30, 0x5A	; 90
     950:	ff 4f       	sbci	r31, 0xFF	; 255
     952:	40 81       	ld	r20, Z
     954:	51 81       	ldd	r21, Z+1	; 0x01
     956:	62 81       	ldd	r22, Z+2	; 0x02
     958:	73 81       	ldd	r23, Z+3	; 0x03
     95a:	41 15       	cp	r20, r1
     95c:	51 05       	cpc	r21, r1
     95e:	61 05       	cpc	r22, r1
     960:	71 05       	cpc	r23, r1
     962:	81 f0       	breq	.+32     	; 0x984 <Gpt_ISRHandler+0x68>
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	fc 01       	movw	r30, r24
     96e:	ea 55       	subi	r30, 0x5A	; 90
     970:	ff 4f       	sbci	r31, 0xFF	; 255
     972:	41 50       	subi	r20, 0x01	; 1
     974:	51 09       	sbc	r21, r1
     976:	61 09       	sbc	r22, r1
     978:	71 09       	sbc	r23, r1
     97a:	40 83       	st	Z, r20
     97c:	51 83       	std	Z+1, r21	; 0x01
     97e:	62 83       	std	Z+2, r22	; 0x02
     980:	73 83       	std	Z+3, r23	; 0x03
     982:	08 95       	ret
     984:	23 b7       	in	r18, 0x33	; 51
     986:	2e 7f       	andi	r18, 0xFE	; 254
     988:	23 bf       	out	0x33, r18	; 51
     98a:	23 b7       	in	r18, 0x33	; 51
     98c:	2d 7f       	andi	r18, 0xFD	; 253
     98e:	23 bf       	out	0x33, r18	; 51
     990:	23 b7       	in	r18, 0x33	; 51
     992:	2b 7f       	andi	r18, 0xFB	; 251
     994:	23 bf       	out	0x33, r18	; 51
     996:	29 b7       	in	r18, 0x39	; 57
     998:	2e 7f       	andi	r18, 0xFE	; 254
     99a:	29 bf       	out	0x39, r18	; 57
     99c:	fc 01       	movw	r30, r24
     99e:	e6 55       	subi	r30, 0x56	; 86
     9a0:	ff 4f       	sbci	r31, 0xFF	; 255
     9a2:	24 e0       	ldi	r18, 0x04	; 4
     9a4:	20 83       	st	Z, r18
     9a6:	e0 91 ab 00 	lds	r30, 0x00AB	; 0x8000ab <Gpt_Timer0_CallBackPtr>
     9aa:	f0 91 ac 00 	lds	r31, 0x00AC	; 0x8000ac <Gpt_Timer0_CallBackPtr+0x1>
     9ae:	09 95       	icall
     9b0:	08 95       	ret

000009b2 <GptInit>:
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	24 c0       	rjmp	.+72     	; 0x9fe <GptInit+0x4c>
     9b6:	82 2f       	mov	r24, r18
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	fc 01       	movw	r30, r24
     9bc:	ee 0f       	add	r30, r30
     9be:	ff 1f       	adc	r31, r31
     9c0:	e8 0f       	add	r30, r24
     9c2:	f9 1f       	adc	r31, r25
     9c4:	ec 56       	subi	r30, 0x6C	; 108
     9c6:	ff 4f       	sbci	r31, 0xFF	; 255
     9c8:	30 81       	ld	r19, Z
     9ca:	33 23       	and	r19, r19
     9cc:	19 f0       	breq	.+6      	; 0x9d4 <GptInit+0x22>
     9ce:	33 30       	cpi	r19, 0x03	; 3
     9d0:	d0 f4       	brcc	.+52     	; 0xa06 <GptInit+0x54>
     9d2:	0f c0       	rjmp	.+30     	; 0x9f2 <GptInit+0x40>
     9d4:	fc 01       	movw	r30, r24
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	e8 0f       	add	r30, r24
     9dc:	f9 1f       	adc	r31, r25
     9de:	ec 56       	subi	r30, 0x6C	; 108
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	32 81       	ldd	r19, Z+2	; 0x02
     9e4:	31 11       	cpse	r19, r1
     9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <GptInit+0x40>
     9e8:	13 be       	out	0x33, r1	; 51
     9ea:	39 b7       	in	r19, 0x39	; 57
     9ec:	3c 7f       	andi	r19, 0xFC	; 252
     9ee:	39 bf       	out	0x39, r19	; 57
     9f0:	12 be       	out	0x32, r1	; 50
     9f2:	fc 01       	movw	r30, r24
     9f4:	e6 55       	subi	r30, 0x56	; 86
     9f6:	ff 4f       	sbci	r31, 0xFF	; 255
     9f8:	31 e0       	ldi	r19, 0x01	; 1
     9fa:	30 83       	st	Z, r19
     9fc:	2f 5f       	subi	r18, 0xFF	; 255
     9fe:	22 23       	and	r18, r18
     a00:	d1 f2       	breq	.-76     	; 0x9b6 <GptInit+0x4>
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	08 95       	ret
     a06:	84 e0       	ldi	r24, 0x04	; 4
     a08:	08 95       	ret

00000a0a <GptStart_aSync>:
* Return value: enuGpt_Status_t - Returns the status of the function (if there is any error)
* Description: Function to Start the Timer module counting from 0x00 until (u16_Ticks)
               and generate interrupt when OVF.
************************************************************************************/
enuGpt_Status_t GptStart_aSync(u8Gpt_Channel_t ChannelId, u32Gpt_Value_t u16_Ticks, pfGpt_CallBack_t CallBack)
{
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	89 01       	movw	r16, r18
	
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
     a14:	81 11       	cpse	r24, r1
     a16:	4a c0       	rjmp	.+148    	; 0xaac <GptStart_aSync+0xa2>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
     a18:	c8 2f       	mov	r28, r24
     a1a:	d0 e0       	ldi	r29, 0x00	; 0
     a1c:	fe 01       	movw	r30, r28
     a1e:	e6 55       	subi	r30, 0x56	; 86
     a20:	ff 4f       	sbci	r31, 0xFF	; 255
     a22:	80 81       	ld	r24, Z
     a24:	88 23       	and	r24, r24
     a26:	09 f4       	brne	.+2      	; 0xa2a <GptStart_aSync+0x20>
     a28:	43 c0       	rjmp	.+134    	; 0xab0 <GptStart_aSync+0xa6>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
     a2a:	82 30       	cpi	r24, 0x02	; 2
     a2c:	09 f4       	brne	.+2      	; 0xa30 <GptStart_aSync+0x26>
     a2e:	42 c0       	rjmp	.+132    	; 0xab4 <GptStart_aSync+0xaa>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint16_t u16_remainderCount=0;
	
	enuChannelsState[ChannelId] = GPT_RUNNING;
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	fe 01       	movw	r30, r28
     a34:	e6 55       	subi	r30, 0x56	; 86
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	80 83       	st	Z, r24
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
     a3a:	fe 01       	movw	r30, r28
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	ec 0f       	add	r30, r28
     a42:	fd 1f       	adc	r31, r29
     a44:	ec 56       	subi	r30, 0x6C	; 108
     a46:	ff 4f       	sbci	r31, 0xFF	; 255
     a48:	80 81       	ld	r24, Z
     a4a:	88 23       	and	r24, r24
     a4c:	21 f0       	breq	.+8      	; 0xa56 <GptStart_aSync+0x4c>
     a4e:	83 30       	cpi	r24, 0x03	; 3
     a50:	98 f1       	brcs	.+102    	; 0xab8 <GptStart_aSync+0xae>
		case GPT_TIMER_2: /* In case of Timer 2 */
			break;
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	34 c0       	rjmp	.+104    	; 0xabe <GptStart_aSync+0xb4>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Get Number of loops to overflow the timer counter */
			u32_Channels_ISR_Count[ChannelId] = u16_Ticks / GPT_MAX_VALUE_8BIT; //0xFF
     a56:	cb 01       	movw	r24, r22
     a58:	ba 01       	movw	r22, r20
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__udivmodsi4>
     a66:	fe 01       	movw	r30, r28
     a68:	ee 0f       	add	r30, r30
     a6a:	ff 1f       	adc	r31, r31
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	ea 55       	subi	r30, 0x5A	; 90
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	20 83       	st	Z, r18
     a76:	31 83       	std	Z+1, r19	; 0x01
     a78:	42 83       	std	Z+2, r20	; 0x02
     a7a:	53 83       	std	Z+3, r21	; 0x03
			/* Get Number of extra ticks (remainder) */
			u16_remainderCount = u16_Ticks % GPT_MAX_VALUE_8BIT;
     a7c:	26 2f       	mov	r18, r22
     a7e:	37 2f       	mov	r19, r23
			/* Set the interrupt enable */
			REG_SET_BIT(GPT_TIMSK_REG, GPT_TIMSK_TOIE0);
     a80:	89 b7       	in	r24, 0x39	; 57
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	89 bf       	out	0x39, r24	; 57
			/* Set the callback function pointer */
			Gpt_Timer0_CallBackPtr=CallBack;
     a86:	10 93 ac 00 	sts	0x00AC, r17	; 0x8000ac <Gpt_Timer0_CallBackPtr+0x1>
     a8a:	00 93 ab 00 	sts	0x00AB, r16	; 0x8000ab <Gpt_Timer0_CallBackPtr>
			/* Start the clock with the given pre scaler */
			GPT_TCCR0_REG = (Timers_Configurations[ChannelId].enuClock_Src) << GPT_TCCR0_CS00;
     a8e:	ce 01       	movw	r24, r28
     a90:	88 0f       	add	r24, r24
     a92:	99 1f       	adc	r25, r25
     a94:	c8 0f       	add	r28, r24
     a96:	d9 1f       	adc	r29, r25
     a98:	cc 56       	subi	r28, 0x6C	; 108
     a9a:	df 4f       	sbci	r29, 0xFF	; 255
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	83 bf       	out	0x33, r24	; 51
			/* Run the remainder ticks */
			/* Put the value of the 0xFF - remainderTicks to start count from it */
			if(u16_remainderCount != 0)
     aa0:	23 2b       	or	r18, r19
     aa2:	61 f0       	breq	.+24     	; 0xabc <GptStart_aSync+0xb2>
			{
				GPT_TCNT0_REG = 256 - u16_remainderCount;
     aa4:	61 95       	neg	r22
     aa6:	62 bf       	out	0x32, r22	; 50
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	09 c0       	rjmp	.+18     	; 0xabe <GptStart_aSync+0xb4>
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
     aac:	85 e0       	ldi	r24, 0x05	; 5
     aae:	07 c0       	rjmp	.+14     	; 0xabe <GptStart_aSync+0xb4>
		}else{/*Nothing to here*/}
/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <GptStart_aSync+0xb4>
	}else{/*Nothing to here*/}
		
/* Check if the module is not initialized */
	if (GPT_RUNNING == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_BUSY;
     ab4:	86 e0       	ldi	r24, 0x06	; 6
     ab6:	03 c0       	rjmp	.+6      	; 0xabe <GptStart_aSync+0xb4>
		/************************************************************************/
		/************************************************************************/
		default:
			return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	return GPT_STATUS_ERROR_OK;
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	01 c0       	rjmp	.+2      	; 0xabe <GptStart_aSync+0xb4>
     abc:	81 e0       	ldi	r24, 0x01	; 1
}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	08 95       	ret

00000ac8 <GptStop>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
     ac8:	81 11       	cpse	r24, r1
     aca:	23 c0       	rjmp	.+70     	; 0xb12 <GptStop+0x4a>
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	fc 01       	movw	r30, r24
     ad0:	e6 55       	subi	r30, 0x56	; 86
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	20 81       	ld	r18, Z
     ad6:	22 23       	and	r18, r18
     ad8:	f1 f0       	breq	.+60     	; 0xb16 <GptStop+0x4e>
	{
		return GPT_STATUS_ERROR_NOT_INIT;
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
     ada:	22 30       	cpi	r18, 0x02	; 2
     adc:	f1 f4       	brne	.+60     	; 0xb1a <GptStop+0x52>

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	
	switch (Timers_Configurations[ChannelId].u8Timer_Id)
     ade:	fc 01       	movw	r30, r24
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	e8 0f       	add	r30, r24
     ae6:	f9 1f       	adc	r31, r25
     ae8:	ec 56       	subi	r30, 0x6C	; 108
     aea:	ff 4f       	sbci	r31, 0xFF	; 255
     aec:	20 81       	ld	r18, Z
     aee:	22 23       	and	r18, r18
     af0:	19 f0       	breq	.+6      	; 0xaf8 <GptStop+0x30>
     af2:	23 30       	cpi	r18, 0x03	; 3
     af4:	a0 f4       	brcc	.+40     	; 0xb1e <GptStop+0x56>
     af6:	06 c0       	rjmp	.+12     	; 0xb04 <GptStop+0x3c>
	{
		/************************************************************************/
		/************************************************************************/
		case GPT_TIMER_0: /* In case of Timer 0 */
			/* Stop the clock from the timer */
			GPT_TCCR0_REG &= ~(7 << GPT_TCCR0_CS00);
     af8:	23 b7       	in	r18, 0x33	; 51
     afa:	28 7f       	andi	r18, 0xF8	; 248
     afc:	23 bf       	out	0x33, r18	; 51
			GPT_TIMSK_REG &= ~(3 << GPT_TIMSK_TOIE0);
     afe:	29 b7       	in	r18, 0x39	; 57
     b00:	2c 7f       	andi	r18, 0xFC	; 252
     b02:	29 bf       	out	0x39, r18	; 57
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_STOPPED;
     b04:	fc 01       	movw	r30, r24
     b06:	e6 55       	subi	r30, 0x56	; 86
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	23 e0       	ldi	r18, 0x03	; 3
     b0c:	20 83       	st	Z, r18
	return GPT_STATUS_ERROR_OK;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
/* Chek if the channel id is valid */
	if(GPT_CONFIGURED_CHANNELS <= ChannelId)
	{
		return GPT_STATUS_ERROR_INVALID_TIMER_ID;
     b12:	85 e0       	ldi	r24, 0x05	; 5
     b14:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the module is not initialized */
	if (GPT_UNINITIALIZED == enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_NOT_INIT;
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	08 95       	ret
	}else{/*Nothing to here*/}
		
	/* Check if the module is not initialized */
	if (GPT_RUNNING != enuChannelsState[ChannelId])
	{
		return GPT_STATUS_ERROR_TIMER_STOPPED;
     b1a:	87 e0       	ldi	r24, 0x07	; 7
     b1c:	08 95       	ret
		case GPT_TIMER_2: /* In case of Timer 2 */
		break;
		/************************************************************************/
		/************************************************************************/
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
     b1e:	84 e0       	ldi	r24, 0x04	; 4
	}
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
     b20:	08 95       	ret

00000b22 <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
     b22:	1f 92       	push	r1
     b24:	0f 92       	push	r0
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	0f 92       	push	r0
     b2a:	11 24       	eor	r1, r1
     b2c:	2f 93       	push	r18
     b2e:	3f 93       	push	r19
     b30:	4f 93       	push	r20
     b32:	5f 93       	push	r21
     b34:	6f 93       	push	r22
     b36:	7f 93       	push	r23
     b38:	8f 93       	push	r24
     b3a:	9f 93       	push	r25
     b3c:	af 93       	push	r26
     b3e:	bf 93       	push	r27
     b40:	ef 93       	push	r30
     b42:	ff 93       	push	r31
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	0e 94 8e 04 	call	0x91c	; 0x91c <Gpt_ISRHandler>
     b4a:	ff 91       	pop	r31
     b4c:	ef 91       	pop	r30
     b4e:	bf 91       	pop	r27
     b50:	af 91       	pop	r26
     b52:	9f 91       	pop	r25
     b54:	8f 91       	pop	r24
     b56:	7f 91       	pop	r23
     b58:	6f 91       	pop	r22
     b5a:	5f 91       	pop	r21
     b5c:	4f 91       	pop	r20
     b5e:	3f 91       	pop	r19
     b60:	2f 91       	pop	r18
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
     b6c:	1f 92       	push	r1
     b6e:	0f 92       	push	r0
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	0f 92       	push	r0
     b74:	11 24       	eor	r1, r1
     b76:	2f 93       	push	r18
     b78:	3f 93       	push	r19
     b7a:	4f 93       	push	r20
     b7c:	5f 93       	push	r21
     b7e:	6f 93       	push	r22
     b80:	7f 93       	push	r23
     b82:	8f 93       	push	r24
     b84:	9f 93       	push	r25
     b86:	af 93       	push	r26
     b88:	bf 93       	push	r27
     b8a:	ef 93       	push	r30
     b8c:	ff 93       	push	r31
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	0e 94 8e 04 	call	0x91c	; 0x91c <Gpt_ISRHandler>
     b94:	ff 91       	pop	r31
     b96:	ef 91       	pop	r30
     b98:	bf 91       	pop	r27
     b9a:	af 91       	pop	r26
     b9c:	9f 91       	pop	r25
     b9e:	8f 91       	pop	r24
     ba0:	7f 91       	pop	r23
     ba2:	6f 91       	pop	r22
     ba4:	5f 91       	pop	r21
     ba6:	4f 91       	pop	r20
     ba8:	3f 91       	pop	r19
     baa:	2f 91       	pop	r18
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	0f 90       	pop	r0
     bb2:	1f 90       	pop	r1
     bb4:	18 95       	reti

00000bb6 <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     bb6:	1f 92       	push	r1
     bb8:	0f 92       	push	r0
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	2f 93       	push	r18
     bc2:	3f 93       	push	r19
     bc4:	4f 93       	push	r20
     bc6:	5f 93       	push	r21
     bc8:	6f 93       	push	r22
     bca:	7f 93       	push	r23
     bcc:	8f 93       	push	r24
     bce:	9f 93       	push	r25
     bd0:	af 93       	push	r26
     bd2:	bf 93       	push	r27
     bd4:	ef 93       	push	r30
     bd6:	ff 93       	push	r31
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	0e 94 8e 04 	call	0x91c	; 0x91c <Gpt_ISRHandler>
     bde:	ff 91       	pop	r31
     be0:	ef 91       	pop	r30
     be2:	bf 91       	pop	r27
     be4:	af 91       	pop	r26
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	7f 91       	pop	r23
     bec:	6f 91       	pop	r22
     bee:	5f 91       	pop	r21
     bf0:	4f 91       	pop	r20
     bf2:	3f 91       	pop	r19
     bf4:	2f 91       	pop	r18
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	1f 90       	pop	r1
     bfe:	18 95       	reti

00000c00 <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     c00:	1f 92       	push	r1
     c02:	0f 92       	push	r0
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	0f 92       	push	r0
     c08:	11 24       	eor	r1, r1
     c0a:	2f 93       	push	r18
     c0c:	3f 93       	push	r19
     c0e:	4f 93       	push	r20
     c10:	5f 93       	push	r21
     c12:	6f 93       	push	r22
     c14:	7f 93       	push	r23
     c16:	8f 93       	push	r24
     c18:	9f 93       	push	r25
     c1a:	af 93       	push	r26
     c1c:	bf 93       	push	r27
     c1e:	ef 93       	push	r30
     c20:	ff 93       	push	r31
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	0e 94 8e 04 	call	0x91c	; 0x91c <Gpt_ISRHandler>
     c28:	ff 91       	pop	r31
     c2a:	ef 91       	pop	r30
     c2c:	bf 91       	pop	r27
     c2e:	af 91       	pop	r26
     c30:	9f 91       	pop	r25
     c32:	8f 91       	pop	r24
     c34:	7f 91       	pop	r23
     c36:	6f 91       	pop	r22
     c38:	5f 91       	pop	r21
     c3a:	4f 91       	pop	r20
     c3c:	3f 91       	pop	r19
     c3e:	2f 91       	pop	r18
     c40:	0f 90       	pop	r0
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	0f 90       	pop	r0
     c46:	1f 90       	pop	r1
     c48:	18 95       	reti

00000c4a <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     c4a:	1f 92       	push	r1
     c4c:	0f 92       	push	r0
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	0f 92       	push	r0
     c52:	11 24       	eor	r1, r1
     c54:	2f 93       	push	r18
     c56:	3f 93       	push	r19
     c58:	4f 93       	push	r20
     c5a:	5f 93       	push	r21
     c5c:	6f 93       	push	r22
     c5e:	7f 93       	push	r23
     c60:	8f 93       	push	r24
     c62:	9f 93       	push	r25
     c64:	af 93       	push	r26
     c66:	bf 93       	push	r27
     c68:	ef 93       	push	r30
     c6a:	ff 93       	push	r31
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	0e 94 8e 04 	call	0x91c	; 0x91c <Gpt_ISRHandler>
     c72:	ff 91       	pop	r31
     c74:	ef 91       	pop	r30
     c76:	bf 91       	pop	r27
     c78:	af 91       	pop	r26
     c7a:	9f 91       	pop	r25
     c7c:	8f 91       	pop	r24
     c7e:	7f 91       	pop	r23
     c80:	6f 91       	pop	r22
     c82:	5f 91       	pop	r21
     c84:	4f 91       	pop	r20
     c86:	3f 91       	pop	r19
     c88:	2f 91       	pop	r18
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	0f 90       	pop	r0
     c90:	1f 90       	pop	r1
     c92:	18 95       	reti

00000c94 <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
     c94:	1f 92       	push	r1
     c96:	0f 92       	push	r0
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	4f 93       	push	r20
     ca4:	5f 93       	push	r21
     ca6:	6f 93       	push	r22
     ca8:	7f 93       	push	r23
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	0e 94 8e 04 	call	0x91c	; 0x91c <Gpt_ISRHandler>
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	bf 91       	pop	r27
     cc2:	af 91       	pop	r26
     cc4:	9f 91       	pop	r25
     cc6:	8f 91       	pop	r24
     cc8:	7f 91       	pop	r23
     cca:	6f 91       	pop	r22
     ccc:	5f 91       	pop	r21
     cce:	4f 91       	pop	r20
     cd0:	3f 91       	pop	r19
     cd2:	2f 91       	pop	r18
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	0e 94 8e 04 	call	0x91c	; 0x91c <Gpt_ISRHandler>
     d06:	ff 91       	pop	r31
     d08:	ef 91       	pop	r30
     d0a:	bf 91       	pop	r27
     d0c:	af 91       	pop	r26
     d0e:	9f 91       	pop	r25
     d10:	8f 91       	pop	r24
     d12:	7f 91       	pop	r23
     d14:	6f 91       	pop	r22
     d16:	5f 91       	pop	r21
     d18:	4f 91       	pop	r20
     d1a:	3f 91       	pop	r19
     d1c:	2f 91       	pop	r18
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	0e 94 8e 04 	call	0x91c	; 0x91c <Gpt_ISRHandler>
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	bf 91       	pop	r27
     d56:	af 91       	pop	r26
     d58:	9f 91       	pop	r25
     d5a:	8f 91       	pop	r24
     d5c:	7f 91       	pop	r23
     d5e:	6f 91       	pop	r22
     d60:	5f 91       	pop	r21
     d62:	4f 91       	pop	r20
     d64:	3f 91       	pop	r19
     d66:	2f 91       	pop	r18
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	0f 90       	pop	r0
     d6e:	1f 90       	pop	r1
     d70:	18 95       	reti

00000d72 <waveFunction>:
u8SWPwm_Channel_t gu8_currentPwmChannel = 0;
/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
/*--*-*-*- FUNCTIONS IMPLEMENTATION -*-*-*-*-*-*/

void waveFunction(void)
{
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
	Dio_togglePin(SWPwm_Channels[gu8_currentPwmChannel].u8_DioChannelID);
     d76:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <gu8_currentPwmChannel>
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	ee 0f       	add	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	e9 56       	subi	r30, 0x69	; 105
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	80 81       	ld	r24, Z
     d86:	0e 94 b1 03 	call	0x762	; 0x762 <Dio_togglePin>
	if (gstr_ChannelsData[gu8_currentPwmChannel].enuChannelState == SWPWM_RUNNING)
     d8a:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <gu8_currentPwmChannel>
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9c 01       	movw	r18, r24
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	f9 01       	movw	r30, r18
     d98:	ee 0f       	add	r30, r30
     d9a:	ff 1f       	adc	r31, r31
     d9c:	ee 0f       	add	r30, r30
     d9e:	ff 1f       	adc	r31, r31
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	e2 1b       	sub	r30, r18
     da6:	f3 0b       	sbc	r31, r19
     da8:	e2 55       	subi	r30, 0x52	; 82
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	25 85       	ldd	r18, Z+13	; 0x0d
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	09 f0       	breq	.+2      	; 0xdb4 <waveFunction+0x42>
     db2:	5e c0       	rjmp	.+188    	; 0xe70 <waveFunction+0xfe>
	{
		GptStart_aSync(SWPwm_Channels[gu8_currentPwmChannel].u8_GptChannelID, gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks, waveFunction);
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	fc 01       	movw	r30, r24
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	ee 0f       	add	r30, r30
     dc0:	ff 1f       	adc	r31, r31
     dc2:	ee 0f       	add	r30, r30
     dc4:	ff 1f       	adc	r31, r31
     dc6:	e8 1b       	sub	r30, r24
     dc8:	f9 0b       	sbc	r31, r25
     dca:	e2 55       	subi	r30, 0x52	; 82
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	41 85       	ldd	r20, Z+9	; 0x09
     dd0:	52 85       	ldd	r21, Z+10	; 0x0a
     dd2:	63 85       	ldd	r22, Z+11	; 0x0b
     dd4:	74 85       	ldd	r23, Z+12	; 0x0c
     dd6:	fc 01       	movw	r30, r24
     dd8:	e9 56       	subi	r30, 0x69	; 105
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	29 eb       	ldi	r18, 0xB9	; 185
     dde:	36 e0       	ldi	r19, 0x06	; 6
     de0:	81 81       	ldd	r24, Z+1	; 0x01
     de2:	0e 94 05 05 	call	0xa0a	; 0xa0a <GptStart_aSync>
		if(gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks == gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks)
     de6:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <gu8_currentPwmChannel>
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9c 01       	movw	r18, r24
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	f9 01       	movw	r30, r18
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	e2 1b       	sub	r30, r18
     e02:	f3 0b       	sbc	r31, r19
     e04:	e2 55       	subi	r30, 0x52	; 82
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	01 85       	ldd	r16, Z+9	; 0x09
     e0a:	12 85       	ldd	r17, Z+10	; 0x0a
     e0c:	23 85       	ldd	r18, Z+11	; 0x0b
     e0e:	34 85       	ldd	r19, Z+12	; 0x0c
     e10:	45 81       	ldd	r20, Z+5	; 0x05
     e12:	56 81       	ldd	r21, Z+6	; 0x06
     e14:	67 81       	ldd	r22, Z+7	; 0x07
     e16:	70 85       	ldd	r23, Z+8	; 0x08
     e18:	04 17       	cp	r16, r20
     e1a:	15 07       	cpc	r17, r21
     e1c:	26 07       	cpc	r18, r22
     e1e:	37 07       	cpc	r19, r23
     e20:	b1 f4       	brne	.+44     	; 0xe4e <waveFunction+0xdc>
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_ONTicks;
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	fc 01       	movw	r30, r24
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	ee 0f       	add	r30, r30
     e2e:	ff 1f       	adc	r31, r31
     e30:	ee 0f       	add	r30, r30
     e32:	ff 1f       	adc	r31, r31
     e34:	e8 1b       	sub	r30, r24
     e36:	f9 0b       	sbc	r31, r25
     e38:	e2 55       	subi	r30, 0x52	; 82
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	81 81       	ldd	r24, Z+1	; 0x01
     e3e:	92 81       	ldd	r25, Z+2	; 0x02
     e40:	a3 81       	ldd	r26, Z+3	; 0x03
     e42:	b4 81       	ldd	r27, Z+4	; 0x04
     e44:	81 87       	std	Z+9, r24	; 0x09
     e46:	92 87       	std	Z+10, r25	; 0x0a
     e48:	a3 87       	std	Z+11, r26	; 0x0b
     e4a:	b4 87       	std	Z+12, r27	; 0x0c
     e4c:	11 c0       	rjmp	.+34     	; 0xe70 <waveFunction+0xfe>
		else
			gstr_ChannelsData[gu8_currentPwmChannel].u32_NxtTicks = gstr_ChannelsData[gu8_currentPwmChannel].u32_OFFTicks;
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	fc 01       	movw	r30, r24
     e54:	ee 0f       	add	r30, r30
     e56:	ff 1f       	adc	r31, r31
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	e8 1b       	sub	r30, r24
     e62:	f9 0b       	sbc	r31, r25
     e64:	e2 55       	subi	r30, 0x52	; 82
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	41 87       	std	Z+9, r20	; 0x09
     e6a:	52 87       	std	Z+10, r21	; 0x0a
     e6c:	63 87       	std	Z+11, r22	; 0x0b
     e6e:	74 87       	std	Z+12, r23	; 0x0c
	}
}
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	08 95       	ret

00000e76 <SWPwm_Init>:
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Initialize the SWPwm module.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Init(void)
{
	GptInit();
     e76:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <GptInit>
	Dio_init(strDio_pins);
     e7a:	81 e6       	ldi	r24, 0x61	; 97
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 23 02 	call	0x446	; 0x446 <Dio_init>
	return SWPWM_STATUS_ERROR_OK;
}
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	08 95       	ret

00000e86 <SWPwm_Start>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Start(u8SWPwm_Channel_t u8_ChannelID, uint32_t u32_Freq, uint8_t u8_DutyCycle)
{
     e86:	4f 92       	push	r4
     e88:	5f 92       	push	r5
     e8a:	6f 92       	push	r6
     e8c:	7f 92       	push	r7
     e8e:	8f 92       	push	r8
     e90:	9f 92       	push	r9
     e92:	af 92       	push	r10
     e94:	bf 92       	push	r11
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <SWPwm_Start+0x1e>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <SWPwm_Start+0x20>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <SWPwm_Start+0x22>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
	/**************************************************************************************/
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
     eac:	81 11       	cpse	r24, r1
     eae:	c9 c0       	rjmp	.+402    	; 0x1042 <SWPwm_Start+0x1bc>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
     eb0:	25 36       	cpi	r18, 0x65	; 101
     eb2:	08 f0       	brcs	.+2      	; 0xeb6 <SWPwm_Start+0x30>
     eb4:	c8 c0       	rjmp	.+400    	; 0x1046 <SWPwm_Start+0x1c0>
	/**************************************************************************************/

	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	if(u8_DutyCycle == 0)
     eb6:	22 23       	and	r18, r18
     eb8:	09 f4       	brne	.+2      	; 0xebc <SWPwm_Start+0x36>
     eba:	c7 c0       	rjmp	.+398    	; 0x104a <SWPwm_Start+0x1c4>
     ebc:	29 83       	std	Y+1, r18	; 0x01
     ebe:	e8 2e       	mov	r14, r24
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
	}else if(u8_DutyCycle == 100)
     ec0:	24 36       	cpi	r18, 0x64	; 100
     ec2:	61 f4       	brne	.+24     	; 0xedc <SWPwm_Start+0x56>
	{
		Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_HIGH);
     ec4:	e8 2f       	mov	r30, r24
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	ee 0f       	add	r30, r30
     eca:	ff 1f       	adc	r31, r31
     ecc:	e9 56       	subi	r30, 0x69	; 105
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	80 81       	ld	r24, Z
     ed4:	0e 94 18 03 	call	0x630	; 0x630 <Dio_writePin>
		return SWPWM_STATUS_ERROR_OK;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	ba c0       	rjmp	.+372    	; 0x1050 <SWPwm_Start+0x1ca>
	}
	float32_t f32_wavePeriodTime = (float32_t)1 / u32_Freq;
     edc:	cb 01       	movw	r24, r22
     ede:	ba 01       	movw	r22, r20
     ee0:	0e 94 10 0a 	call	0x1420	; 0x1420 <__floatunsisf>
     ee4:	9b 01       	movw	r18, r22
     ee6:	ac 01       	movw	r20, r24
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	80 e8       	ldi	r24, 0x80	; 128
     eee:	9f e3       	ldi	r25, 0x3F	; 63
     ef0:	0e 94 6f 09 	call	0x12de	; 0x12de <__divsf3>
     ef4:	4b 01       	movw	r8, r22
     ef6:	5c 01       	movw	r10, r24
	float32_t f32_waveONTime = (f32_wavePeriodTime*u8_DutyCycle) / 100;
     ef8:	29 81       	ldd	r18, Y+1	; 0x01
     efa:	62 2f       	mov	r22, r18
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 12 0a 	call	0x1424	; 0x1424 <__floatsisf>
     f06:	a5 01       	movw	r20, r10
     f08:	94 01       	movw	r18, r8
     f0a:	0e 94 9e 0a 	call	0x153c	; 0x153c <__mulsf3>
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	48 ec       	ldi	r20, 0xC8	; 200
     f14:	52 e4       	ldi	r21, 0x42	; 66
     f16:	0e 94 6f 09 	call	0x12de	; 0x12de <__divsf3>
     f1a:	2b 01       	movw	r4, r22
     f1c:	3c 01       	movw	r6, r24
	float32_t f32_waveOFFTime = f32_wavePeriodTime - f32_waveONTime;
     f1e:	9b 01       	movw	r18, r22
     f20:	ac 01       	movw	r20, r24
     f22:	c5 01       	movw	r24, r10
     f24:	b4 01       	movw	r22, r8
     f26:	0e 94 02 09 	call	0x1204	; 0x1204 <__subsf3>
     f2a:	69 83       	std	Y+1, r22	; 0x01
     f2c:	7a 83       	std	Y+2, r23	; 0x02
     f2e:	8b 83       	std	Y+3, r24	; 0x03
     f30:	9c 83       	std	Y+4, r25	; 0x04
	float32_t f32_systemPeriodTime = 0.0;
	uint16_t  u16_prescalerValue = 0;
	
	switch(Timers_Configurations[SWPwm_Channels[u8_ChannelID].u8_GptChannelID].enuClock_Src)
     f32:	0e 2d       	mov	r16, r14
     f34:	10 e0       	ldi	r17, 0x00	; 0
     f36:	f8 01       	movw	r30, r16
     f38:	ee 0f       	add	r30, r30
     f3a:	ff 1f       	adc	r31, r31
     f3c:	e9 56       	subi	r30, 0x69	; 105
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	f1 80       	ldd	r15, Z+1	; 0x01
     f42:	8f 2d       	mov	r24, r15
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	fc 01       	movw	r30, r24
     f48:	ee 0f       	add	r30, r30
     f4a:	ff 1f       	adc	r31, r31
     f4c:	8e 0f       	add	r24, r30
     f4e:	9f 1f       	adc	r25, r31
     f50:	fc 01       	movw	r30, r24
     f52:	ec 56       	subi	r30, 0x6C	; 108
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	e1 81       	ldd	r30, Z+1	; 0x01
     f58:	8e 2f       	mov	r24, r30
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	fc 01       	movw	r30, r24
     f5e:	31 97       	sbiw	r30, 0x01	; 1
     f60:	e7 30       	cpi	r30, 0x07	; 7
     f62:	f1 05       	cpc	r31, r1
     f64:	08 f0       	brcs	.+2      	; 0xf68 <SWPwm_Start+0xe2>
     f66:	73 c0       	rjmp	.+230    	; 0x104e <SWPwm_Start+0x1c8>
     f68:	e6 5d       	subi	r30, 0xD6	; 214
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__tablejump2__>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	0b c0       	rjmp	.+22     	; 0xf8c <SWPwm_Start+0x106>
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
			break;
		case GPT_CLK_SRC_PRSCLR_64:
			u16_prescalerValue = 64;
     f76:	60 e4       	ldi	r22, 0x40	; 64
     f78:	70 e0       	ldi	r23, 0x00	; 0
			break;
     f7a:	08 c0       	rjmp	.+16     	; 0xf8c <SWPwm_Start+0x106>
		case GPT_CLK_SRC_PRSCLR_256:
			u16_prescalerValue = 256;
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	71 e0       	ldi	r23, 0x01	; 1
			break;
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <SWPwm_Start+0x106>
		case GPT_CLK_SRC_PRSCLR_1024:
			u16_prescalerValue = 1024;
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	74 e0       	ldi	r23, 0x04	; 4
			break;
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <SWPwm_Start+0x106>
	{
		case GPT_CLK_SRC_PRSCLR_1:
			u16_prescalerValue = 1;
			break;
		case GPT_CLK_SRC_PRSCLR_8:
			u16_prescalerValue = 8;
     f88:	68 e0       	ldi	r22, 0x08	; 8
     f8a:	70 e0       	ldi	r23, 0x00	; 0
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
	}
	
	f32_systemPeriodTime = (float32_t)u16_prescalerValue/SYS_CLOCK_FREQUENCY;
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 10 0a 	call	0x1420	; 0x1420 <__floatunsisf>
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	34 e2       	ldi	r19, 0x24	; 36
     f98:	44 e7       	ldi	r20, 0x74	; 116
     f9a:	59 e4       	ldi	r21, 0x49	; 73
     f9c:	0e 94 6f 09 	call	0x12de	; 0x12de <__divsf3>
     fa0:	4b 01       	movw	r8, r22
     fa2:	5c 01       	movw	r10, r24
	gu8_currentPwmChannel = u8_ChannelID;
     fa4:	e0 92 ad 00 	sts	0x00AD, r14	; 0x8000ad <gu8_currentPwmChannel>
	gstr_ChannelsData[u8_ChannelID].u32_ONTicks = f32_waveONTime/f32_systemPeriodTime;
     fa8:	9b 01       	movw	r18, r22
     faa:	ac 01       	movw	r20, r24
     fac:	c3 01       	movw	r24, r6
     fae:	b2 01       	movw	r22, r4
     fb0:	0e 94 6f 09 	call	0x12de	; 0x12de <__divsf3>
     fb4:	00 0f       	add	r16, r16
     fb6:	11 1f       	adc	r17, r17
     fb8:	f8 01       	movw	r30, r16
     fba:	ee 0f       	add	r30, r30
     fbc:	ff 1f       	adc	r31, r31
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	e0 1b       	sub	r30, r16
     fc8:	f1 0b       	sbc	r31, r17
     fca:	e2 55       	subi	r30, 0x52	; 82
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	fe 83       	std	Y+6, r31	; 0x06
     fd0:	ed 83       	std	Y+5, r30	; 0x05
     fd2:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fixunssfsi>
     fd6:	ed 81       	ldd	r30, Y+5	; 0x05
     fd8:	fe 81       	ldd	r31, Y+6	; 0x06
     fda:	61 83       	std	Z+1, r22	; 0x01
     fdc:	72 83       	std	Z+2, r23	; 0x02
     fde:	83 83       	std	Z+3, r24	; 0x03
     fe0:	94 83       	std	Z+4, r25	; 0x04
	gstr_ChannelsData[u8_ChannelID].u32_OFFTicks = f32_waveOFFTime/f32_systemPeriodTime;
     fe2:	a5 01       	movw	r20, r10
     fe4:	94 01       	movw	r18, r8
     fe6:	69 81       	ldd	r22, Y+1	; 0x01
     fe8:	7a 81       	ldd	r23, Y+2	; 0x02
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	0e 94 6f 09 	call	0x12de	; 0x12de <__divsf3>
     ff2:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fixunssfsi>
     ff6:	ed 81       	ldd	r30, Y+5	; 0x05
     ff8:	fe 81       	ldd	r31, Y+6	; 0x06
     ffa:	65 83       	std	Z+5, r22	; 0x05
     ffc:	76 83       	std	Z+6, r23	; 0x06
     ffe:	87 83       	std	Z+7, r24	; 0x07
    1000:	90 87       	std	Z+8, r25	; 0x08
	gstr_ChannelsData[u8_ChannelID].u8_ChannelID = u8_ChannelID;
    1002:	e0 82       	st	Z, r14
	
	Dio_togglePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID);
    1004:	f8 01       	movw	r30, r16
    1006:	e9 56       	subi	r30, 0x69	; 105
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	80 81       	ld	r24, Z
    100c:	0e 94 b1 03 	call	0x762	; 0x762 <Dio_togglePin>
	GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID, gstr_ChannelsData[u8_ChannelID].u32_ONTicks, waveFunction);
    1010:	ed 81       	ldd	r30, Y+5	; 0x05
    1012:	fe 81       	ldd	r31, Y+6	; 0x06
    1014:	41 81       	ldd	r20, Z+1	; 0x01
    1016:	52 81       	ldd	r21, Z+2	; 0x02
    1018:	63 81       	ldd	r22, Z+3	; 0x03
    101a:	74 81       	ldd	r23, Z+4	; 0x04
    101c:	29 eb       	ldi	r18, 0xB9	; 185
    101e:	36 e0       	ldi	r19, 0x06	; 6
    1020:	8f 2d       	mov	r24, r15
    1022:	0e 94 05 05 	call	0xa0a	; 0xa0a <GptStart_aSync>
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
    1026:	ed 81       	ldd	r30, Y+5	; 0x05
    1028:	fe 81       	ldd	r31, Y+6	; 0x06
    102a:	85 81       	ldd	r24, Z+5	; 0x05
    102c:	96 81       	ldd	r25, Z+6	; 0x06
    102e:	a7 81       	ldd	r26, Z+7	; 0x07
    1030:	b0 85       	ldd	r27, Z+8	; 0x08
    1032:	81 87       	std	Z+9, r24	; 0x09
    1034:	92 87       	std	Z+10, r25	; 0x0a
    1036:	a3 87       	std	Z+11, r26	; 0x0b
    1038:	b4 87       	std	Z+12, r27	; 0x0c
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	85 87       	std	Z+13, r24	; 0x0d
	
	return SWPWM_STATUS_ERROR_OK;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	07 c0       	rjmp	.+14     	; 0x1050 <SWPwm_Start+0x1ca>
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <SWPwm_Start+0x1ca>
	}
	/* Check if the duty cycle given is out of range */
	if((u8_DutyCycle > SWPWM_MAX_DUTYCYCLE) || (u8_DutyCycle < SWPWM_MIN_DUTYCYCLE))
	{
		return SWPWM_STATUS_DC_OUTRANGE;
    1046:	84 e0       	ldi	r24, 0x04	; 4
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <SWPwm_Start+0x1ca>
	/*								Function Implementation								  */
	/**************************************************************************************/
	if(u8_DutyCycle == 0)
	{
		/* Means that ON time is 0 == No wave */
		return SWPWM_STATUS_ERROR_OK;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <SWPwm_Start+0x1ca>
			break;
		case GPT_CLK_SRC_PRSCLR_EXT_RISE:
			u16_prescalerValue = 1;
			break;
		default:
			return SWPWM_STATUS_ERROR_NOK;
    104e:	80 e0       	ldi	r24, 0x00	; 0
	GptStart_aSync(SWPwm_Channels[u8_ChannelID].u8_GptChannelID, gstr_ChannelsData[u8_ChannelID].u32_ONTicks, waveFunction);
	gstr_ChannelsData[u8_ChannelID].u32_NxtTicks = gstr_ChannelsData[u8_ChannelID].u32_OFFTicks;
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_RUNNING;
	
	return SWPWM_STATUS_ERROR_OK;
}
    1050:	26 96       	adiw	r28, 0x06	; 6
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	bf 90       	pop	r11
    106a:	af 90       	pop	r10
    106c:	9f 90       	pop	r9
    106e:	8f 90       	pop	r8
    1070:	7f 90       	pop	r7
    1072:	6f 90       	pop	r6
    1074:	5f 90       	pop	r5
    1076:	4f 90       	pop	r4
    1078:	08 95       	ret

0000107a <SWPwm_Stop>:
* Parameters (out): None
* Return value: enuSWPwm_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Stop the pulse wave on u8_ChannelID.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSWPwm_Status_t SWPwm_Stop(u8SWPwm_Channel_t u8_ChannelID)
{
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
	/**************************************************************************************/
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
    1082:	81 11       	cpse	r24, r1
    1084:	30 c0       	rjmp	.+96     	; 0x10e6 <SWPwm_Stop+0x6c>
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9c 01       	movw	r18, r24
    108a:	22 0f       	add	r18, r18
    108c:	33 1f       	adc	r19, r19
    108e:	f9 01       	movw	r30, r18
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	e2 1b       	sub	r30, r18
    109e:	f3 0b       	sbc	r31, r19
    10a0:	e2 55       	subi	r30, 0x52	; 82
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	25 85       	ldd	r18, Z+13	; 0x0d
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	01 f5       	brne	.+64     	; 0x10ea <SWPwm_Stop+0x70>
	/**************************************************************************************/
	
	/**************************************************************************************/
	/*								Function Implementation								  */
	/**************************************************************************************/
	Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW);
    10aa:	ec 01       	movw	r28, r24
    10ac:	cc 0f       	add	r28, r28
    10ae:	dd 1f       	adc	r29, r29
    10b0:	8e 01       	movw	r16, r28
    10b2:	09 56       	subi	r16, 0x69	; 105
    10b4:	1f 4f       	sbci	r17, 0xFF	; 255
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	f8 01       	movw	r30, r16
    10ba:	80 81       	ld	r24, Z
    10bc:	0e 94 18 03 	call	0x630	; 0x630 <Dio_writePin>
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
    10c0:	fe 01       	movw	r30, r28
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	ec 1b       	sub	r30, r28
    10d0:	fd 0b       	sbc	r31, r29
    10d2:	e2 55       	subi	r30, 0x52	; 82
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	85 87       	std	Z+13, r24	; 0x0d
	GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID);
    10da:	f8 01       	movw	r30, r16
    10dc:	81 81       	ldd	r24, Z+1	; 0x01
    10de:	0e 94 64 05 	call	0xac8	; 0xac8 <GptStop>
	
	return SWPWM_STATUS_ERROR_OK;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <SWPwm_Stop+0x72>
	/*								Start of Error Checking								  */
	/**************************************************************************************/
	/* Check if the channelID given is invalid */
	if (u8_ChannelID >= SWPWM_CHANNELS_NUM )
	{
		return SWPWM_STATUS_PWM_ID_INVALID;
    10e6:	83 e0       	ldi	r24, 0x03	; 3
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <SWPwm_Stop+0x72>
	}
	/* Check if the duty cycle given is out of range */
	if(gstr_ChannelsData[u8_ChannelID].enuChannelState != SWPWM_RUNNING)
	{
		return SWPWM_STATUS_RUNNING;
    10ea:	85 e0       	ldi	r24, 0x05	; 5
	Dio_writePin(SWPwm_Channels[u8_ChannelID].u8_DioChannelID, PIN_LOW);
	gstr_ChannelsData[u8_ChannelID].enuChannelState = SWPWM_STOPPED;
	GptStop(SWPwm_Channels[u8_ChannelID].u8_GptChannelID);
	
	return SWPWM_STATUS_ERROR_OK;
}
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	08 95       	ret

000010f6 <Service_init>:
* Description: Function to Initialize the Service layer -- Initialize all the below layers.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_init(void)
{
	/* Check if the Service Layer has been already initialized */
	if(genu_SrvcStatus == SRVC_STATUS_INITIALIZED)
    10f6:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <genu_SrvcStatus>
    10fa:	84 30       	cpi	r24, 0x04	; 4
    10fc:	81 f0       	breq	.+32     	; 0x111e <Service_init+0x28>
		return SRVC_STATUS_INITIALIZED;
		
		
	/* Call the initializer in Button and Motor*/
	if(BTTN_STATUS_ERROR_OK != Button_init())
    10fe:	0e 94 cd 00 	call	0x19a	; 0x19a <Button_init>
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	49 f4       	brne	.+18     	; 0x1118 <Service_init+0x22>
		return SRVC_STATUS_ERROR_NOK;
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
    1106:	0e 94 42 01 	call	0x284	; 0x284 <Motor_init>
    110a:	81 30       	cpi	r24, 0x01	; 1
    110c:	39 f4       	brne	.+14     	; 0x111c <Service_init+0x26>
		return SRVC_STATUS_ERROR_NOK;
	
	genu_SrvcStatus = SRVC_STATUS_INITIALIZED;
    110e:	84 e0       	ldi	r24, 0x04	; 4
    1110:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <genu_SrvcStatus>
	return SRVC_STATUS_ERROR_OK;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	08 95       	ret
		return SRVC_STATUS_INITIALIZED;
		
		
	/* Call the initializer in Button and Motor*/
	if(BTTN_STATUS_ERROR_OK != Button_init())
		return SRVC_STATUS_ERROR_NOK;
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	08 95       	ret
	if(MOTOR_STATUS_ERROR_OK != Motor_init())
		return SRVC_STATUS_ERROR_NOK;
    111c:	80 e0       	ldi	r24, 0x00	; 0
	
	genu_SrvcStatus = SRVC_STATUS_INITIALIZED;
	return SRVC_STATUS_ERROR_OK;
}
    111e:	08 95       	ret

00001120 <Service_ReportButton>:
* Parameters (out): pu8_button - Pointer to variable to hold the button pressed
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Start the Application.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_ReportButton(uint8_t* pu8_button)
{
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	1f 92       	push	r1
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	7c 01       	movw	r14, r24
	uint8_t u8_ButtonsIndex=0;
	uint8_t u8_ButtonCurrState=0;
    1132:	19 82       	std	Y+1, r1	; 0x01
	for (u8_ButtonsIndex=1 ; u8_ButtonsIndex<=BUTTONS_USED_NUM; u8_ButtonsIndex++)
    1134:	11 e0       	ldi	r17, 0x01	; 1
    1136:	10 c0       	rjmp	.+32     	; 0x1158 <Service_ReportButton+0x38>
	{
		Button_updateState(u8_ButtonsIndex);
    1138:	81 2f       	mov	r24, r17
    113a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Button_updateState>
		Button_getState(u8_ButtonsIndex, &u8_ButtonCurrState);
    113e:	be 01       	movw	r22, r28
    1140:	6f 5f       	subi	r22, 0xFF	; 255
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	81 2f       	mov	r24, r17
    1146:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Button_getState>
		if(u8_ButtonCurrState == BUTTON_STATE_PRESSED)
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	19 f4       	brne	.+6      	; 0x1156 <Service_ReportButton+0x36>
		{
			*pu8_button = u8_ButtonsIndex;
    1150:	f7 01       	movw	r30, r14
    1152:	10 83       	st	Z, r17
			return SRVC_STATUS_ERROR_OK;
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <Service_ReportButton+0x40>
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_ReportButton(uint8_t* pu8_button)
{
	uint8_t u8_ButtonsIndex=0;
	uint8_t u8_ButtonCurrState=0;
	for (u8_ButtonsIndex=1 ; u8_ButtonsIndex<=BUTTONS_USED_NUM; u8_ButtonsIndex++)
    1156:	1f 5f       	subi	r17, 0xFF	; 255
    1158:	15 30       	cpi	r17, 0x05	; 5
    115a:	70 f3       	brcs	.-36     	; 0x1138 <Service_ReportButton+0x18>
		{
			*pu8_button = u8_ButtonsIndex;
			return SRVC_STATUS_ERROR_OK;
		}
	}
	*pu8_button = BUTTON_NULL;
    115c:	f7 01       	movw	r30, r14
    115e:	10 82       	st	Z, r1
	return SRVC_STATUS_ERROR_OK;
}
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	0f 90       	pop	r0
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	08 95       	ret

00001170 <Service_UpdateMotors>:
* Return value: enuSrvc_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Update the state of the motor (Run the motor with the specific action
*				,direction and speed)
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuSrvc_Status_t Service_UpdateMotors(uint8_t u8_motorAction, uint8_t u8_motorSpeed)
{
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
	if(u8_motorAction == ACTION_STOP)
    1174:	81 11       	cpse	r24, r1
    1176:	08 c0       	rjmp	.+16     	; 0x1188 <Service_UpdateMotors+0x18>
	{
		Motor_stop(MOTOR_LEFT);
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	0e 94 b1 01 	call	0x362	; 0x362 <Motor_stop>
		Motor_stop(MOTOR_RIGHT);
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	0e 94 b1 01 	call	0x362	; 0x362 <Motor_stop>
		return SRVC_STATUS_ERROR_OK;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	3b c0       	rjmp	.+118    	; 0x11fe <Service_UpdateMotors+0x8e>
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
	uint8_t u8_rightMotorDir=MOTOR_FRWRD;
	
	switch (u8_motorSpeed)
    1188:	62 30       	cpi	r22, 0x02	; 2
    118a:	59 f0       	breq	.+22     	; 0x11a2 <Service_UpdateMotors+0x32>
    118c:	18 f4       	brcc	.+6      	; 0x1194 <Service_UpdateMotors+0x24>
    118e:	61 30       	cpi	r22, 0x01	; 1
    1190:	89 f0       	breq	.+34     	; 0x11b4 <Service_UpdateMotors+0x44>
    1192:	04 c0       	rjmp	.+8      	; 0x119c <Service_UpdateMotors+0x2c>
    1194:	63 30       	cpi	r22, 0x03	; 3
    1196:	41 f0       	breq	.+16     	; 0x11a8 <Service_UpdateMotors+0x38>
    1198:	64 30       	cpi	r22, 0x04	; 4
    119a:	49 f0       	breq	.+18     	; 0x11ae <Service_UpdateMotors+0x3e>
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    119c:	40 e0       	ldi	r20, 0x00	; 0
	{
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
    119e:	c0 e0       	ldi	r28, 0x00	; 0
    11a0:	0b c0       	rjmp	.+22     	; 0x11b8 <Service_UpdateMotors+0x48>
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    11a2:	40 e0       	ldi	r20, 0x00	; 0
	{
	case SPEED_30F:
		u8_speed = 30;
		break;
	case SPEED_60F:
		u8_speed = 60;
    11a4:	cc e3       	ldi	r28, 0x3C	; 60
		break;
    11a6:	08 c0       	rjmp	.+16     	; 0x11b8 <Service_UpdateMotors+0x48>
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    11a8:	40 e0       	ldi	r20, 0x00	; 0
		break;
	case SPEED_60F:
		u8_speed = 60;
		break;
	case SPEED_90F:
		u8_speed = 90;
    11aa:	ca e5       	ldi	r28, 0x5A	; 90
		break;
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <Service_UpdateMotors+0x48>
	case SPEED_30B:
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
    11ae:	41 e0       	ldi	r20, 0x01	; 1
		break;
	case SPEED_90F:
		u8_speed = 90;
		break;
	case SPEED_30B:
		u8_speed = 30;
    11b0:	ce e1       	ldi	r28, 0x1E	; 30
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
		break;
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <Service_UpdateMotors+0x48>
		Motor_stop(MOTOR_LEFT);
		Motor_stop(MOTOR_RIGHT);
		return SRVC_STATUS_ERROR_OK;
	}
	uint8_t u8_speed = 0;
	uint8_t u8_leftMotorDir=MOTOR_FRWRD;
    11b4:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t u8_rightMotorDir=MOTOR_FRWRD;
	
	switch (u8_motorSpeed)
	{
	case SPEED_30F:
		u8_speed = 30;
    11b6:	ce e1       	ldi	r28, 0x1E	; 30
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
		break;
	}
	
	if (u8_motorAction == ACTION_LEFT)
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	21 f0       	breq	.+8      	; 0x11c4 <Service_UpdateMotors+0x54>
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	31 f0       	breq	.+12     	; 0x11cc <Service_UpdateMotors+0x5c>
    11c0:	d4 2f       	mov	r29, r20
    11c2:	07 c0       	rjmp	.+14     	; 0x11d2 <Service_UpdateMotors+0x62>
	
	if (u8_motorAction == ACTION_LEFT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
    11c4:	d1 e0       	ldi	r29, 0x01	; 1
	}
	
	if (u8_motorAction == ACTION_LEFT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
    11c6:	40 e0       	ldi	r20, 0x00	; 0
		break;
	}
	
	if (u8_motorAction == ACTION_LEFT)
	{
		u8_speed = 30;
    11c8:	ce e1       	ldi	r28, 0x1E	; 30
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <Service_UpdateMotors+0x62>
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_FRWRD;
    11cc:	d0 e0       	ldi	r29, 0x00	; 0
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
	{
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
    11ce:	41 e0       	ldi	r20, 0x01	; 1
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_FRWRD;
		u8_rightMotorDir = MOTOR_BKWRD;
	}else if (u8_motorAction == ACTION_RIGHT)
	{
		u8_speed = 30;
    11d0:	ce e1       	ldi	r28, 0x1E	; 30
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_FRWRD;
	}
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_LEFT,u8_speed,u8_leftMotorDir))
    11d2:	6c 2f       	mov	r22, r28
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	0e 94 46 01 	call	0x28c	; 0x28c <Motor_run>
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	69 f4       	brne	.+26     	; 0x11f8 <Service_UpdateMotors+0x88>
		return SRVC_STATUS_ERROR_NOK;
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_RIGHT,u8_speed,u8_rightMotorDir))
    11de:	4d 2f       	mov	r20, r29
    11e0:	6c 2f       	mov	r22, r28
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	0e 94 46 01 	call	0x28c	; 0x28c <Motor_run>
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	41 f4       	brne	.+16     	; 0x11fc <Service_UpdateMotors+0x8c>
		return SRVC_STATUS_ERROR_NOK;
	Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_HIGH);
    11ec:	61 e0       	ldi	r22, 0x01	; 1
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	0e 94 18 03 	call	0x630	; 0x630 <Dio_writePin>
	return  SRVC_STATUS_ERROR_OK;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <Service_UpdateMotors+0x8e>
		u8_speed = 30;
		u8_leftMotorDir = MOTOR_BKWRD;
		u8_rightMotorDir = MOTOR_FRWRD;
	}
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_LEFT,u8_speed,u8_leftMotorDir))
		return SRVC_STATUS_ERROR_NOK;
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <Service_UpdateMotors+0x8e>
	if( MOTOR_STATUS_ERROR_OK != Motor_run(MOTOR_RIGHT,u8_speed,u8_rightMotorDir))
		return SRVC_STATUS_ERROR_NOK;
    11fc:	80 e0       	ldi	r24, 0x00	; 0
	Dio_writePin(DIO_LED1_CHANNEL_ID,PIN_HIGH);
	return  SRVC_STATUS_ERROR_OK;
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <__subsf3>:
    1204:	50 58       	subi	r21, 0x80	; 128

00001206 <__addsf3>:
    1206:	bb 27       	eor	r27, r27
    1208:	aa 27       	eor	r26, r26
    120a:	0e 94 1a 09 	call	0x1234	; 0x1234 <__addsf3x>
    120e:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_round>
    1212:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fp_pscA>
    1216:	38 f0       	brcs	.+14     	; 0x1226 <__addsf3+0x20>
    1218:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fp_pscB>
    121c:	20 f0       	brcs	.+8      	; 0x1226 <__addsf3+0x20>
    121e:	39 f4       	brne	.+14     	; 0x122e <__addsf3+0x28>
    1220:	9f 3f       	cpi	r25, 0xFF	; 255
    1222:	19 f4       	brne	.+6      	; 0x122a <__addsf3+0x24>
    1224:	26 f4       	brtc	.+8      	; 0x122e <__addsf3+0x28>
    1226:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__fp_nan>
    122a:	0e f4       	brtc	.+2      	; 0x122e <__addsf3+0x28>
    122c:	e0 95       	com	r30
    122e:	e7 fb       	bst	r30, 7
    1230:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__fp_inf>

00001234 <__addsf3x>:
    1234:	e9 2f       	mov	r30, r25
    1236:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__fp_split3>
    123a:	58 f3       	brcs	.-42     	; 0x1212 <__addsf3+0xc>
    123c:	ba 17       	cp	r27, r26
    123e:	62 07       	cpc	r22, r18
    1240:	73 07       	cpc	r23, r19
    1242:	84 07       	cpc	r24, r20
    1244:	95 07       	cpc	r25, r21
    1246:	20 f0       	brcs	.+8      	; 0x1250 <__addsf3x+0x1c>
    1248:	79 f4       	brne	.+30     	; 0x1268 <__addsf3x+0x34>
    124a:	a6 f5       	brtc	.+104    	; 0x12b4 <__addsf3x+0x80>
    124c:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__fp_zero>
    1250:	0e f4       	brtc	.+2      	; 0x1254 <__addsf3x+0x20>
    1252:	e0 95       	com	r30
    1254:	0b 2e       	mov	r0, r27
    1256:	ba 2f       	mov	r27, r26
    1258:	a0 2d       	mov	r26, r0
    125a:	0b 01       	movw	r0, r22
    125c:	b9 01       	movw	r22, r18
    125e:	90 01       	movw	r18, r0
    1260:	0c 01       	movw	r0, r24
    1262:	ca 01       	movw	r24, r20
    1264:	a0 01       	movw	r20, r0
    1266:	11 24       	eor	r1, r1
    1268:	ff 27       	eor	r31, r31
    126a:	59 1b       	sub	r21, r25
    126c:	99 f0       	breq	.+38     	; 0x1294 <__addsf3x+0x60>
    126e:	59 3f       	cpi	r21, 0xF9	; 249
    1270:	50 f4       	brcc	.+20     	; 0x1286 <__addsf3x+0x52>
    1272:	50 3e       	cpi	r21, 0xE0	; 224
    1274:	68 f1       	brcs	.+90     	; 0x12d0 <__addsf3x+0x9c>
    1276:	1a 16       	cp	r1, r26
    1278:	f0 40       	sbci	r31, 0x00	; 0
    127a:	a2 2f       	mov	r26, r18
    127c:	23 2f       	mov	r18, r19
    127e:	34 2f       	mov	r19, r20
    1280:	44 27       	eor	r20, r20
    1282:	58 5f       	subi	r21, 0xF8	; 248
    1284:	f3 cf       	rjmp	.-26     	; 0x126c <__addsf3x+0x38>
    1286:	46 95       	lsr	r20
    1288:	37 95       	ror	r19
    128a:	27 95       	ror	r18
    128c:	a7 95       	ror	r26
    128e:	f0 40       	sbci	r31, 0x00	; 0
    1290:	53 95       	inc	r21
    1292:	c9 f7       	brne	.-14     	; 0x1286 <__addsf3x+0x52>
    1294:	7e f4       	brtc	.+30     	; 0x12b4 <__addsf3x+0x80>
    1296:	1f 16       	cp	r1, r31
    1298:	ba 0b       	sbc	r27, r26
    129a:	62 0b       	sbc	r22, r18
    129c:	73 0b       	sbc	r23, r19
    129e:	84 0b       	sbc	r24, r20
    12a0:	ba f0       	brmi	.+46     	; 0x12d0 <__addsf3x+0x9c>
    12a2:	91 50       	subi	r25, 0x01	; 1
    12a4:	a1 f0       	breq	.+40     	; 0x12ce <__addsf3x+0x9a>
    12a6:	ff 0f       	add	r31, r31
    12a8:	bb 1f       	adc	r27, r27
    12aa:	66 1f       	adc	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	88 1f       	adc	r24, r24
    12b0:	c2 f7       	brpl	.-16     	; 0x12a2 <__addsf3x+0x6e>
    12b2:	0e c0       	rjmp	.+28     	; 0x12d0 <__addsf3x+0x9c>
    12b4:	ba 0f       	add	r27, r26
    12b6:	62 1f       	adc	r22, r18
    12b8:	73 1f       	adc	r23, r19
    12ba:	84 1f       	adc	r24, r20
    12bc:	48 f4       	brcc	.+18     	; 0x12d0 <__addsf3x+0x9c>
    12be:	87 95       	ror	r24
    12c0:	77 95       	ror	r23
    12c2:	67 95       	ror	r22
    12c4:	b7 95       	ror	r27
    12c6:	f7 95       	ror	r31
    12c8:	9e 3f       	cpi	r25, 0xFE	; 254
    12ca:	08 f0       	brcs	.+2      	; 0x12ce <__addsf3x+0x9a>
    12cc:	b0 cf       	rjmp	.-160    	; 0x122e <__addsf3+0x28>
    12ce:	93 95       	inc	r25
    12d0:	88 0f       	add	r24, r24
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <__addsf3x+0xa2>
    12d4:	99 27       	eor	r25, r25
    12d6:	ee 0f       	add	r30, r30
    12d8:	97 95       	ror	r25
    12da:	87 95       	ror	r24
    12dc:	08 95       	ret

000012de <__divsf3>:
    12de:	0e 94 83 09 	call	0x1306	; 0x1306 <__divsf3x>
    12e2:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_round>
    12e6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fp_pscB>
    12ea:	58 f0       	brcs	.+22     	; 0x1302 <__divsf3+0x24>
    12ec:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fp_pscA>
    12f0:	40 f0       	brcs	.+16     	; 0x1302 <__divsf3+0x24>
    12f2:	29 f4       	brne	.+10     	; 0x12fe <__divsf3+0x20>
    12f4:	5f 3f       	cpi	r21, 0xFF	; 255
    12f6:	29 f0       	breq	.+10     	; 0x1302 <__divsf3+0x24>
    12f8:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__fp_inf>
    12fc:	51 11       	cpse	r21, r1
    12fe:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__fp_szero>
    1302:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__fp_nan>

00001306 <__divsf3x>:
    1306:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__fp_split3>
    130a:	68 f3       	brcs	.-38     	; 0x12e6 <__divsf3+0x8>

0000130c <__divsf3_pse>:
    130c:	99 23       	and	r25, r25
    130e:	b1 f3       	breq	.-20     	; 0x12fc <__divsf3+0x1e>
    1310:	55 23       	and	r21, r21
    1312:	91 f3       	breq	.-28     	; 0x12f8 <__divsf3+0x1a>
    1314:	95 1b       	sub	r25, r21
    1316:	55 0b       	sbc	r21, r21
    1318:	bb 27       	eor	r27, r27
    131a:	aa 27       	eor	r26, r26
    131c:	62 17       	cp	r22, r18
    131e:	73 07       	cpc	r23, r19
    1320:	84 07       	cpc	r24, r20
    1322:	38 f0       	brcs	.+14     	; 0x1332 <__divsf3_pse+0x26>
    1324:	9f 5f       	subi	r25, 0xFF	; 255
    1326:	5f 4f       	sbci	r21, 0xFF	; 255
    1328:	22 0f       	add	r18, r18
    132a:	33 1f       	adc	r19, r19
    132c:	44 1f       	adc	r20, r20
    132e:	aa 1f       	adc	r26, r26
    1330:	a9 f3       	breq	.-22     	; 0x131c <__divsf3_pse+0x10>
    1332:	35 d0       	rcall	.+106    	; 0x139e <__divsf3_pse+0x92>
    1334:	0e 2e       	mov	r0, r30
    1336:	3a f0       	brmi	.+14     	; 0x1346 <__divsf3_pse+0x3a>
    1338:	e0 e8       	ldi	r30, 0x80	; 128
    133a:	32 d0       	rcall	.+100    	; 0x13a0 <__divsf3_pse+0x94>
    133c:	91 50       	subi	r25, 0x01	; 1
    133e:	50 40       	sbci	r21, 0x00	; 0
    1340:	e6 95       	lsr	r30
    1342:	00 1c       	adc	r0, r0
    1344:	ca f7       	brpl	.-14     	; 0x1338 <__divsf3_pse+0x2c>
    1346:	2b d0       	rcall	.+86     	; 0x139e <__divsf3_pse+0x92>
    1348:	fe 2f       	mov	r31, r30
    134a:	29 d0       	rcall	.+82     	; 0x139e <__divsf3_pse+0x92>
    134c:	66 0f       	add	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	bb 1f       	adc	r27, r27
    1354:	26 17       	cp	r18, r22
    1356:	37 07       	cpc	r19, r23
    1358:	48 07       	cpc	r20, r24
    135a:	ab 07       	cpc	r26, r27
    135c:	b0 e8       	ldi	r27, 0x80	; 128
    135e:	09 f0       	breq	.+2      	; 0x1362 <__divsf3_pse+0x56>
    1360:	bb 0b       	sbc	r27, r27
    1362:	80 2d       	mov	r24, r0
    1364:	bf 01       	movw	r22, r30
    1366:	ff 27       	eor	r31, r31
    1368:	93 58       	subi	r25, 0x83	; 131
    136a:	5f 4f       	sbci	r21, 0xFF	; 255
    136c:	3a f0       	brmi	.+14     	; 0x137c <__divsf3_pse+0x70>
    136e:	9e 3f       	cpi	r25, 0xFE	; 254
    1370:	51 05       	cpc	r21, r1
    1372:	78 f0       	brcs	.+30     	; 0x1392 <__divsf3_pse+0x86>
    1374:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__fp_inf>
    1378:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__fp_szero>
    137c:	5f 3f       	cpi	r21, 0xFF	; 255
    137e:	e4 f3       	brlt	.-8      	; 0x1378 <__divsf3_pse+0x6c>
    1380:	98 3e       	cpi	r25, 0xE8	; 232
    1382:	d4 f3       	brlt	.-12     	; 0x1378 <__divsf3_pse+0x6c>
    1384:	86 95       	lsr	r24
    1386:	77 95       	ror	r23
    1388:	67 95       	ror	r22
    138a:	b7 95       	ror	r27
    138c:	f7 95       	ror	r31
    138e:	9f 5f       	subi	r25, 0xFF	; 255
    1390:	c9 f7       	brne	.-14     	; 0x1384 <__divsf3_pse+0x78>
    1392:	88 0f       	add	r24, r24
    1394:	91 1d       	adc	r25, r1
    1396:	96 95       	lsr	r25
    1398:	87 95       	ror	r24
    139a:	97 f9       	bld	r25, 7
    139c:	08 95       	ret
    139e:	e1 e0       	ldi	r30, 0x01	; 1
    13a0:	66 0f       	add	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	88 1f       	adc	r24, r24
    13a6:	bb 1f       	adc	r27, r27
    13a8:	62 17       	cp	r22, r18
    13aa:	73 07       	cpc	r23, r19
    13ac:	84 07       	cpc	r24, r20
    13ae:	ba 07       	cpc	r27, r26
    13b0:	20 f0       	brcs	.+8      	; 0x13ba <__divsf3_pse+0xae>
    13b2:	62 1b       	sub	r22, r18
    13b4:	73 0b       	sbc	r23, r19
    13b6:	84 0b       	sbc	r24, r20
    13b8:	ba 0b       	sbc	r27, r26
    13ba:	ee 1f       	adc	r30, r30
    13bc:	88 f7       	brcc	.-30     	; 0x13a0 <__divsf3_pse+0x94>
    13be:	e0 95       	com	r30
    13c0:	08 95       	ret

000013c2 <__fixunssfsi>:
    13c2:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_splitA>
    13c6:	88 f0       	brcs	.+34     	; 0x13ea <__fixunssfsi+0x28>
    13c8:	9f 57       	subi	r25, 0x7F	; 127
    13ca:	98 f0       	brcs	.+38     	; 0x13f2 <__fixunssfsi+0x30>
    13cc:	b9 2f       	mov	r27, r25
    13ce:	99 27       	eor	r25, r25
    13d0:	b7 51       	subi	r27, 0x17	; 23
    13d2:	b0 f0       	brcs	.+44     	; 0x1400 <__fixunssfsi+0x3e>
    13d4:	e1 f0       	breq	.+56     	; 0x140e <__fixunssfsi+0x4c>
    13d6:	66 0f       	add	r22, r22
    13d8:	77 1f       	adc	r23, r23
    13da:	88 1f       	adc	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	1a f0       	brmi	.+6      	; 0x13e6 <__fixunssfsi+0x24>
    13e0:	ba 95       	dec	r27
    13e2:	c9 f7       	brne	.-14     	; 0x13d6 <__fixunssfsi+0x14>
    13e4:	14 c0       	rjmp	.+40     	; 0x140e <__fixunssfsi+0x4c>
    13e6:	b1 30       	cpi	r27, 0x01	; 1
    13e8:	91 f0       	breq	.+36     	; 0x140e <__fixunssfsi+0x4c>
    13ea:	0e 94 97 0a 	call	0x152e	; 0x152e <__fp_zero>
    13ee:	b1 e0       	ldi	r27, 0x01	; 1
    13f0:	08 95       	ret
    13f2:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__fp_zero>
    13f6:	67 2f       	mov	r22, r23
    13f8:	78 2f       	mov	r23, r24
    13fa:	88 27       	eor	r24, r24
    13fc:	b8 5f       	subi	r27, 0xF8	; 248
    13fe:	39 f0       	breq	.+14     	; 0x140e <__fixunssfsi+0x4c>
    1400:	b9 3f       	cpi	r27, 0xF9	; 249
    1402:	cc f3       	brlt	.-14     	; 0x13f6 <__fixunssfsi+0x34>
    1404:	86 95       	lsr	r24
    1406:	77 95       	ror	r23
    1408:	67 95       	ror	r22
    140a:	b3 95       	inc	r27
    140c:	d9 f7       	brne	.-10     	; 0x1404 <__fixunssfsi+0x42>
    140e:	3e f4       	brtc	.+14     	; 0x141e <__fixunssfsi+0x5c>
    1410:	90 95       	com	r25
    1412:	80 95       	com	r24
    1414:	70 95       	com	r23
    1416:	61 95       	neg	r22
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	8f 4f       	sbci	r24, 0xFF	; 255
    141c:	9f 4f       	sbci	r25, 0xFF	; 255
    141e:	08 95       	ret

00001420 <__floatunsisf>:
    1420:	e8 94       	clt
    1422:	09 c0       	rjmp	.+18     	; 0x1436 <__floatsisf+0x12>

00001424 <__floatsisf>:
    1424:	97 fb       	bst	r25, 7
    1426:	3e f4       	brtc	.+14     	; 0x1436 <__floatsisf+0x12>
    1428:	90 95       	com	r25
    142a:	80 95       	com	r24
    142c:	70 95       	com	r23
    142e:	61 95       	neg	r22
    1430:	7f 4f       	sbci	r23, 0xFF	; 255
    1432:	8f 4f       	sbci	r24, 0xFF	; 255
    1434:	9f 4f       	sbci	r25, 0xFF	; 255
    1436:	99 23       	and	r25, r25
    1438:	a9 f0       	breq	.+42     	; 0x1464 <__floatsisf+0x40>
    143a:	f9 2f       	mov	r31, r25
    143c:	96 e9       	ldi	r25, 0x96	; 150
    143e:	bb 27       	eor	r27, r27
    1440:	93 95       	inc	r25
    1442:	f6 95       	lsr	r31
    1444:	87 95       	ror	r24
    1446:	77 95       	ror	r23
    1448:	67 95       	ror	r22
    144a:	b7 95       	ror	r27
    144c:	f1 11       	cpse	r31, r1
    144e:	f8 cf       	rjmp	.-16     	; 0x1440 <__floatsisf+0x1c>
    1450:	fa f4       	brpl	.+62     	; 0x1490 <__floatsisf+0x6c>
    1452:	bb 0f       	add	r27, r27
    1454:	11 f4       	brne	.+4      	; 0x145a <__floatsisf+0x36>
    1456:	60 ff       	sbrs	r22, 0
    1458:	1b c0       	rjmp	.+54     	; 0x1490 <__floatsisf+0x6c>
    145a:	6f 5f       	subi	r22, 0xFF	; 255
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
    145e:	8f 4f       	sbci	r24, 0xFF	; 255
    1460:	9f 4f       	sbci	r25, 0xFF	; 255
    1462:	16 c0       	rjmp	.+44     	; 0x1490 <__floatsisf+0x6c>
    1464:	88 23       	and	r24, r24
    1466:	11 f0       	breq	.+4      	; 0x146c <__floatsisf+0x48>
    1468:	96 e9       	ldi	r25, 0x96	; 150
    146a:	11 c0       	rjmp	.+34     	; 0x148e <__floatsisf+0x6a>
    146c:	77 23       	and	r23, r23
    146e:	21 f0       	breq	.+8      	; 0x1478 <__floatsisf+0x54>
    1470:	9e e8       	ldi	r25, 0x8E	; 142
    1472:	87 2f       	mov	r24, r23
    1474:	76 2f       	mov	r23, r22
    1476:	05 c0       	rjmp	.+10     	; 0x1482 <__floatsisf+0x5e>
    1478:	66 23       	and	r22, r22
    147a:	71 f0       	breq	.+28     	; 0x1498 <__floatsisf+0x74>
    147c:	96 e8       	ldi	r25, 0x86	; 134
    147e:	86 2f       	mov	r24, r22
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	2a f0       	brmi	.+10     	; 0x1490 <__floatsisf+0x6c>
    1486:	9a 95       	dec	r25
    1488:	66 0f       	add	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	88 1f       	adc	r24, r24
    148e:	da f7       	brpl	.-10     	; 0x1486 <__floatsisf+0x62>
    1490:	88 0f       	add	r24, r24
    1492:	96 95       	lsr	r25
    1494:	87 95       	ror	r24
    1496:	97 f9       	bld	r25, 7
    1498:	08 95       	ret

0000149a <__fp_inf>:
    149a:	97 f9       	bld	r25, 7
    149c:	9f 67       	ori	r25, 0x7F	; 127
    149e:	80 e8       	ldi	r24, 0x80	; 128
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	08 95       	ret

000014a6 <__fp_nan>:
    14a6:	9f ef       	ldi	r25, 0xFF	; 255
    14a8:	80 ec       	ldi	r24, 0xC0	; 192
    14aa:	08 95       	ret

000014ac <__fp_pscA>:
    14ac:	00 24       	eor	r0, r0
    14ae:	0a 94       	dec	r0
    14b0:	16 16       	cp	r1, r22
    14b2:	17 06       	cpc	r1, r23
    14b4:	18 06       	cpc	r1, r24
    14b6:	09 06       	cpc	r0, r25
    14b8:	08 95       	ret

000014ba <__fp_pscB>:
    14ba:	00 24       	eor	r0, r0
    14bc:	0a 94       	dec	r0
    14be:	12 16       	cp	r1, r18
    14c0:	13 06       	cpc	r1, r19
    14c2:	14 06       	cpc	r1, r20
    14c4:	05 06       	cpc	r0, r21
    14c6:	08 95       	ret

000014c8 <__fp_round>:
    14c8:	09 2e       	mov	r0, r25
    14ca:	03 94       	inc	r0
    14cc:	00 0c       	add	r0, r0
    14ce:	11 f4       	brne	.+4      	; 0x14d4 <__fp_round+0xc>
    14d0:	88 23       	and	r24, r24
    14d2:	52 f0       	brmi	.+20     	; 0x14e8 <__fp_round+0x20>
    14d4:	bb 0f       	add	r27, r27
    14d6:	40 f4       	brcc	.+16     	; 0x14e8 <__fp_round+0x20>
    14d8:	bf 2b       	or	r27, r31
    14da:	11 f4       	brne	.+4      	; 0x14e0 <__fp_round+0x18>
    14dc:	60 ff       	sbrs	r22, 0
    14de:	04 c0       	rjmp	.+8      	; 0x14e8 <__fp_round+0x20>
    14e0:	6f 5f       	subi	r22, 0xFF	; 255
    14e2:	7f 4f       	sbci	r23, 0xFF	; 255
    14e4:	8f 4f       	sbci	r24, 0xFF	; 255
    14e6:	9f 4f       	sbci	r25, 0xFF	; 255
    14e8:	08 95       	ret

000014ea <__fp_split3>:
    14ea:	57 fd       	sbrc	r21, 7
    14ec:	90 58       	subi	r25, 0x80	; 128
    14ee:	44 0f       	add	r20, r20
    14f0:	55 1f       	adc	r21, r21
    14f2:	59 f0       	breq	.+22     	; 0x150a <__fp_splitA+0x10>
    14f4:	5f 3f       	cpi	r21, 0xFF	; 255
    14f6:	71 f0       	breq	.+28     	; 0x1514 <__fp_splitA+0x1a>
    14f8:	47 95       	ror	r20

000014fa <__fp_splitA>:
    14fa:	88 0f       	add	r24, r24
    14fc:	97 fb       	bst	r25, 7
    14fe:	99 1f       	adc	r25, r25
    1500:	61 f0       	breq	.+24     	; 0x151a <__fp_splitA+0x20>
    1502:	9f 3f       	cpi	r25, 0xFF	; 255
    1504:	79 f0       	breq	.+30     	; 0x1524 <__fp_splitA+0x2a>
    1506:	87 95       	ror	r24
    1508:	08 95       	ret
    150a:	12 16       	cp	r1, r18
    150c:	13 06       	cpc	r1, r19
    150e:	14 06       	cpc	r1, r20
    1510:	55 1f       	adc	r21, r21
    1512:	f2 cf       	rjmp	.-28     	; 0x14f8 <__fp_split3+0xe>
    1514:	46 95       	lsr	r20
    1516:	f1 df       	rcall	.-30     	; 0x14fa <__fp_splitA>
    1518:	08 c0       	rjmp	.+16     	; 0x152a <__fp_splitA+0x30>
    151a:	16 16       	cp	r1, r22
    151c:	17 06       	cpc	r1, r23
    151e:	18 06       	cpc	r1, r24
    1520:	99 1f       	adc	r25, r25
    1522:	f1 cf       	rjmp	.-30     	; 0x1506 <__fp_splitA+0xc>
    1524:	86 95       	lsr	r24
    1526:	71 05       	cpc	r23, r1
    1528:	61 05       	cpc	r22, r1
    152a:	08 94       	sec
    152c:	08 95       	ret

0000152e <__fp_zero>:
    152e:	e8 94       	clt

00001530 <__fp_szero>:
    1530:	bb 27       	eor	r27, r27
    1532:	66 27       	eor	r22, r22
    1534:	77 27       	eor	r23, r23
    1536:	cb 01       	movw	r24, r22
    1538:	97 f9       	bld	r25, 7
    153a:	08 95       	ret

0000153c <__mulsf3>:
    153c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__mulsf3x>
    1540:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__fp_round>
    1544:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fp_pscA>
    1548:	38 f0       	brcs	.+14     	; 0x1558 <__mulsf3+0x1c>
    154a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fp_pscB>
    154e:	20 f0       	brcs	.+8      	; 0x1558 <__mulsf3+0x1c>
    1550:	95 23       	and	r25, r21
    1552:	11 f0       	breq	.+4      	; 0x1558 <__mulsf3+0x1c>
    1554:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__fp_inf>
    1558:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__fp_nan>
    155c:	11 24       	eor	r1, r1
    155e:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__fp_szero>

00001562 <__mulsf3x>:
    1562:	0e 94 75 0a 	call	0x14ea	; 0x14ea <__fp_split3>
    1566:	70 f3       	brcs	.-36     	; 0x1544 <__mulsf3+0x8>

00001568 <__mulsf3_pse>:
    1568:	95 9f       	mul	r25, r21
    156a:	c1 f3       	breq	.-16     	; 0x155c <__mulsf3+0x20>
    156c:	95 0f       	add	r25, r21
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	55 1f       	adc	r21, r21
    1572:	62 9f       	mul	r22, r18
    1574:	f0 01       	movw	r30, r0
    1576:	72 9f       	mul	r23, r18
    1578:	bb 27       	eor	r27, r27
    157a:	f0 0d       	add	r31, r0
    157c:	b1 1d       	adc	r27, r1
    157e:	63 9f       	mul	r22, r19
    1580:	aa 27       	eor	r26, r26
    1582:	f0 0d       	add	r31, r0
    1584:	b1 1d       	adc	r27, r1
    1586:	aa 1f       	adc	r26, r26
    1588:	64 9f       	mul	r22, r20
    158a:	66 27       	eor	r22, r22
    158c:	b0 0d       	add	r27, r0
    158e:	a1 1d       	adc	r26, r1
    1590:	66 1f       	adc	r22, r22
    1592:	82 9f       	mul	r24, r18
    1594:	22 27       	eor	r18, r18
    1596:	b0 0d       	add	r27, r0
    1598:	a1 1d       	adc	r26, r1
    159a:	62 1f       	adc	r22, r18
    159c:	73 9f       	mul	r23, r19
    159e:	b0 0d       	add	r27, r0
    15a0:	a1 1d       	adc	r26, r1
    15a2:	62 1f       	adc	r22, r18
    15a4:	83 9f       	mul	r24, r19
    15a6:	a0 0d       	add	r26, r0
    15a8:	61 1d       	adc	r22, r1
    15aa:	22 1f       	adc	r18, r18
    15ac:	74 9f       	mul	r23, r20
    15ae:	33 27       	eor	r19, r19
    15b0:	a0 0d       	add	r26, r0
    15b2:	61 1d       	adc	r22, r1
    15b4:	23 1f       	adc	r18, r19
    15b6:	84 9f       	mul	r24, r20
    15b8:	60 0d       	add	r22, r0
    15ba:	21 1d       	adc	r18, r1
    15bc:	82 2f       	mov	r24, r18
    15be:	76 2f       	mov	r23, r22
    15c0:	6a 2f       	mov	r22, r26
    15c2:	11 24       	eor	r1, r1
    15c4:	9f 57       	subi	r25, 0x7F	; 127
    15c6:	50 40       	sbci	r21, 0x00	; 0
    15c8:	9a f0       	brmi	.+38     	; 0x15f0 <__mulsf3_pse+0x88>
    15ca:	f1 f0       	breq	.+60     	; 0x1608 <__mulsf3_pse+0xa0>
    15cc:	88 23       	and	r24, r24
    15ce:	4a f0       	brmi	.+18     	; 0x15e2 <__mulsf3_pse+0x7a>
    15d0:	ee 0f       	add	r30, r30
    15d2:	ff 1f       	adc	r31, r31
    15d4:	bb 1f       	adc	r27, r27
    15d6:	66 1f       	adc	r22, r22
    15d8:	77 1f       	adc	r23, r23
    15da:	88 1f       	adc	r24, r24
    15dc:	91 50       	subi	r25, 0x01	; 1
    15de:	50 40       	sbci	r21, 0x00	; 0
    15e0:	a9 f7       	brne	.-22     	; 0x15cc <__mulsf3_pse+0x64>
    15e2:	9e 3f       	cpi	r25, 0xFE	; 254
    15e4:	51 05       	cpc	r21, r1
    15e6:	80 f0       	brcs	.+32     	; 0x1608 <__mulsf3_pse+0xa0>
    15e8:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__fp_inf>
    15ec:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__fp_szero>
    15f0:	5f 3f       	cpi	r21, 0xFF	; 255
    15f2:	e4 f3       	brlt	.-8      	; 0x15ec <__mulsf3_pse+0x84>
    15f4:	98 3e       	cpi	r25, 0xE8	; 232
    15f6:	d4 f3       	brlt	.-12     	; 0x15ec <__mulsf3_pse+0x84>
    15f8:	86 95       	lsr	r24
    15fa:	77 95       	ror	r23
    15fc:	67 95       	ror	r22
    15fe:	b7 95       	ror	r27
    1600:	f7 95       	ror	r31
    1602:	e7 95       	ror	r30
    1604:	9f 5f       	subi	r25, 0xFF	; 255
    1606:	c1 f7       	brne	.-16     	; 0x15f8 <__mulsf3_pse+0x90>
    1608:	fe 2b       	or	r31, r30
    160a:	88 0f       	add	r24, r24
    160c:	91 1d       	adc	r25, r1
    160e:	96 95       	lsr	r25
    1610:	87 95       	ror	r24
    1612:	97 f9       	bld	r25, 7
    1614:	08 95       	ret

00001616 <__udivmodsi4>:
    1616:	a1 e2       	ldi	r26, 0x21	; 33
    1618:	1a 2e       	mov	r1, r26
    161a:	aa 1b       	sub	r26, r26
    161c:	bb 1b       	sub	r27, r27
    161e:	fd 01       	movw	r30, r26
    1620:	0d c0       	rjmp	.+26     	; 0x163c <__udivmodsi4_ep>

00001622 <__udivmodsi4_loop>:
    1622:	aa 1f       	adc	r26, r26
    1624:	bb 1f       	adc	r27, r27
    1626:	ee 1f       	adc	r30, r30
    1628:	ff 1f       	adc	r31, r31
    162a:	a2 17       	cp	r26, r18
    162c:	b3 07       	cpc	r27, r19
    162e:	e4 07       	cpc	r30, r20
    1630:	f5 07       	cpc	r31, r21
    1632:	20 f0       	brcs	.+8      	; 0x163c <__udivmodsi4_ep>
    1634:	a2 1b       	sub	r26, r18
    1636:	b3 0b       	sbc	r27, r19
    1638:	e4 0b       	sbc	r30, r20
    163a:	f5 0b       	sbc	r31, r21

0000163c <__udivmodsi4_ep>:
    163c:	66 1f       	adc	r22, r22
    163e:	77 1f       	adc	r23, r23
    1640:	88 1f       	adc	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	1a 94       	dec	r1
    1646:	69 f7       	brne	.-38     	; 0x1622 <__udivmodsi4_loop>
    1648:	60 95       	com	r22
    164a:	70 95       	com	r23
    164c:	80 95       	com	r24
    164e:	90 95       	com	r25
    1650:	9b 01       	movw	r18, r22
    1652:	ac 01       	movw	r20, r24
    1654:	bd 01       	movw	r22, r26
    1656:	cf 01       	movw	r24, r30
    1658:	08 95       	ret

0000165a <__tablejump2__>:
    165a:	ee 0f       	add	r30, r30
    165c:	ff 1f       	adc	r31, r31
    165e:	05 90       	lpm	r0, Z+
    1660:	f4 91       	lpm	r31, Z
    1662:	e0 2d       	mov	r30, r0
    1664:	09 94       	ijmp

00001666 <_exit>:
    1666:	f8 94       	cli

00001668 <__stop_program>:
    1668:	ff cf       	rjmp	.-2      	; 0x1668 <__stop_program>
